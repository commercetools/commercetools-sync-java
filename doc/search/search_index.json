{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#commercetools-sync","title":"commercetools sync","text":"<p>Java library which allows to import/synchronise (import changes) the data from any arbitrary source to commercetools project.</p> <p>Supported resources: Categories, Products, InventoryEntries, ProductTypes, Types, CartDiscounts, States, TaxCategories, CustomObjects, Customers, ShoppingLists</p>"},{"location":"#usage","title":"Usage","text":"<p>Create you own event or cronjob based application and use the library to transform any external data (JSON, CSV, XML, REST API, DB, ...) into commercetools-jvm-sdk resource draft objects (e.g. CategoryDraft) and import those into the commercetools project.</p> <p>Notes:</p> <ul> <li>It is often more efficient if you can setup your external data source to provide you only the changes (deltas) instead of the full data set on every import iteration.</li> <li>There is dockerized ready-to-use CLI application commercetools-project-sync which based on this library can synchronize entire data catalogue between the 2 commercetools projects.</li> <li>During a synchronisation, resources are either created or updated, but not deleted.</li> </ul> <p>\u26a1 See the Quick Start Guide for more information on building a product importer!</p> <p></p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Library requires the min JDK version <code>&gt;= 8</code>. <p>The library tested with each major JDK version (i.e: 8, 9, 10, 11, 12, 13...) as well as some specific updates of LTS versions (i.e: 8.0.192, 11.0.3).</p> </li> <li>A target commercetools project for syncing your source data to.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>There are multiple ways to add the commercetools sync dependency to your project, based on your dependency manager.  Here are the most popular ones:</p>"},{"location":"#maven","title":"Maven","text":"<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.commercetools&lt;/groupId&gt;\n  &lt;artifactId&gt;commercetools-sync-java&lt;/artifactId&gt;\n  &lt;version&gt;10.0.6&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"#gradle","title":"Gradle","text":"<pre><code>implementation 'com.commercetools:commercetools-sync-java:10.0.6'\n</code></pre>"},{"location":"#sbt","title":"SBT","text":"<pre><code>libraryDependencies += \"com.commercetools\" % \"commercetools-sync-java\" % \"10.0.6\"\n</code></pre>"},{"location":"#ivy","title":"Ivy","text":"<pre><code>&lt;dependency org=\"com.commercetools\" name=\"commercetools-sync-java\" rev=\"10.0.6\"/&gt;\n</code></pre>"},{"location":"BENCHMARKS/","title":"Benchmarks","text":""},{"location":"BENCHMARKS/#setup","title":"Setup","text":"<ol> <li> <p>Benchmarks are run by JUnit as a separate source set just like main, test and integration-test. The benchmarks can be  found here.</p> </li> <li> <p>Every time a commit is made in any branch, the benchmarks are run and the run shows whether the benchmarks exceed the pre-defined threshold, so that we know if the corresponding commit influences the performance.</p> </li> <li> <p>Benchmark results are written as JSON to  benchmarks.json only when a  new release is made. The JSON file is saved in the gh-pages branch  of the repo.</p> </li> <li> <p>The average results in benchmarks.json are used to display the results in the form of this graph. </p> </li> </ol>"},{"location":"BENCHMARKS/#results","title":"Results","text":"<p>Results as json can be found here. Results as a chart can be found here.</p>"},{"location":"BUILD/","title":"BUILD","text":"<p>Table of Contents </p> <ul> <li>Release workflow</li> <li>Step 1: Pull request</li> <li>Step 2: Release library in Github</li> <li>Final Step<ul> <li>Checklist</li> </ul> </li> </ul>"},{"location":"BUILD/#release-workflow","title":"Release workflow","text":"<p>The main goal of the build process is to publish the artifacts to public repository Maven Central.</p>"},{"location":"BUILD/#step-1-pull-request","title":"Step 1: Pull request","text":"<p>Create a new PR for the new release:  - Increment the release version to the new library version, please follow the semantic versioning for finding the new version. - Make sure all the dependencies are up-to-date everywhere in the documentation files and the project files where needed. - Make sure to add a section for the release in the release notes.  - Ask for review for this PR and then \"squash and merge\" to master.</p> <p>For example PR, see: https://github.com/commercetools/commercetools-sync-java/pull/412</p>"},{"location":"BUILD/#step-2-release-library-in-github","title":"Step 2: Release library in Github","text":"<p>To release the library, you need to \"create a new release\" with Github,  describe the new release as below and publish it. </p> <p>For example, define the link to the release notes pointing to a released version: <pre><code>#### 1.8.2\n- [Release notes](https://github.com/commercetools/commercetools-sync-java/blob/master/docs/RELEASE_NOTES.md#182----april-30-2020)\n- [Javadoc](https://commercetools.github.io/commercetools-sync-java/v/1.8.2/)\n</code></pre></p> <p>Additionally define important changes, breaking changes or important new features into the description.</p> <p>The creation of a github release triggers a github action, which will deploy the library first to Sonatype staging repo and then to Maven Central.</p>"},{"location":"BUILD/#final-step","title":"Final Step","text":"<p>After the release build status is success ensure that the new version is publicly available at Maven Central. </p>"},{"location":"BUILD/#checklist","title":"Checklist","text":"<ul> <li>Publish completed without an issue.</li> <li>The new version is available in the (https://repo1.maven.org/maven2/com/commercetools/commercetools-sync-java)</li> </ul>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at support@commercetools.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at http://contributor-covenant.org/version/\u00bc</p>"},{"location":"CONTRIBUTING/","title":"Contributing to commercetools-sync-java","text":"<p>These are the contribution guidelines for the commercetools-sync-java.</p> <p>Thanks for taking the time to contribute :+1::tada: All contributions are welcome! </p> <ul> <li>Contribution process for all committers</li> <li>Typos</li> <li>Features or Bug Fixes</li> <li>Development</li> <li>Build<ul> <li>Run unit tests</li> <li>Package JARs</li> <li>Package JARs and run tests</li> <li>Full build with tests, but without install to maven local repo (Recommended)</li> <li>Install to local maven repo</li> <li>Publish JavaDoc</li> <li>Build and publish to Maven Central</li> </ul> </li> <li>Integration Tests<ul> <li>Running</li> </ul> </li> <li>Using the google java style and code formatter</li> <li>IntelliJ, Android Studio, and other JetBrains IDEs</li> <li>Eclipse</li> <li>Spotless commands<ul> <li>Run Spotless Style Check</li> <li>Fix Spotless style violations</li> </ul> </li> <li>Ignoring mass reformatting commits with git blame</li> </ul>"},{"location":"CONTRIBUTING/#contribution-process-for-all-committers","title":"Contribution process for all committers","text":""},{"location":"CONTRIBUTING/#typos","title":"Typos","text":"<p>If you have push access to the repository you can fix them directly otherwise just make a pull request.</p>"},{"location":"CONTRIBUTING/#features-or-bug-fixes","title":"Features or Bug Fixes","text":"<ul> <li>Every PR should address an issue on the repository. If the issue doesn't exist, please create it first and link PR with the issue. </li> <li>After your PR is approved by all reviewers and the build is green:<ul> <li>Use <code>Squash and merge</code> option on a pull request on GitHub, with that the pull request's commits should be squashed into a single commit.      &gt; Instead of seeing all of a contributor's individual commit messages, the commits should be combined into one commit message with a clear commit description. </li> <li>Delete the branch when the PR is closed.</li> <li>Close the issue only if the change was released.</li> </ul> </li> </ul>"},{"location":"CONTRIBUTING/#development","title":"Development","text":""},{"location":"CONTRIBUTING/#build","title":"Build","text":""},{"location":"CONTRIBUTING/#run-unit-tests","title":"Run unit tests","text":"<pre><code>./gradlew test\n</code></pre>"},{"location":"CONTRIBUTING/#package-jars","title":"Package JARs","text":"<pre><code>./gradlew clean jar\n</code></pre>"},{"location":"CONTRIBUTING/#package-jars-and-run-tests","title":"Package JARs and run tests","text":"<pre><code>./gradlew clean check\n</code></pre>"},{"location":"CONTRIBUTING/#full-build-with-tests-but-without-install-to-maven-local-repo-recommended","title":"Full build with tests, but without install to maven local repo (Recommended)","text":"<pre><code>./gradlew clean build\n</code></pre>"},{"location":"CONTRIBUTING/#install-to-local-maven-repo","title":"Install to local maven repo","text":"<pre><code>./gradlew clean install\n</code></pre>"},{"location":"CONTRIBUTING/#publish-javadoc","title":"Publish JavaDoc","text":"<pre><code>./gradlew clean javadoc gitPublishPush -Dbuild.version={version}\n</code></pre>"},{"location":"CONTRIBUTING/#build-and-publish-to-maven-central","title":"Build and publish to Maven Central","text":"<pre><code>./gradlew clean setLibraryVersion -Dbuild.version={version} publishToSonatype closeAndReleaseSonatypeStagingRepository\n</code></pre> <p>For more detailed information on the build and the release process, see Build and Release documentation.</p>"},{"location":"CONTRIBUTING/#integration-tests","title":"Integration Tests","text":"<ol> <li> <p>The integration tests of the library require to have two CTP projects (a source project and a target project) where the  data will be tested to be synced from the source to the target project. </p> </li> <li> <p>Running the tests does the following:</p> <ul> <li>Clean all the data on both projects.</li> <li>Create test data in either/both projects depending on the test.</li> <li>Execute the tests.</li> <li>Clean all the data in both projects, leaving them empty.</li> </ul> </li> </ol>"},{"location":"CONTRIBUTING/#running","title":"Running","text":"<p>To run the integration tests, CTP credentials are required. The credential can be obtained once you create a CTP project. For details, please refer to the following link: https://docs.commercetools.com/merchant-center/projects.html#creating-a-project </p> <ol> <li>Use credentials Java properties file <code>/src/integration-test/resources/it.properties</code>:</li> </ol> <pre><code>source.projectKey=aaaaa\nsource.clientId=bbbbbbb\nsource.clientSecret=ccc\n\ntarget.projectKey=ddddd\ntarget.clientId=eeeeeee\ntarget.clientSecret=fff\n</code></pre> <p>Use <code>it.properties.skeleton</code>    as a template to setup the credentials.</p> <p>Note: the <code>it.properties</code> file must be ignored by VCS. </p> <ol> <li>Set the following environment variables:   <pre><code>export SOURCE_PROJECT_KEY = xxxxxxxxxxxxx\nexport SOURCE_CLIENT_ID = xxxxxxxxxxxxxxx\nexport SOURCE_CLIENT_SECRET = xxxxxxxxxxx\nexport TARGET_PROJECT_KEY = xxxxxxxxxxxxx\nexport TARGET_CLIENT_ID = xxxxxxxxxxxxxxx\nexport TARGET_CLIENT_SECRET = xxxxxxxxxxx\n</code></pre></li> </ol> <p>Note: <code>it.properties</code> file has precedence over environment variables. If the file exists -    the environment variables are ignored. If the existing <code>it.properties</code> file is empty or one of the properties    is missing - exception will be thrown on the execution of the tests</p> <p>If one of the two options above is set - run the integration tests: <pre><code>./gradlew integrationTest\n</code></pre></p>"},{"location":"CONTRIBUTING/#using-the-google-java-style-and-code-formatter","title":"Using the google java style and code formatter","text":"<p>We are using <code>google-java-format</code> to format Java source code to comply with Google Java Style.</p>"},{"location":"CONTRIBUTING/#intellij-android-studio-and-other-jetbrains-ides","title":"IntelliJ, Android Studio, and other JetBrains IDEs","text":"<p>A google-java-format IntelliJ plugin is available from the plugin repository. To install it, go to your IDE's settings and select the <code>Plugins</code> category. Click the <code>Marketplace</code> tab, search for the <code>google-java-format</code> plugin, and click the <code>Install</code> button.</p> <p>The plugin will be disabled by default. To enable it in the current project, go to <code>File\u2192Settings...\u2192google-java-format Settings</code> (or <code>IntelliJIDEA\u2192Preferences...\u2192Other Settings\u2192google-java-format Settings</code> on macOS) and check the <code>Enable google-java-format</code> checkbox. (A notification will be presented when you first open a project offering to do this for you.)</p> <p>To enable it by default in new projects, use <code>File\u2192Other Settings\u2192Default Settings...</code>. When enabled, it will replace the normal <code>Reformat Code</code> action, which can be triggered by the <code>Code</code> menu or with the Ctrl-Alt (by default) keyboard shortcut.</p>"},{"location":"CONTRIBUTING/#eclipse","title":"Eclipse","text":"<p>google-java-format Eclipse plugin can be downloaded from the releases page. Drop it into the Eclipsedrop-ins folderto activate the plugin.</p> <p>The plugin adds a <code>google-java-format</code> formatter implementation that can be configured in <code>Window &gt; Preferences &gt; Java &gt; Code Style &gt; Formatter &gt; Formatter Implementation</code>.</p>"},{"location":"CONTRIBUTING/#spotless-commands","title":"Spotless commands","text":""},{"location":"CONTRIBUTING/#run-spotless-style-check","title":"Run Spotless Style Check","text":"<pre><code>./gradlew spotlessCheck\n</code></pre>"},{"location":"CONTRIBUTING/#fix-spotless-style-violations","title":"Fix Spotless style violations","text":"<pre><code>./gradlew spotlessApply\n</code></pre>"},{"location":"CONTRIBUTING/#ignoring-mass-reformatting-commits-with-git-blame","title":"Ignoring mass reformatting commits with git blame","text":"<p>To exclude the formatting commits git blame supports writing the commit hashes into a file and then referencing the file with <code>--ignore-revs-file</code>.                    To be able to archive that <code>git blame ./file.java --ignore-revs-file .git-blame-ignore-revs</code> command to ignore this revision to find a better git history.      </p> <p>Also <code>git config blame.ignoreRevsFile .git-blame-ignore-revs</code> could be configured to ignore this revision always.</p> <p>We create <code>.git-blame-ignore-revs</code> that could be found in the repository.   </p>"},{"location":"DOCUMENTATION_PAGES/","title":"Building the Documentation Pages","text":"<p>The documentation pages are published here: https://commercetools.github.io/commercetools-sync-java</p> <ul> <li>mkdocs documentation.</li> <li>mkdocs-material documentation.</li> </ul>"},{"location":"DOCUMENTATION_PAGES/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"DOCUMENTATION_PAGES/#gradle-tasks","title":"Gradle tasks","text":"<ul> <li><code>mkdocsInit</code> - Create new mkdocs site (like this).</li> <li><code>mkdocsBuild</code> - Build the documentation site.</li> <li><code>mkdocsServe</code> - Start the live-reloading docs server.</li> <li><code>mkdocsPublish</code> - Publish generated site version to github pages.</li> </ul>"},{"location":"DOCUMENTATION_PAGES/#mkdocs-native-commands","title":"Mkdocs native Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs help</code> - Print this help message.</li> </ul>"},{"location":"MIGRATION_GUIDE/","title":"MIGRATION GUIDE","text":"<p>Table of Contents generated with DocToc</p> <ul> <li>Migration Guide</li> <li>Migrate syncers of supported resources<ul> <li>Categories, </li> <li>Products</li> <li>InventoryEntries</li> <li>ProductTypes</li> <li>Types</li> <li>CartDiscounts</li> <li>States</li> <li>TaxCategories</li> <li>CustomObjects</li> <li>Customers</li> <li>ShoppingLists</li> </ul> </li> </ul>"},{"location":"MIGRATION_GUIDE/#migration-guide","title":"Migration Guide","text":"<p>The commercetools sync library uses the JVM-SDK-V2, therefore ensure you Install JVM SDK module <code>commercetools-sdk-java-api</code> with any HTTP client module. The default one is <code>commercetools-http-client</code>.</p>"},{"location":"MIGRATION_GUIDE/#common-changes","title":"Common Changes","text":"<p>Some utility methods aren't available in this version. Please make sure to replace these. Here's a list of changes:</p> <ul> <li>Removed utility methods: <pre><code>// CollectionUtils\npublic static &lt;T&gt; Set&lt;T&gt; emptyIfNull(@Nullable final Set&lt;T&gt; set)\n</code></pre> <pre><code>// ShoppingListReferenceResolutionUtils\npublic static ShoppingListQuery buildShoppingListQuery() {\n  return ShoppingListQuery.of().plusExpansionPaths(ExpansionPath.of(\"lineItems[*].variant\"));\n}\n</code></pre></li> <li>Changed scope of utility method: <pre><code>// CompletableFutureUtils\nprivate static &lt;T, S, U extends Collection&lt;CompletableFuture&lt;S&gt;&gt;&gt; U mapValuesToFutures(\n      @Nonnull final Stream&lt;T&gt; values,\n      @Nonnull final Function&lt;T, CompletionStage&lt;S&gt;&gt; mapper,\n      @Nonnull final Collector&lt;CompletableFuture&lt;S&gt;, ?, U&gt; collector)\n</code></pre></li> <li>Removed helper class: ChannelCustomActionBuilder <pre><code>// Included these methods\n  public UpdateAction&lt;Channel&gt; buildRemoveCustomTypeAction(\n      @Nullable final Integer variantId, @Nullable final String objectId);\n\n  public UpdateAction&lt;Channel&gt; buildSetCustomTypeAction(\n      @Nullable final Integer variantId,\n      @Nullable final String objectId,\n      @Nonnull final String customTypeId,\n      @Nullable final Map&lt;String, JsonNode&gt; customFieldsJsonMap);\n\n  public UpdateAction&lt;Channel&gt; buildSetCustomFieldAction(\n      @Nullable final Integer variantId,\n      @Nullable final String objectId,\n      @Nullable final String customFieldName,\n      @Nullable final JsonNode customFieldValue);\n</code></pre></li> </ul>"},{"location":"MIGRATION_GUIDE/#migrate-syncers-of-supported-resources","title":"Migrate syncers of supported resources","text":"<ul> <li>Categories, </li> <li>Products</li> <li>InventoryEntries</li> <li>ProductTypes</li> <li>Types</li> <li>CartDiscounts</li> <li>States</li> <li>TaxCategories</li> <li>CustomObjects</li> <li>Customers</li> <li>ShoppingLists</li> </ul>"},{"location":"RELEASE_NOTES/","title":"Release Notes","text":""},{"location":"RELEASE_NOTES/#1006-mar-20-2025","title":"10.0.6 - Mar 20, 2025","text":"<p>Commits | Javadoc | Jar - \ud83d\udc1e Bug Fixes (1)   - Fix product attributes being updated even though they did not change (https://github.com/commercetools/commercetools-sync-java/issues/1200)</p>"},{"location":"RELEASE_NOTES/#1005-feb-8-2024","title":"10.0.5 - Feb 8, 2024","text":"<p>Commits | Javadoc | Jar - \ud83d\udc1e Bug Fixes (1)   - Fix images not being returned by variant resolution utils (https://github.com/commercetools/commercetools-project-sync/issues/555)</p>"},{"location":"RELEASE_NOTES/#1004-jan-9-2024","title":"10.0.4 - Jan 9, 2024","text":"<p>Commits | Javadoc | Jar - \ud83d\udc1e Bug Fixes (1)   - Fix getting a wrong JSON Object mapper (https://github.com/commercetools/commercetools-sync-java/issues/1138)</p>"},{"location":"RELEASE_NOTES/#1003-dec-21-2023","title":"10.0.3 - Dec 21, 2023","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udc1e Bug Fixes (1)</li> <li>Fix NullPointerException for products having a category but no category order hints (https://github.com/commercetools/commercetools-sync-java/pull/1134) </li> </ul>"},{"location":"RELEASE_NOTES/#1002-dec-05-2023","title":"10.0.2 - Dec 05, 2023","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udc1e Bug Fixes (4)<ul> <li>Product Sync - Sync now supports syncing of products with attributes referencing themselves. #478</li> <li>State Sync - Fix NPE thrown by <code>StateDraftBuilder.build()</code> when required fields are missing. The <code>StateTransformUtils.toStateDrafts</code> utility returns an empty draft when key is null or empty.</li> <li>Inventory Sync - Fix NPE thrown by <code>InventoryEntryDraftBuilder.build()</code> when required fields are missing. The <code>InventoryTransformUtils.toInventoryEntryDrafts</code> utility returns an empty draft when sku is null or empty.</li> <li>ProductType Sync - Fix ReferenceResolution of product-type attributes to avoid sync errors.</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#1001-nov-14-2023","title":"10.0.1 - Nov 14, 2023","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udc1e Bug fixes (1)</li> <li>Make commercetools-sdk-java-v2 available as a transitive dependency</li> </ul>"},{"location":"RELEASE_NOTES/#1000-nov-6-2023","title":"10.0.0 - Nov 6, 2023","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udea7 Breaking Changes (1)</li> <li>commercetools-sync-java is now fully migrated to <code>commercetools-sdk-java-v2</code>. See Migration Guide on how to use this library version.</li> </ul>"},{"location":"RELEASE_NOTES/#923-mar-21-2023","title":"9.2.3 - Mar 21, 2023","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udc1e Bug Fixes</li> <li>Fix the problem when switching master variants #918</li> </ul>"},{"location":"RELEASE_NOTES/#921-feb-10-2023","title":"9.2.1 - Feb 10, 2023","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udc1e Bug Fixes</li> <li> <p>Fix rich type reference issue in product type #893</p> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates</p> </li> <li>Migrated <code>com.commercetools.sdk.jvm.core</code> to <code>2.12.0</code></li> </ul>"},{"location":"RELEASE_NOTES/#920-dec-06-2022","title":"9.2.0 - Dec 06, 2022","text":"<p>Commits | Javadoc | Jar - \u2728 Enhancements (2)   - Display Github tag instead of Github commit hash in Benchmarks chart #867   - Run Bechmarks test in every commit #868</p> <pre><code>To help developers to review the performance change before creating new release, benchmarks test now executes not only during making new release, but also pushing new commit in branches.\nThe test result of commit is displayed in the build in Github Action. It shows whether benchmarks of current commit over the pre-defined threshold, while the benchmarks chart keeps displaying  \nthe test result of each library version.\n</code></pre> <ul> <li>\ud83d\udc1e Bug Fixes</li> <li> <p>Fix NPE in ProductSync benchmarks test for SDK-v2 #874</p> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates</p> </li> <li>Migrated <code>com.commercetools.sdk</code> from <code>9.4.0</code> to <code>9.5.0</code></li> <li>Migrated <code>com.github.ben-manes.caffeine</code> <code>3.1.1</code> to <code>3.1.2</code></li> <li>Migrated <code>com.github.ben-manes.versions</code> <code>0.43.0</code> -&gt; <code>0.44.0</code></li> <li>Migrated <code>ru.vyarus.mkdocs</code> <code>2.4.0</code> -&gt; <code>3.0.0</code></li> </ul>"},{"location":"RELEASE_NOTES/#910-nov-02-2022","title":"9.1.0 - Nov 02, 2022","text":"<p>Commits | Javadoc | Jar - \u2728 Enhancement (1)   - Java SDK-v2 Compatible layer adaption #859</p> <pre><code>Commercetools has already developed [next generation Java SDK (Java-SDK-v2)](https://github.com/commercetools/commercetools-sdk-java-v2) for communication between client-side and the platform. \nAs it provides a compatible layer which ease the migration work, we now provide alternative methods in [ClientConfigurationUtils](https://github.com/commercetools/commercetools-sync-java/blob/master/src/main/java/com/commercetools/sync/commons/utils/ClientConfigurationUtils.java) for client creation purpose. Meanwhile the original\nmethods keep unchanged and support client creation with [existing JAVA SDK](https://github.com/commercetools/commercetools-jvm-sdk).\n\nFor details how to create client from Java-SDK-v2, please refer to [Important Usage Tips](https://github.com/commercetools/commercetools-sync-java/blob/master/docs/usage/IMPORTANT_USAGE_TIPS.md)\n</code></pre> <ul> <li>\ud83d\udee0\ufe0f Dependency Updates<ul> <li>Added <code>com.commercetools.sdk</code> <code>9.4.0</code></li> <li>Migrated <code>com.diffplug.spotless</code> plugin from <code>6.9.1</code> to <code>6.11.0</code>.</li> <li>Migrated <code>com.github.ben-manes.versions</code> <code>0.42.0</code> -&gt; <code>0.43.0</code></li> <li>Migrated <code>com.github.spotbugs</code> <code>5.0.12</code> -&gt; <code>5.0.13</code></li> <li>Migrated <code>commercetools-jvm-sdk</code> -&gt; 2.9.0</li> <li>Migrated <code>org.apache.commons:common-text</code> <code>1.9</code> -&gt; <code>1.10</code></li> <li>Migrated <code>org.mockito:mockito-junit-jupiter</code> <code>4.7.0</code> -&gt; <code>4.8.1</code></li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#903-sep-22-2022","title":"9.0.3 - Sep 22, 2022","text":"<p>Commits | Javadoc | Jar - \ud83d\udc1e Bug Fixes   - Fix broken link in the github.io documentation #853</p>"},{"location":"RELEASE_NOTES/#902-sep-21-2022","title":"9.0.2 - Sep 21, 2022","text":"<p>Commits | Javadoc | Jar - \ud83d\udc1e Bug Fixes   - Add correct resources to the error callbacks #850</p>"},{"location":"RELEASE_NOTES/#901-aug-13-2022","title":"9.0.1 - Aug 13, 2022","text":"<p>Commits | Javadoc | Jar - \ud83d\udc1e Bug Fixes   - Fix broken links in the github.io documentation #843 - \ud83d\udee0\ufe0f Dependency Updates   - <code>org.ajoberstar.git-publish</code> <code>4.1.0</code> -&gt; <code>4.1.1</code>   - <code>org.mockito:mockito-junit-jupiter</code> <code>4.6.1</code> -&gt; <code>4.7.0</code>   - <code>com.diffplug.spotless</code> <code>6.9.0</code> -&gt; <code>6.9.1</code></p>"},{"location":"RELEASE_NOTES/#900-aug-8-2022","title":"9.0.0 - Aug 8, 2022","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83d\udea7 Breaking Changes (1)</p> <ul> <li>Minimum Java 11 or above is required #840</li> </ul> </li> <li> <p>\u2728 Build Tools</p> <ul> <li>Migrated <code>org.ajoberstar.grgit</code> plugin from <code>4.1.1</code> to <code>5.0.0</code>.</li> <li>Migrated <code>org.ajoberstar.git-publish</code> plugin from <code>3.0.1</code> to <code>4.1.0</code>.</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates</p> <ul> <li><code>commercetools-jvm-sdk</code> <code>2.6.0</code> -&gt; <code>2.9.0</code></li> <li><code>caffeineVersion</code> <code>2.9.3</code> -&gt; <code>3.1.1</code></li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#811-mar-21-2022","title":"8.1.1 - Mar 21, 2022","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udc1e Bug Fixes (1)</li> <li> <p>Product Sync - Fixed the <code>AddToCategory</code>, <code>RemoveFromCategory</code> action, which creates unnecessary update action when there is no difference and it leads to error. #816</p> </li> <li> <p>\u2728 Enhancement (1)</p> </li> <li> <p>Resolve warnings and deprecated usages. #808</p> </li> <li> <p>\u2728 Build Tools</p> </li> <li>Migrated from gradle <code>v7.3.1</code> to <code>v7.3.3</code>.</li> <li> <p>Migrated github actions <code>setup-java</code> plugin from <code>v2</code> to <code>v3</code></p> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates</p> </li> <li><code>commercetools-jvm-sdk</code> <code>2.5.0</code> -&gt; <code>2.6.0</code></li> <li><code>com.github.spotbugs</code> <code>5.0.2</code> -&gt; <code>5.0.5</code></li> <li><code>com.diffplug.spotless</code> <code>6.0.4</code> -&gt; <code>6.2.0</code></li> <li><code>mockito-junit-jupiter</code> <code>4.1.0</code> -&gt;  <code>4.3.1</code></li> <li><code>org.assertj.assertj-core</code> <code>3.21.0</code> -&gt;  <code>3.22.0</code></li> </ul>"},{"location":"RELEASE_NOTES/#810-dec-14-2021","title":"8.1.0 - Dec 14, 2021","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\u2728 Build Tools </li> <li>Migrated from gradle <code>v6.8.2</code> to <code>v7.3.1</code>.</li> <li>Migrated github actions <code>setup-java</code> plugin from <code>v1</code> to <code>v2</code></li> <li> <p>Migrated github actions <code>codecov-action</code> plugin from <code>v1</code> to <code>v2</code></p> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates </p> </li> <li><code>commercetools-jvm-sdk</code> <code>1.64.0</code> -&gt; <code>2.5.0</code></li> <li><code>com.adarshr.test-logger</code> <code>3.0.0</code> -&gt; <code>3.1.0</code></li> <li><code>ru.vyarus.mkdocs</code> <code>2.1.2</code> -&gt; <code>2.2.0</code></li> <li><code>org.ajoberstar.grgit</code> <code>4.1.0</code> -&gt; <code>4.1.1</code></li> <li><code>com.github.spotbugs</code> <code>4.7.1</code> -&gt; <code>5.0.2</code></li> <li><code>com.diffplug.spotless</code> <code>5.14.2</code> -&gt; <code>6.0.4</code></li> <li><code>mockito-junit-jupiter</code> <code>3.11.2</code> -&gt;  <code>4.1.0</code></li> <li><code>org.junit.jupiter:junit-jupiter-api</code> <code>5.7.2</code> -&gt; <code>5.8.2</code></li> <li><code>org.junit.jupiter:junit-jupiter-engine</code> <code>5.7.2</code> -&gt; <code>5.8.2</code></li> <li><code>org.junit.jupiter:junit-jupiter-params</code> <code>5.7.2</code> -&gt; <code>5.8.2</code></li> <li><code>org.assertj.assertj-core</code> <code>3.20.2</code> -&gt;  <code>3.21.0</code></li> <li><code>com.github.ben-manes.caffeine</code> <code>2.9.2</code> -&gt; <code>2.9.3</code></li> <li>(new) <code>org.apache.commons:common-text</code> <code>1.9</code></li> </ul>"},{"location":"RELEASE_NOTES/#800-oct-1-2021","title":"8.0.0 - Oct 1, 2021","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udea7 Breaking Changes (1)</li> <li> <p>Removed support of changing the attribute definition type #787 since removal and addition of the attribute with the same name in a single request is not possible by commercetools API anymore. For more information please check.</p> </li> <li> <p>\u2728 Enhancement (1)</p> </li> <li>Use the new concurrency keyword on github actions to limit the concurrency of the workflow runs. #772</li> </ul>"},{"location":"RELEASE_NOTES/#702-sep-21-2021","title":"7.0.2 - Sep 21, 2021","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\u2728 Enhancement (1)<ul> <li>Dependency management - Migrate Dependabot to Renovate.#767</li> </ul> </li> </ul> <p>\u2728 Documentation (1)      - Update docs and Release notes about the usage of JVM-SDK dependencies.#766</p>"},{"location":"RELEASE_NOTES/#701-sep-15-2021","title":"7.0.1 - Sep 15, 2021","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udc1e Bug Fixes (1)<ul> <li>State Sync - State to sync correctly from source to target when no transitions configured.#763 </li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#700-aug-24-2021","title":"7.0.0 - Aug 24, 2021","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udea7 Breaking Changes (1)</li> <li>Dependency management: To avoid <code>commercetools JVM SDK</code> libraries version mismatch between projects.      It is better not to add <code>commercetools JVM SDK</code> dependencies explicitly into your project and use them from <code>commercetools-Sync-Java</code> dependencies instead.      Check README.md for more details.</li> </ul> <p>\u2728 Documentation (1)     - Usage documentation on main readme improved, obsolete links is removed. #758</p>"},{"location":"RELEASE_NOTES/#600-jul-19-2021","title":"6.0.0 - Jul 19, 2021","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udea7 Breaking Changes (1)</li> <li> <p>Inventory Sync: <code>InventoryService.fetchInventoryEntriesBySkus(Set&lt;String&gt; skus)</code> is renamed to <code>InventoryService.fetchInventoryEntriesByIdentifiers(Set&lt;InventoryEntryIdentifier&gt; inventoryEntryIdentifiers)</code>. #757</p> </li> <li> <p>\ud83d\udc1e Bug Fixes (1)</p> </li> <li>Inventory Sync - Fixed the <code>DuplicateField</code> bug in the <code>InventorySync</code> related to fetching and syncing inventories with multiple channels. #757</li> </ul>"},{"location":"RELEASE_NOTES/#513-jul-8-2021","title":"5.1.3 - Jul 8, 2021","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83d\udc1e Bug Fixes (1)</p> <ul> <li>TaxCategory Sync - TaxCategories to sync properly when we have many TaxRates with different states.</li> </ul> </li> <li> <p>\u2728 Enhancements (1)</p> <ul> <li>Product Sync - After a fix from JVM-SDK(1.64.0), ProductProjection search uses built in predicate to filter resources by the key to avoid issues like #269.</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (5)</p> <ul> <li><code>commercetools-jvm-sdk 1.63.0</code> -&gt; 1.64.0</li> <li><code>assertjVersion 3.19.0</code> -&gt; <code>3.20.2</code> </li> <li><code>caffeineVersion 2.9.1</code> -&gt; <code>2.9.2</code></li> <li><code>mockitoJunitJupiterVersion 3.10.0</code> -&gt; <code>3.11.2</code></li> <li><code>com.diffplug.spotless 5.12.5</code> -&gt; <code>5.14.0</code></li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#512-may-31-2021","title":"5.1.2 - May 31, 2021","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83d\udc1e Bug Fixes (1)</p> <ul> <li>Product Sync - The user is now aware of unresolvable references as the transform service will not skip the products.</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (3)</p> <ul> <li><code>com.github.ben-manes.versions 0.38.0</code> -&gt; <code>0.39.0</code> </li> <li><code>caffeineVersion 2.8.5</code> -&gt; <code>2.9.1</code></li> <li><code>netty-codec-http 4.1.64.Final</code> -&gt; <code>4.1.65.Final</code></li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#511-may-18-2021","title":"5.1.1 - May 18, 2021","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83d\udc1e Bug Fixes (2)</p> <ul> <li>Product Sync - Special characters can be defined for ProductDraft key. #269</li> <li>Product Sync - After a fix from JVM-SDK(1.63.0), Added integration tests to make sure <code>PriceTiers</code> are synched successfully. #271</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (7)</p> <ul> <li><code>commercetools-jvm-sdk 1.62.0</code> -&gt; 1.63.0</li> <li><code>io.codearte.nexus-staging 0.30.0</code> -&gt; <code>io.github.gradle-nexus.publish-plugin 1.11.0</code> (Adapt new gradle plugin for artifact publishing)</li> <li><code>com.github.spotbugs 4.7.0</code> -&gt; <code>4.7.1</code></li> <li><code>com.diffplug.spotless 5.12.1</code> -&gt; <code>5.12.5</code> </li> <li><code>org.mockito:mockito-junit-jupiter 3.9.0</code> -&gt; <code>3.10.0</code></li> <li><code>org.junit.jupiter 5.7.0</code> -&gt; <code>5.7.2</code></li> <li><code>netty-codec-http 4.1.63.Final</code> -&gt; <code>4.1.64.Final</code></li> </ul> <p>Build Tools (1) - Change build script and cd.yml for new gradle publish plugin.</p> </li> </ul>"},{"location":"RELEASE_NOTES/#510-apr-20-2021","title":"5.1.0 - Apr 20, 2021","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83c\udf89 New Features (1)</li> <li>Syncing product types with an attribute of type Set of (Set of Set of..) of NestedType attribute is supported. #720</li> </ul>"},{"location":"RELEASE_NOTES/#500-apr-12-2021","title":"5.0.0 - Apr 12, 2021","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83d\udea7 Breaking Changes (2)</p> <ul> <li>For mapping a <code>resource</code> (Product, Category, CartDiscount, ShoppingList, State, InventoryEntry, ProductType, Customer) to <code>resourceDraft</code>  the new util method should be called.</li> </ul> <p>Example for Product Sync: For mapping from <code>Product</code> to <code>ProductDraft</code> the util method <code>ProductTransformUtils.toProductDrafts</code>  should be called along with <code>sphereClient</code>, cache implementation(<code>ReferenceIdToKeyCache</code>) and <code>productTypes</code> parameters.</p> <ul> <li> <p>Product Sync: The <code>productProjections</code> endpoint is used instead of <code>products</code> endpoint to improve the      performance of the <code>product Sync</code>. </p> </li> <li> <p>Changes:</p> <ul> <li>The <code>callbacks</code> of the <code>product Sync</code> will now work with <code>productProjections</code> instead of <code>products</code> </li> <li>The update action (<code>buildCustomUpdateActions</code>,<code>buildAssetsUpdateActions</code>,<code>buildAssetActions</code>) doesn't   require the \"old Resource\" as parameter anymore.</li> <li>All update actions of products now working with <code>ProductProjections</code> instead of <code>Products</code> </li> <li>The method <code>syncFrenchDataOnly</code> has a new signature <code>public static List&lt;UpdateAction&lt;Product&gt;&gt; syncFrenchDataOnly(@Nonnull final List&lt;UpdateAction&lt;Product&gt;&gt; updateActions, @Nonnull final ProductDraft newProductDraft,  @Nonnull final ProductProjection oldProduct)</code> </li> <li>The method <code>keepOtherVariants</code> has a new signature <code>List&lt;UpdateAction&lt;Product&gt;&gt; keepOtherVariants( @Nonnull final List&lt;UpdateAction&lt;Product&gt;&gt; updateActions)</code></li> <li>The method <code>mapToProductDrafts</code> has a new signature <code>public static List&lt;ProductDraft&gt; mapToProductDrafts(Nonnull final List&lt;ProductProjection&gt; products)</code></li> <li>The method <code>getDraftBuilderFromStagedProduct</code> has a new signature <code>public static  ProductDraftBuildergetDraft BuilderFromStagedProduct(@Nonnull final ProductProjection product)</code></li> <li>The method <code>buildProductQuery</code> has a new signature <code>public static ProductProjectionQuery buildProductQuery()</code></li> <li>The method <code>buildCategoryActions</code> has a new signature <code>public static List&lt;UpdateAction&lt;Product&gt;&gt; buildCategoryActions(@Nonnull final ProductProjection oldProduct, @Nonnull final ProductDraft newProduct)</code></li> <li>The class <code>BaseSyncOptions</code> has a new generics <code>&lt;A&gt;</code>, which indicate the resource type to update</li> <li>The class <code>BaseSyncOptionsBuilder</code> has a new generics <code>&lt;A&gt;</code>, which indicate the resource type to update</li> </ul> </li> </ul> </li> <li> <p>\u2728 Enhancements (2)</p> <ul> <li> <p>To improve performance of the library, We are not expanding any references in the query for the resources, Instead library fetches key-id pairs and stores in a cache to reuse them. Example for ProductSync:  The util class method <code>ProductTransformUtils.toProductDrafts</code> will fetch key-id pairs and stores in a cache. This cache has been used to build the <code>productDraft</code> by resolving references. For detailed documentation refer - syncing-from-a-commercetools-project</p> </li> <li> <p>Product Sync </p> <ul> <li>Use the new <code>addVariant</code> which supports the adding assets of the new variant. #714</li> <li>Support synchronization of <code>state</code> and <code>customer</code> references in product variant attributes. #715</li> </ul> </li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (1)  commercetools-jvm-sdk 1.60.0 -&gt; 1.62.0</p> </li> </ul>"},{"location":"RELEASE_NOTES/#401-mar-19-2021","title":"4.0.1 - Mar 19, 2021","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\u2728 Enhancements (1)</p> <ul> <li>To avoid 414 request-URI too large error, the services are using chunking on the input list(keys or sku's) to  chunk the input considering the length of the request URI and execute the query for these chunks.</li> </ul> </li> <li> <p>\u2728 Build Tools (1)</p> </li> <li> <p>Migrated from gradle <code>v5.6.2</code> to <code>v6.8.2</code>.</p> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (1)</p> </li> <li>Updated the following transitive dependencies to avoid vulnerability issues of previous versions:<ul> <li><code>com.fasterxml.jackson.dataformat:jackson-dataformat-cbor</code> -&gt; Fixed vulnerability issue for DoS attacks</li> <li><code>io.netty:netty-codec-http</code> -&gt; Fixed vulnerability issue for Information Disclosure</li> <li><code>org.apache.httpcomponents:httpclient</code> -&gt; Fixed vulnerability issue for Improper Input Validation</li> <li><code>commons-codec:commons-codec</code>-&gt; Fixed vulnerability issue for Information Exposure</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#400-feb-26-2021","title":"4.0.0 - Feb 26, 2021","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83d\udea7 Breaking Changes (1)</p> <ul> <li>Product Sync: <code>PriceDraft.getCustomerGroup()</code> is changed from <code>Reference&lt;CustomerGroup&gt;</code> to <code>ResourceIdentifier&lt;CustomerGroup&gt;</code>, so as a library user you don't need to provide a key field in the id field of the Reference. (Now API and JVM SDK support <code>ResourceIdentifiers</code> and it supports id or key as a field). #676</li> </ul> </li> <li> <p>\u2728 Enhancements (1)</p> <ul> <li>Refactored CategorySync to make it consistent with other Sync types (e.g ProductSync). #681</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (2)</p> <ul> <li><code>commercetools-jvm-sdk</code> <code>1.57.0</code> -&gt; <code>1.60.0</code></li> <li><code>commercetools-java-client</code>  -&gt; <code>commercetools-java-client-ahc-2_5</code> -&gt; Upgraded the default http client to avoid \"Runtime Access Warnings\" because of out of date netty dependencies on jvm-sdk. Note: <code>commercetools-java-client-ahc-2_5</code> dependency uses async-http-client version 2.5.4</li> </ul> </li> <li> <p>\u2728 Build Tools (1)</p> </li> <li>Migrating from JCenter / Bintray to The Maven Central Repository. Additionally, automate the staging process from <code>OSSRH</code> from <code>maven central</code>. #667 </li> </ul>"},{"location":"RELEASE_NOTES/#320-feb-3-2021","title":"3.2.0 - Feb 3, 2021","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (1)</p> <ul> <li>Now the categories, which have an unresolvable parent category, are persisted in custom objects,    so they can be resolved in different executions / instances of the category sync. #658 </li> </ul> </li> <li> <p>\ud83d\udc1e Bug Fixes (1)</p> <ul> <li>To avoid <code>Error 413 (Request Entity Too Large)</code> issues, a fix added to unresolved reference custom object fetching. #666</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (1)</p> <ul> <li><code>commercetools-jvm-sdk</code> <code>1.56.0</code> -&gt; <code>1.57.0</code></li> </ul> </li> <li> <p>\u2728 Build Tools (1)</p> <ul> <li>Migrate to github actions from travis-ci #664 </li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#310-jan-13-2021","title":"3.1.0 - Jan 13, 2021","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (1)</p> <ul> <li>Added clean up implementation for the outdated pending reference resolution custom objects. #650</li> </ul> </li> <li> <p>\u2728 Enhancements (1)</p> <ul> <li>Added a graphQL pagination utility. #627</li> </ul> </li> <li> <p>\u2728 Documentation (1)</p> <ul> <li>Documentation added for the cleaning up of the unresolved references, check the cleanup guide for more details.</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#302-dec-16-2020","title":"3.0.2 - Dec 16, 2020","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\u2728 Documentation (2)</p> <ul> <li>Documentation for the cacheSize sync option is added.</li> <li>Prerequisites section of the documentations are clarified and added more code snippets as usage examples.</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (1)</p> <ul> <li><code>commercetools-jvm-sdk</code> <code>1.55.0</code> -&gt; <code>1.56.0</code></li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#301-nov-24-2020","title":"3.0.1 - Nov 24, 2020","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\u2728 Enhancements (1)</p> <ul> <li>To improve performance of the library, the services are using graphQL API to fetch resource ids only; also the  <code>keyToId</code> caches evict entries which haven't been used for the longest amount of time beyond a maximum size. The cache  size is configurable in the sync options. #582</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (2)</p> <ul> <li><code>commercetools-jvm-sdk</code> <code>1.54.0</code> -&gt; <code>1.55.0</code></li> <li>(new) <code>com.github.ben-manes.caffeine</code> <code>2.8.5</code></li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#300-nov-18-2020","title":"3.0.0 - Nov 18, 2020","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83d\udea7 Breaking Changes (1)</p> <ul> <li>Product Sync: <code>ProductDraft.getState()</code> is changed from <code>Reference&lt;State&gt;</code> to <code>ResourceIdentifier&lt;State&gt;</code>, so as a library user you don't need to provide a key field in the id field of the Reference. (Now API and JVM SDK support <code>ResourceIdentifiers</code> and it supports id or key as a field). #589</li> </ul> </li> <li> <p>\ud83d\udc1e Bug Fixes (1)</p> <ul> <li>Commons - Fixed a bug in the duration calculation of decorated retry sphere client <code>RetrySphereClientDecorator</code> created by <code>ClientConfigurationUtils</code>. #610</li> </ul> </li> <li> <p>\ud83c\udf89 New Features (4)</p> <ul> <li>ShoppingList Sync - Added support for syncing shopping lists between ctp projects. #594</li> <li>ShoppingList Sync - Introduced <code>ShoppingListSyncUtils</code> which calculates all needed update actions after comparing a <code>ShoppingList</code> and a <code>ShoppingListDraft</code>. #594</li> <li>ShoppingList Sync - Introduced <code>ShoppingListUpdateActionUtils</code> which contains utils for calculating necessary update actions after comparing individual fields of a <code>ShoppingList</code> and a <code>ShoppingListDraft</code>. #594</li> <li>ShoppingList Sync - Introduced <code>ShoppingListReferenceResolutionUtils</code> which resolves Type references from a ShoppingList to a ShoppingListDraft. #594</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (1)</p> <ul> <li><code>commercetools-jvm-sdk</code> <code>1.53.0</code> -&gt; <code>1.54.0</code></li> <li><code>mockito-junit-jupiter</code> <code>3.5.13</code> -&gt;  <code>3.6.0</code> </li> <li><code>org.assertj.assertj-core</code> <code>3.17.2</code> -&gt;  <code>3.18.1</code></li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#230-oct-15-2020","title":"2.3.0 - Oct 15, 2020","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83c\udf89 New Features (4)<ul> <li>Customer Sync - Added support for syncing customers between ctp projects. #579</li> <li>Customer Sync - Introduced <code>CustomerSyncUtils</code> which calculates all needed update actions after comparing a <code>Customer</code> and a <code>CustomerDraft</code>. #579</li> <li>Customer Sync - Introduced <code>CustomerUpdateActionUtils</code> which contains utils for calculating needed update actions after comparing individual fields of a <code>Customer</code> and a <code>CustomerDraft</code>. #579</li> <li>Customer Sync - Introduced <code>CustomerReferenceResolutionUtils</code> which resolves CustomerGroup and Type references from a Customer to a CustomerDraft. #579</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#221-sep-29-2020","title":"2.2.1 - Sep 29, 2020","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udc1e Bug Fixes (1)<ul> <li>Product Sync - Fixed a bug in the <code>ProductSync</code> related handling of unresolved product references provided in  different batches. #580</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#220-sep-25-2020","title":"2.2.0 - Sep 25, 2020","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (2)</p> <ul> <li>Product Sync - Added support for resolving <code>key-value-document</code> (custom object) references on attributes of type <code>Reference</code>, <code>Set</code> of <code>Reference</code>, <code>NestedType</code> or <code>Set</code> of <code>NestedType</code>. #564 </li> <li>Introduced new concept for the validation of <code>the drafts in batches</code> for each <code>Sync</code> instance, exposed with  <code>BaseBatchValidator</code> implementations (i.e. ProductBatchValidator, CategoryBatchValidator). #233</li> </ul> </li> <li> <p>\u2728 Enhancements (2)    </p> <ul> <li>Category Sync - Passed category keys in batch to <code>cacheKeysToIds</code> method of <code>CategoryService</code> to avoid fetching all categories for every batch.  #235</li> <li>Populated <code>keyToId</code> caches in services before reference resolution to improve the performance of the library  with collecting referenced keys in batches of drafts. #235</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (1)</p> <ul> <li><code>mockito-junit-jupiter</code> <code>3.5.11</code> -&gt;  <code>3.5.13</code> </li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#210-sep-21-2020","title":"2.1.0 - Sep 21, 2020","text":"<p>Commits | Javadoc | Jar - \ud83c\udf89 New Features (2)     - CustomObject Sync - Added support for syncing custom objects between ctp projects. #565 For more info how to use it please refer to CustomObject usage doc.     - CustomObject Sync - Exposed <code>CustomObjectSyncUtils#hasIdenticalValue</code> which determines whether update process is required after comparing a <code>CustomObject</code> and a <code>CustomObjectDraft</code>. #565</p> <ul> <li>\ud83d\udee0\ufe0f Dependency Updates (3)<ul> <li><code>org.ajoberstar.git-publish</code> <code>2.1.3</code> -&gt; <code>3.0.0</code> </li> <li><code>org.ajoberstar.grgit</code> <code>4.0.2</code> -&gt; <code>4.1.0</code></li> <li><code>mockito-junit-jupiter</code> <code>3.5.10</code> -&gt;  <code>3.5.11</code> </li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#200-sept-14-2020","title":"2.0.0 - Sept 14, 2020","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83d\udea7 Breaking Changes (2)</p> <ul> <li>Sync options:<ul> <li>The signatures of the <code>errorCallback</code> and <code>warningCallback</code> changed and their parameter lists are extended.     From now on the resource draft of the source project, the resource of the target project and optionally the failed update actions     passed to the callbacks. Refer sync options for more details. #107</li> </ul> </li> <li>Reference resolution utilities:<ul> <li>Commons - Renamed <code>replaceCustomTypeIdWithKeys</code> to <code>mapToCustomFieldsDraft</code>. #138</li> <li>Commons - Renamed <code>replaceAssetsReferencesIdsWithKeys</code> to <code>mapToAssetDrafts</code>. #138</li> <li>Category Sync - Renamed <code>replaceCategoriesReferenceIdsWithKeys</code> to <code>mapToCategoryDrafts</code>. #138</li> <li>CartDiscount Sync - Renamed <code>replaceCartDiscountsReferenceIdsWithKeys</code> to <code>mapToCartDiscountDrafts</code>. #138</li> <li>Inventory Sync - Renamed <code>replaceInventoriesReferenceIdsWithKeys</code> to <code>mapToInventoryEntryDrafts</code>. #138 </li> <li>Product Sync - Renamed <code>replaceProductsReferenceIdsWithKeys</code> to <code>mapToProductDrafts</code>. #138</li> <li>State Sync - Renamed <code>replaceStateReferenceIdsWithKeys</code> to <code>mapToStateDrafts</code>. #138</li> <li>ProductType Sync - Renamed <code>replaceProductTypesReferenceIdsWithKeys</code> to <code>mapToProductTypeDrafts</code>. #138</li> </ul> </li> </ul> </li> <li> <p>\u2728 Enhancements (1)        </p> <ul> <li>The library will fail fast for the non-existing references that found during the reference resolution. #219</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (4)</p> <ul> <li><code>commercetools-jvm-sdk</code> <code>1.52.0</code> -&gt; <code>1.53.0</code></li> <li><code>org.assertj.assertj-core</code> <code>3.16.0</code> -&gt;  <code>3.17.2</code></li> <li><code>junit.jupiterApiVersion</code> <code>5.6.2</code> -&gt;  <code>5.7.0</code></li> <li><code>mockito-junit-jupiter</code> <code>3.4.4</code> -&gt; <code>3.5.10</code></li> <li><code>com.github.ben-manes.versions</code> <code>0.29.0</code> -&gt; <code>0.33.0</code> </li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#191-aug-5-2020","title":"1.9.1 -  Aug 5, 2020","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udc1e Bug Fixes (1)<ul> <li>Product Sync - Fixed a bug in the <code>ProductSync</code> related to publish/unpublish of the product update actions, when a new product draft has publish flag set to true and the existing product is published already then no publish action will be created  which was not correct #530</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#190-july-27-2020","title":"1.9.0 -  July 27, 2020","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (6)</p> <ul> <li>TaxCategory Sync - Added support for syncing tax categories. #417 For more info how to use it please refer to TaxCategory usage doc.</li> <li>TaxCategory Sync - Exposed <code>TaxCategorySyncUtils#buildActions</code> which calculates all needed update actions after comparing a <code>TaxCategory</code> and a <code>TaxCategoryDraft</code>. #417</li> <li>TaxCategory Sync - Exposed <code>TaxCategoryUpdateActionUtils</code> which contains utils for calculating needed update actions after comparing individual fields of a <code>TaxCategory</code> and a <code>TaxCategoryDraft</code>. #417</li> <li>State Sync - Added support for syncing states. #409 For more info how to use it please refer to States usage doc.</li> <li>State Sync - Exposed <code>StateSyncUtils#buildActions</code> which calculates all needed update actions after comparing a <code>State</code> and a <code>StateDraft</code>. #409</li> <li>State Sync - Exposed <code>StateUpdateActionUtils</code> which contains utils for calculating needed update actions after comparing individual fields of a <code>State</code> and a <code>StateDraft</code>. #409    Thanks, @jarzynp for the contributions!</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (6)</p> <ul> <li><code>com.adarshr.test-logger</code> <code>2.0.0</code> -&gt; <code>2.1.0</code></li> <li><code>org.assertj.assertj-core</code> <code>3.15.0</code> -&gt;  <code>3.16.0</code></li> <li><code>junit.jupiterApiVersion</code> <code>5.6.1</code> -&gt;  <code>5.6.2</code></li> <li><code>commercetools-jvm-sdk</code> <code>1.51.0</code> -&gt; <code>1.52.0</code></li> <li><code>mockito-junit-jupiter</code> <code>3.3.3</code> -&gt; <code>3.4.4</code></li> <li><code>com.github.ben-manes.versions</code> <code>0.28.0</code> -&gt; <code>0.29.0</code> </li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#182-april-30-2020","title":"1.8.2 -  April 30, 2020","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udc1e Bug Fixes (2)<ul> <li>Commons - Fixed a bug in the Sync implementations causing the sync fail with throwing <code>ClassCastException</code>. #466</li> <li>Product Sync - Fixed a bug in the <code>ProductSync</code> related to the ordering of variant update actions, which was not correct when there is <code>SetAttributeInAllVariants</code> action in update actions. Thanks, @ahmed-ali225, for the contributions! #513</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#181-april-22-2020","title":"1.8.1 -  April 22, 2020","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\u2728 Enhancements (1)</p> <ul> <li>Commons - Remove final keyword on interface/abstract method params. #165</li> </ul> </li> <li> <p>\ud83d\udc1e Bug Fixes (3)</p> <ul> <li>CartDiscount Sync - Fixed a bug in the <code>CartDiscountSync</code> which generates a <code>changeValue</code> action when there is no change, causing the sync to fail for that cart discount. Thanks, @michaelbannister, for the contributions! #494</li> <li>Product Sync - Fixed a bug in the <code>ProductSync</code> when <code>ensurePriceChannels</code> is enabled in ProductSyncOptions should not create a missing channel used on product variant price draft.     #499</li> <li>Product/Category Sync - Validate that asset keys are always defined on the supplied drafts and the existing target resources (products/categories).     #366</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (5)</p> <ul> <li><code>junit.jupiterApiVersion</code> <code>5.5.2</code> -&gt;  <code>5.6.1</code></li> <li><code>commercetools-jvm-sdk</code> <code>1.48.0</code> -&gt; <code>1.51.0</code></li> <li><code>org.assertj.assertj-core</code> <code>3.14.0</code> -&gt;  <code>3.15.0</code></li> <li><code>mockito-junit-jupiter</code> <code>3.2.4</code> -&gt; <code>3.3.3</code></li> <li><code>com.github.ben-manes.versions</code> <code>0.27.0</code> -&gt; <code>0.28.0</code> </li> <li><code>ru.vyarus.mkdocs</code> <code>2.0.0</code> -&gt; <code>2.0.1</code> </li> <li><code>org.ajoberstar.grgit</code> <code>4.0.1</code> -&gt; <code>4.0.2</code> </li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#180-jan-17-2020","title":"1.8.0 -  Jan 17, 2020","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\u2728 Enhancements (1)<ul> <li>Inventory Sync - Only cache the needed keys of <code>Channel</code> references instead of  caching all keys of such resources. #198 Note: This might have performance implications on the inventory sync, since now every non cached key-id entry will be individually fetched.      However, issue #235 should address this.</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#170-jan-7-2020","title":"1.7.0 -  Jan 7, 2020","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\u2728 Enhancements (2)</p> <ul> <li> <p>Product Sync - Only cache the needed keys of <code>Category</code>, <code>ProductType</code> and <code>Type</code> references instead of  caching all keys of such resources. #418 Note: This might have performance implications on the product sync, since now every non cached key-id entry will be individually fetched.      However, issue #235 should address this.</p> </li> <li> <p>Commons - Refactor duplicate implementations in concrete services and generalise it in the <code>BaseService</code>.  Thanks, @jarzynp, for the contributions! #418</p> </li> </ul> </li> <li> <p>\ud83d\udc1e Bug Fixes (1)</p> <ul> <li>Product Sync - Fixed a bug in the Product Sync where keys with special characters failed to be saved  for <code>CustomObject</code>s, as the characters weren't allowed on the commmercetools platform.  #474 Note: \ud83d\udea7 This is a breaking change. Previously stored custom objects representing product drafts with unresolved references, won't be  synced with this version, since the key is now treated differently. Make sure to sync such drafts again with this version of the library.</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (5)</p> <ul> <li><code>org.ajoberstar.grgit</code> <code>3.1.1</code> -&gt;  <code>4.0.1</code></li> <li><code>org.ajoberstar.git-publish</code> <code>2.1.1</code> -&gt;  <code>2.1.3</code></li> <li><code>mockito-junit-jupiter</code> <code>3.1.0</code> -&gt; <code>3.2.4</code></li> <li><code>commercetools-jvm-sdk</code> <code>1.47.0</code> -&gt; <code>1.48.0</code></li> <li><code>org.assertj.assertj-core</code> <code>3.13.2</code> -&gt;  <code>3.14.0</code></li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#161-oct-17-2019","title":"1.6.1 -  Oct 17, 2019","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83d\udc1e Bug Fixes (3)</p> <ul> <li>Commons - Fixed a bug in the <code>CtpQueryUtils</code> which was overwriting the query input query for every page after the first page is fetched, eventually fetching more than needed. #463</li> <li>Product Sync - Fixed a potential bug in reference resolution of attribute references in case a <code>null</code> reference is passed in an attribute draft of type <code>Set</code> of <code>Reference</code>. #441 </li> <li>ProductType Sync - Fixed a bug in the productType sync where the statistics <code>failed</code> counter was being counted on failed fetches of missing references. #426</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (4)</p> <ul> <li><code>mockito-junit-jupiter</code> <code>3.0.0</code> -&gt; <code>3.1.0</code></li> <li><code>com.adarshr.test-logger</code> <code>1.7.1</code> -&gt; <code>2.0.0</code></li> <li><code>com.github.ben-manes.versions</code> <code>0.25.0</code> -&gt; <code>0.27.0</code> </li> <li><code>commercetools-jvm-sdk</code> <code>1.46.0</code> -&gt; <code>1.47.0</code></li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#160-oct-10-2019","title":"1.6.0 -  Oct 10, 2019","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (1)</p> <ul> <li>Product Sync - Introduced support for syncing products with other product references as attributes in any order. #447</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (1)</p> <ul> <li><code>com.adarshr.test-logger</code> 1.7.0 -&gt; 1.7.1 #456</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#150-sept-13-2019","title":"1.5.0 -  Sept 13, 2019","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (4)</p> <ul> <li>Product Sync - Added support for resolving <code>Product</code> references on attributes of type <code>Reference</code>, <code>Set</code> of <code>Reference</code>, <code>NestedType</code> or <code>Set</code> of <code>NestedType</code>. #438</li> <li>Product Sync - Added support for resolving <code>Category</code> references on attributes of type <code>Reference</code>, <code>Set</code> of <code>Reference</code>, <code>NestedType</code> or <code>Set</code> of <code>NestedType</code>. #440</li> <li>Product Sync - Added support for resolving <code>ProductType</code> references on attributes of type <code>Reference</code>, <code>Set</code> of <code>Reference</code>, <code>NestedType</code> or <code>Set</code> of <code>NestedType</code>. #440</li> <li>Commons - Exposed <code>ResourceIdentifierUtils#isReferenceOfType</code> utility which checks if a JSON representation of a CTP <code>Reference</code> object is of a certain <code>typeId</code> or not. #443</li> </ul> </li> <li> <p>\ud83d\udea7 Breaking Changes (1)</p> <ul> <li>Product Sync - Unexposed the methods <code>VariantReferenceResolver#resolveAttributeReferences</code> and <code>VariantReferenceResolver#resolveAttributeReference</code> to be <code>private</code> as they are only meant for internal use of the library. #440</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Dependency Updates (5)</p> <ul> <li>Gradle 5.6.1 -&gt; 5.6.2</li> <li><code>org.junit.jupiter:junit-jupiter-api</code> 5.5.1 -&gt; 5.5.2</li> <li><code>org.junit.jupiter:junit-jupiter-engine</code> 5.5.1 -&gt; 5.5.2</li> <li><code>org.junit.jupiter:junit-jupiter-params</code> 5.5.1 -&gt; 5.5.2</li> <li><code>com.github.ben-manes.versions</code> 0.22.0 -&gt; 0.25.0</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#141-sept-2-2019","title":"1.4.1 -  Sept 2, 2019","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83d\udc1e Bug Fixes (1)</p> <ul> <li>Commons - Fixed a bug in the custom fields update actions builders which generated duplicated unnecessary update actions for <code>null</code> custom field values. This affected any sync module where the resource contained custom fields (i.e. Product Sync, Category Sync, CartDiscount Sync and Inventory Sync). It also affected any update actions building utility in which the resource/sub-resource contained custom fields.  #428</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Enhancements (1)</p> <ul> <li>Commons - Bumped commercetools-jvm-sdk to version 1.46.0 which includes a fix for a serialization bug in the <code>SetCustomField</code> action which was ignoring empty array values. #430</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#140-aug-8-2019","title":"1.4.0 -  Aug 8, 2019","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (5)</p> <ul> <li>ProductType Sync - Introduced support for syncing product types with NestedType (or set of NestedType) attributes in any order. #372</li> <li>ProductType Sync - Introduced the new <code>ProductTypeReferenceReplacementUtils#replaceProductTypesReferenceIdsWithKeys</code> which is a util that replaces the reference ids with keys in a list of productTypes. #372</li> <li>ProductType Sync - Introduced the new <code>ProductTypeReferenceReplacementUtils#buildProductTypeQuery</code> utils to create a product type query with all needed reference expansions to fetch productTypes from a source CTP project for the sync. #372</li> <li>ProductType Sync - Introduced the new <code>ProductTypeReferenceResolver</code> which resolves productType references on ProductTypeDrafts. #372</li> <li>ProductType Sync - Introduced the new methods <code>ProductTypeSyncStatistics#getNumberOfProductTypesWithMissingNestedProductTypes</code> and <code>ProductTypeSyncStatistics#getProductTypeKeysWithMissingParents</code> which represents the nested product types which are still not resolved. #372</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Enhancements (8)</p> <ul> <li>Commons - Bumped commercetools-jvm-sdk to version 1.45.0.</li> <li>Commons - Bumped gradle to version gradle-5.5.1</li> <li>Commons - Bumped <code>org.junit.jupiter:junit-jupiter-api</code> to 5.5.1.</li> <li>Commons - Bumped <code>org.junit.jupiter:junit-jupiter-engine</code> to 5.5.1.</li> <li>Commons - Bumped <code>org.junit.jupiter:junit-jupiter-params</code> to 5.5.1.</li> <li>Commons - Bumped <code>mockito-junit-jupiter</code> dependency to 3.0.0.</li> <li>Commons - Bumped <code>assertj</code> to 3.13.2.</li> <li>Commons - Bumped <code>com.github.ben-manes.versions</code> to 0.22.0.</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#130-jul-3-2019","title":"1.3.0 -  Jul 3, 2019","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (6)</p> <ul> <li>CartDiscount Sync - Added support for syncing cart discounts. #379 For more info how to use it please refer to CartDiscount usage doc.</li> <li>CartDiscount Sync - Introduced the new <code>CartDiscountSyncUtils#buildActions</code> which calculates all needed update actions after comparing a <code>CartDiscount</code> and a <code>CartDiscountDraft</code>. #379</li> <li>CartDiscount Sync - Introduced the new <code>CartDiscountUpdateActionUtils</code> which contains utils for calculating needed update actions after comparing individual fields of a <code>CartDiscount</code> and a <code>CartDiscountDraft</code>. #379</li> <li>CartDiscount Sync - Introduced the new <code>CartDiscountReferenceResolver</code> which resolves custom type references on CartDiscountDrafts. #379</li> <li>CartDiscount Sync - Introduced the new <code>CartDiscountReferenceReplacementUtils#replaceCartDiscountsReferenceIdsWithKeys</code> which is a util that replaces the custom type ids with keys in a list of cartDiscounts. #379</li> <li>CartDiscount Sync - Introduced the new <code>CartDiscountReferenceReplacementUtils#buildCartDiscountQuery</code> util to create a cart discount query with all needed reference expansions to fetch cart discounts from a source CTP project for the sync. #379.</li> </ul> </li> <li> <p>\ud83d\udc1e Bug Fixes (1)</p> <ul> <li>Commons -  Fixed a bug in the <code>BaseSyncStatistics</code> which caused a wrong calculation of the <code>latestBatchProcessingTimeInMinutes</code>. #378</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Enhancements (6)</p> <ul> <li>CartDiscount Sync - Added benchmarks for the <code>cartDiscount</code> sync to be able to compare the performance of the sync with the future releases. #379</li> <li>Commons - Bumped commercetools-jvm-sdk to version 1.44.0.</li> <li>Commons - Bumped gradle to version gradle-5.5</li> <li>Commons - Bumped <code>org.junit.jupiter:junit-jupiter-api</code> to 5.5.0.</li> <li>Commons - Bumped <code>org.junit.jupiter:junit-jupiter-engine</code> to 5.5.0.</li> <li>Commons - Bumped <code>org.junit.jupiter:junit-jupiter-params</code> to 5.5.0.</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#120-jun-14-2019","title":"1.2.0 -  Jun 14, 2019","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83d\udea7 Breaking Changes (2)</p> <ul> <li>ProductType Sync - Removed the unneeded <code>AttributeDefinitionCustomBuilder</code> which was an exposed but internal helper. #377. </li> <li>Commons - <code>SyncUtils#replaceReferenceIdWithKey</code> is now renamed to <code>SyncUtils#getReferenceWithKeyReplaced</code>. #394</li> </ul> </li> <li> <p>\ud83c\udf89 New Features (2)</p> <ul> <li>Commons - Added the new <code>CommonTypeUpdateActionUtils#buildUpdateActionForReferences</code> which is used for comapring references/resourceIdentifiers and buiding an update action if needed. #394</li> <li>Commons - Added the new <code>SyncUtils#getResourceIdentifierWithKeyReplaced</code> util. #394</li> </ul> </li> <li> <p>\ud83d\udc1e Bug Fixes (1)</p> <ul> <li>Commons - Fixed a bug where references and resource identifiers were not being compared correctly. #394</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Enhancements (13)</p> <ul> <li>Commons - Bumped commercetools-jvm-sdk to version 1.43.0.</li> <li>Commons - Bumped <code>mockito</code> to 2.27.0.</li> <li>Commons - Bumped <code>assertj</code> to 3.12.2.</li> <li>Commons - Bumped <code>org.junit.jupiter:junit-jupiter-api</code> to 5.4.2.</li> <li>Commons - Bumped <code>org.junit.jupiter:junit-jupiter-engine</code> to 5.4.2.</li> <li>Commons - Bumped <code>org.junit.jupiter:junit-jupiter-params</code> to 5.4.2.</li> <li>Commons - Bumped <code>org.ajoberstar.git-publish</code> to 2.1.1.</li> <li>Commons - Bumped <code>org.ajoberstar.grgit</code> to 3.1.1.</li> <li>Commons - Bumped <code>com.github.ben-manes.versions</code> to 0.21.0.</li> <li>Commons - Bumped gradle checkstyle plugin to 8.2.</li> <li>Commons - Bumped mockito dependency to 2.28.2.</li> <li>Commons - Bumped JaCoCo dependency to 0.8.4.</li> <li>Commons - Bumped gradle to version gradle-5.4.1</li> <li>Commons - Bumped <code>com.adarshr.test-logger</code> to 1.7.0.</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#111-jan-16-2019","title":"1.1.1 -  Jan 16, 2019","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udc1e Bug Fixes (1)<ul> <li>Product Sync - Fixed a bug in the <code>product</code> sync which would fail on syncing attributes of type <code>Set</code> that has an empty set as a value. </li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#110-dec-19-2018","title":"1.1.0 -  Dec 19, 2018","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (4)</p> <ul> <li>Product Sync - Added support for syncing assets of newly added variants. #357.</li> <li>Product Sync - <code>ProductSyncUtils#buildActions</code> and <code>ProductUpdateActionUtils#buildVariantsUpdateActions</code> now build <code>AddAsset</code> actions for every new asset on every new variant on the new <code>ProductDraft</code>. #357.</li> <li>ProductType Sync - Added support for syncing changes to an <code>AttributeDefinition</code> with a <code>SetType</code> of a subtype <code>LocalizableEnumType</code> or <code>EnumType</code> #313</li> <li>Type Sync - Added support for syncing changes to a <code>FieldDefinition</code> with a <code>SetType</code> of a subtype <code>LocalizableEnumType</code> or <code>EnumType</code> #313</li> </ul> </li> <li> <p>\ud83d\udc1e Bug Fixes (3)</p> <ul> <li>ProductType Sync - Fixed a bug in the <code>productType</code> sync which would try to unset <code>isSearchable</code>, <code>inputHint</code>  and <code>attributeConstraint</code> values to <code>null</code> instead of their default values. #354</li> <li>ProductType Sync - <code>ProductTypeSyncUtils#buildActions</code>, <code>ProductTypeUpdateActionUtils#buildAttributesUpdateActions</code> now treat the values of the optional fields <code>isSearchable</code>, <code>inputHint</code> and <code>attributeConstraint</code>  as (<code>true</code>, <code>SingleLine</code> and <code>None</code> respectivley) if they are <code>null</code> or not passed. #354</li> <li>Commons - Fixed a bug in the <code>beforeUpdateCallback</code> which caused the callback to be called even on an empty list of update actions. #359</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Enhancements (1)</p> <ul> <li>Commons - Benchmarks are now run once on every merge to <code>master</code> with a lower number of resources for faster benchmarking. #246</li> </ul> </li> <li> <p>\ud83d\udccb Documentation (2)</p> <ul> <li>Commons - Added link to documentation pages in README of the github repo.</li> <li>Commons - Fixed link of <code>beforeUpdateCallback</code> for keeping other variants example in the Sync Options doc page. #360</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#100-dec-10-2018","title":"1.0.0 -  Dec 10, 2018","text":"<p>Commits | Javadoc | Jar</p>"},{"location":"RELEASE_NOTES/#the-beta-is-over","title":"The Beta is Over \ud83c\udf89","text":"<p>We're happy to announce that the commercetools-sync-java is finally out of beta! Big thanks to all the users  who were using it when it was still in beta. Your feedback was definitely valuable for us to reach the current state of  the library. <code>1.0.0</code> is here for you to use with all new features, enhancements and bug fixes including:</p> <ul> <li>The library now supports importing/syncing <code>types</code> into a CTP project from an external feed or another CTP project. Read more.</li> <li>The library now handles concurrency modification exceptions for the <code>productType</code> sync.</li> <li>All new documentation pages including a quick start guide.</li> <li>Many more improvements and bug fixes. </li> </ul>"},{"location":"RELEASE_NOTES/#full-release-notes","title":"Full Release Notes","text":"<ul> <li> <p>\ud83c\udf89 New Features (4)</p> <ul> <li>Type Sync - Added support for syncing types. #300 For more info how to use it please refer to Type usage doc.</li> <li>Type Sync - Exposed <code>TypeSyncUtils#buildActions</code> which calculates all needed update actions after comparing a <code>Type</code> and a <code>TypeDraft</code>. #300</li> <li>Type Sync - Exposed <code>TypeUpdateActionUtils</code> which contains utils for calculating needed update actions after comparing individual fields of a <code>Type</code> and a <code>TypeDraft</code>. #300</li> <li>Commons - Added <code>OptionalUtils#filterEmptyOptionals</code> which are utility methods that filter out the empty optionals in a supplied list (with a varargs variation) returning a list of the contents of the non-empty  optionals. #255</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Enhancements (17)</p> <ul> <li>ProductType Sync - Added concurrency modification exception handling. #325</li> <li>Commons - <code>ProductSyncUtils#buildActions</code>, <code>CategorySyncUtils#buildActions</code>, <code>InventorySyncUtils#buildActions</code> and <code>ProductTypeSyncUtils#buildActions</code> now don't apply the <code>beforeUpdateCallback</code> implicitly.  If you want, you can apply it explicitly on the result of the <code>..#buildActions</code> method. #302</li> <li>Product Sync - Reference keys are not validated if they are in UUID format anymore. #166</li> <li>Category Sync - Reference keys are not validated if they are in UUID format anymore. #166</li> <li>Inventory Sync - Reference keys are not validated if they are in UUID format anymore. #166</li> <li>ProductType Sync - Added benchmarks for the <code>productType</code> sync to be able to compare the performance of the sync with the future releases. #301</li> <li>Commons - Bumped commercetools-jvm-sdk to version 1.37.0.</li> <li>Commons - Bumped <code>mockito</code> to 2.23.4.</li> <li>Commons - Bumped <code>com.adarshr.test-logger</code> to 1.6.0.</li> <li>Commons - Bumped <code>org.junit.jupiter:junit-jupiter-api</code> to 5.3.2.</li> <li>Commons - Bumped <code>org.junit.jupiter:junit-jupiter-engine</code> to 5.3.2.</li> <li>Commons - Bumped <code>org.junit.jupiter:junit-jupiter-params</code> to 5.3.2.</li> <li>Commons - Bumped <code>org.ajoberstar.git-publish</code> to 2.0.0.</li> <li>Commons - Bumped <code>org.ajoberstar.grgit</code> to 3.0.0.</li> <li>Commons - Bumped gradle to version gradle-5.0</li> <li>Type Sync - Added benchmarks for the <code>type</code> sync to be able to compare the performance of the sync with the future releases. #300</li> </ul> </li> <li> <p>\ud83d\udea7 Breaking Changes (9) </p> <ul> <li>Product Sync - <code>allowUuid</code> option is now removed. #166 </li> <li>Category Sync - <code>allowUuid</code> option is now removed. #166 </li> <li>Inventory Sync - <code>allowUuid</code> option is now removed. #166 </li> <li>ProductType Sync - <code>allowUuid</code> option is now removed. #166 </li> <li>ProductType Sync - Renamed <code>ProductTypeUpdateAttributeDefinitionActionUtils</code> to <code>AttributeDefinitionsUpdateActionUtils</code>. It is also now meant to be only used internally by the library.  Its  behaviour is not guaranteed if used externally. #302</li> <li>ProductType Sync - <code>AttributeDefinitionUpdateActionUtils</code> is now meant to be only used internally by the library.  Its  behaviour is not guaranteed if used externally. #302</li> <li>ProductType Sync - <code>EnumsUpdateActionUtils</code> is now <code>EnumValuesUpdateActionUtils</code> and is meant to be only used internally by the library.  Its  behaviour is not guaranteed if used externally. #300</li> <li>ProductType Sync - Utils that were in <code>ProductTypeUpdateLocalizedEnumActionUtils</code> and <code>LocalizedEnumsUpdateActionUtils.</code> are moved to <code>LocalizedEnumValueUpdateActionUtils</code>. #300</li> <li>ProductType Sync - Utils that were in <code>ProductTypeUpdatePlainEnumActionUtils</code> and <code>PlainEnumUpdateActionsUtils.</code> are moved to <code>PlainEnumValueUpdateActionUtils</code>. #300</li> </ul> </li> <li> <p>\ud83d\udc1e Bug Fixes (3)</p> <ul> <li>Product Sync - Fixed a bug that caused the statistics not to be updated correctly on fetch failure. #331</li> <li>Category Sync - Fixed a bug that caused the statistics not to be updated correctly on fetch failure. #331</li> <li>ProductType Sync - Fixed a bug that caused the sync process to continue after failed fetch. #331</li> </ul> </li> <li> <p>\ud83d\udccb Documentation (4)</p> <ul> <li>Commons - Added the documentation github pages. https://commercetools.github.io/commercetools-sync-java </li> <li>Commons - Added a Quick Start Guide for a convenient entry into the library.</li> <li>Commons - Moved documentation of sync options to a separate doc.</li> <li>Commons - Added a the earliest compatible version of the commercetools-jvm-sdk](https://github.com/commercetools/commercetools-jvm-sdk) as a prerequisite for using the library.</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#v100-m14-oct-5-2018","title":"v1.0.0-M14 -  Oct 5, 2018","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83d\udc1e Bug Fixes (1)</p> <ul> <li>Product Sync - Fixed a bug where the removed attributes in the source product variant draft were not being removed from the target variant. #238</li> </ul> </li> <li> <p>\ud83d\udee0 Enhancements (8)</p> <ul> <li>Product Sync - Products create and update requests are now issued in parallel. This should lead to a performance improvement. #238</li> <li>Commons - Bumped <code>com.adarshr.test-logger</code> to 1.5.0.</li> <li>Commons - Bumped <code>mockito</code> to 2.22.0.</li> <li>Commons - Bumped <code>org.junit.jupiter:junit-jupiter-api</code> to 5.3.1.</li> <li>Commons - Bumped <code>org.junit.jupiter:junit-jupiter-engine</code> to 5.3.1.</li> <li>Commons - Bumped <code>org.junit.jupiter:junit-jupiter-params</code> to 5.3.1.</li> <li>Commons - <code>UnorderedCollectionSyncUtils#buildRemoveUpdateActions ensures no</code>null<code>elements in the resulting list and ignores</code>null` keys now. #238</li> <li>Commons - Bumped gradle to version gradle-4.10.2.</li> </ul> </li> <li> <p>\ud83d\udea7 Breaking Changes (2)</p> <ul> <li>Product Sync - <code>AttributeMetaData#isRequired</code> is now removed. #308</li> <li>Product Sync - <code>ProductVariantAttributeUpdateActionUtils#buildProductVariantAttributeUpdateAction</code> now takes a map of all meta data instead of the specific metadata entry. #308</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#v100-m13-sept-5-2018","title":"v1.0.0-M13 -  Sept 5, 2018","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (15)</p> <ul> <li>ProductType Sync - Support for syncing productTypes. #286 For more info how to use it please refer to ProductType usage doc. </li> <li>Product Sync - Support for syncing product prices. #101</li> <li>Product Sync - <code>ProductSyncUtils#buildActions</code> now also calculates variants' all price update actions needed. #101</li> <li>Product Sync - <code>ProductUpdateActionUtils#buildVariantsUpdateActions</code> now also calculates variants' all price update actions needed. #101</li> <li>Product Sync - Introduced new update action build utility for building all needed update actions between two variants' prices <code>ProductVariantUpdateActionUtils#buildProductVariantPricesUpdateActions</code>. #101</li> <li>ProductSync - <code>PriceReferenceResolver</code> now resolves prices' CustomerGroup references on prices. #101</li> <li>InventoryEntry Sync - <code>InventoryReferenceReplacementUtils#replaceInventoriesReferenceIdsWithKeys</code> now supports replacing channel reference ids with keys. #101</li> <li>ProductType Sync - Exposed <code>ProductTypeSyncUtils#buildActions</code> which calculates all needed update actions after comparing a <code>ProductType</code> and a <code>ProductTypeDraft</code>. #286</li> <li>ProductType Sync - Exposed <code>ProductTypeUpdateActionUtils</code> which contains utils for calculating needed update actions after comparing individual fields of a <code>ProductType</code> and a <code>ProductTypeDraft</code>. #286</li> <li>ProductType Sync - Exposed <code>ProductTypeUpdateAttributeDefinitionActionUtils</code> which contains utils for calculating needed update actions after comparing a list of <code>AttributeDefinition</code>s and a list of <code>AttributeDefinitionDraft</code>s. #286</li> <li>ProductType Sync - Exposed <code>ProductTypeUpdateLocalizedEnumActionUtils</code> which contains utils for calculating needed update actions after comparing two lists of <code>LocalizedEnumValue</code>s. #286</li> <li>ProductType Sync - Exposed <code>ProductTypeUpdatePlainEnumActionUtils</code> which contains utils for calculating needed update actions after comparing two lists of <code>EnumValue</code>s. #286</li> <li>ProductType Sync - Exposed <code>AttributeDefinitionUpdateActionUtils</code> which contains utils for calculating needed update actions after comparing an <code>AttributeDefinition</code> and an <code>AttributeDefinitionDraft</code>. #286</li> <li>ProductType Sync - Exposed <code>LocalizedEnumUpdateActionsUtils</code> which contains utils for calculating needed update actions after comparing two <code>LocalizedEnumValue</code>s. #286</li> <li>ProductType Sync - Exposed <code>PlainEnumUpdateActionsUtils</code> which contains utils for calculating needed update actions after comparing two <code>EnumValue</code>s. #286</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Enhancements (7)</p> <ul> <li>Commons - Bumped gradle to version gradle-4.10.</li> <li>Commons - Bumped <code>com.jfrog.bintray</code> to 1.8.4.</li> <li>Commons - Bumped <code>assertj</code> to 3.11.1.</li> <li>Commons - Bumped <code>mockito</code> to 2.21.0.</li> <li>Commons - Bumped <code>org.ajoberstar.grgit</code> to 2.3.0.</li> <li>Commons - Bumped <code>com.adarshr.test-logger</code> to 1.4.0.</li> <li>Commons - Switched to Junit5 using both <code>junit-jupiter-engine</code> and <code>junit-vintage-engine</code> for backward compatibility.</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Breaking Changes (3)</p> <ul> <li>Product Sync - Removed redundant <code>ProductUpdateActionUtils#buildRemoveVariantUpdateActions</code>. #3</li> <li>Commons - Moved <code>SyncUtils#replaceCustomTypeIdWithKeys</code> to <code>CustomTypeReferenceReplacementUtils#replaceCustomTypeIdWithKeys</code>. #101.</li> <li>Commons - Moved <code>SyncUtils#replaceAssetsReferencesIdsWithKeys</code> to <code>AssetReferenceReplacementUtils#replaceAssetsReferencesIdsWithKeys</code>. #101.</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#v100-m12-jun-05-2018","title":"v1.0.0-M12 -  Jun 05, 2018","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udee0\ufe0f Enhancements (13)<ul> <li>Product Sync - Support for syncing price custom fields. #277</li> <li>Product Sync - <code>VariantReferenceResolver</code> now resolves prices' custom type references on all variants. #277</li> <li>Product Sync - <code>ProductReferenceReplacementUtils#buildProductQuery</code> now expands custom types on prices. #277</li> <li>Product Sync - <code>VariantReferenceReplacementUtils#replacePricesReferencesIdsWithKeys</code> now supports replacing price custom reference ids with keys. #277</li> <li>Commons - Bumped commercetools-jvm-sdk to version 1.32.0.</li> <li>Commons - Bumped gradle to version gradle-4.8.</li> <li>Commons - Bumped <code>com.jfrog.bintray</code> to 1.8.0.</li> <li>Commons - Bumped <code>org.ajoberstar.git-publish</code> to 1.0.0.</li> <li>Commons - Bumped <code>com.adarshr.test-logger</code> to 1.2.0.</li> <li>Commons - Bumped <code>org.ajoberstar.grgit</code> to 2.2.1.</li> <li>Commons - Bumped gradle checkstyle plugin to 8.10.1.</li> <li>Commons - Bumped mockito dependency to 2.18.3.</li> <li>Commons - Bumped JaCoCo dependency to 0.8.1.</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#v100-m11-mar-08-2018","title":"v1.0.0-M11 -  Mar 08, 2018","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (19)</p> <ul> <li>Category Sync - Support of categories' asset syncing. #3</li> <li>Product Sync - Support of product variants' asset syncing. #3</li> <li>Category Sync - <code>CategorySyncUtils#buildActions</code> now also calculates all asset update actions needed. #3</li> <li>Product Sync - <code>ProductSyncUtils#buildActions</code> now also calculates variants' all asset update actions needed. #3</li> <li>Product Sync - <code>ProductUpdateActionUtils#buildVariantsUpdateActions</code> now also calculates variants' all asset update actions needed. #3</li> <li>Product Sync - Introduced the new ActionGroup: <code>ASSETS</code> which can be used in blacklisting/whitelisting assets syncing during the product sync. #3</li> <li>Category Sync - Introduced new update action build utility for building all needed update actions between two categories' assets <code>ProductVariantUpdateActionUtils#buildProductVariantAssetsUpdateActions</code>. #3</li> <li>Product Sync - Introduced new update action build utility for building all needed update actions between two variants' assets <code>ProductVariantUpdateActionUtils#buildProductVariantAssetsUpdateActions</code>. #3</li> <li>Category Sync - Introduced new update action granular build utils for category asset fields in <code>CategoryAssetUpdateActionUtils</code>. #3</li> <li>Product Sync - Introduced new update action granular build utils for product variant assets fields in <code>ProductVariantAssetUpdateActionUtils</code>. #3</li> <li>Commons - Introduced <code>AssetReferenceResolver</code> which is a helper that can resolve all the references of an AssetDraft. #3</li> <li>Commons - <code>VariantReferenceResolver</code> and <code>CategoryReferenceResolver</code> now also resolve all the containing AssetDrafts references. #3</li> <li>Commons - Support for custom update actions calculation for secondary resources (e.g. prices, product assets and category assets). #3</li> <li>Product Sync - <code>ProductReferenceReplacementUtils#replaceProductsReferenceIdsWithKeys</code> and <code>VariantReferenceReplacementUtils#replaceVariantsReferenceIdsWithKeys</code> now support replacing asset custom reference ids with keys. #3</li> <li>Category Sync - <code>CategoryReferenceReplacementUtils#replaceCategoriesReferenceIdsWithKeys</code> now supports replacing asset custom reference ids with keys. #3</li> <li>Commons - Introduced new <code>SyncUtils#replaceAssetsReferenceIdsWithKeys</code> which is a util that replaces the custom type ids with keys in a list of assets. #3</li> <li>Product Sync - <code>ProductReferenceReplacementUtils#buildProductQuery</code> now expands custom types on assets. #3</li> <li>Category Sync - <code>CategoryReferenceReplacementUtils#buildCategoryQuery</code> now expands custom types on assets. #3</li> <li>Commons - Introduced new <code>ResourceIdentifierUtils#toResourceIdentifierIfNotNull</code>. #262 </li> </ul> </li> <li> <p>Changes (5)</p> <ul> <li>Commons - <code>CustomUpdateActionUtils#buildCustomUpdateActions</code> is now  <code>CustomUpdateActionUtils#buildPrimaryResourceCustomUpdateActions</code>. It now takes a new third parameter <code>customActionBuilder</code>  which represents the concrete builder of custom update actions. For a list of concrete builder options check the  implementors of the <code>GenericCustomActionBuilder</code> interface. #3</li> <li>Commons - <code>CustomUpdateActionUtils#buildCustomUpdateActions</code> can now be used to build custom update actions for secondary resources (e.g. assets and prices). #3</li> <li>Commons - New Custom Type Id is now validated against being empty/null. #3</li> <li>Product Sync - <code>ProductSyncUtils#buildCoreActions</code> is now removed. <code>ProductSyncUtils#buildActions</code> should be used instead. #3</li> <li>Category Sync - <code>CategorySyncUtils#buildCoreActions</code> is now removed. <code>CategorySyncUtils#buildActions</code> should be used instead. #3</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Enhancements (1)</p> <ul> <li>Build Tools - Bumped commercetools-jvm-sdk to version 1.30.0. #262</li> </ul> </li> <li> <p>\ud83d\udc1e Bug Fixes (1)</p> <ul> <li>Build Tools - Fixed bug where jar and Codecov were triggered on benchmark stages of the build when they should  only be triggered on the full build. #249</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#v100-m10-feb-13-2018","title":"v1.0.0-M10 -  Feb 13, 2018","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (1)</p> <ul> <li>Commons - Added benchmarking setup for the library on every release. #155</li> </ul> </li> <li> <p>Changes (3)</p> <ul> <li>Commons - Statistics counters are now of type <code>AtomicInteger</code> instead of int to support concurrency. #242</li> <li>Category Sync - <code>categoryKeysWithMissingParents</code> in the <code>CategorySyncStatistics</code> is now of type <code>ConcurrentHashMap&lt;String, Set&lt;String&gt;</code> instead of <code>Map&lt;String, List&lt;String&gt;</code>. #242</li> <li>Category Sync - <code>CategorySyncStatistics</code> now exposes the methods <code>removeChildCategoryKeyFromMissingParentsMap</code>, <code>getMissingParentKey</code> and <code>putMissingParentCategoryChildKey</code> to support manipulating <code>categoryKeysWithMissingParents</code> map. #242</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#v100-m9-jan-22-2018","title":"v1.0.0-M9 -  Jan 22, 2018","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (1)</p> <ul> <li>Commons - Added <code>getSyncOptions</code> to the <code>ProductSync</code>, <code>CategorySync</code> and <code>InventorySync</code>. #230</li> </ul> </li> <li> <p>Changes (1)</p> <ul> <li>Product Sync - Added validation for product drafts' SKUs as a required field on the input product drafts since SKUs will be used for product matching in the future. #230</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Enhancements (1)</p> <ul> <li>Product Sync - Changed the product sync to cache product ids per batch as opposed to caching the entire products ids before syncing products. #230 </li> </ul> </li> <li> <p>\ud83d\udc1e Bug Fixes (1)</p> <ul> <li>Commons - Fixed library version in User-Agent headers of JVM SDK clients using the library. Now it is not fetched  from the JAR manifest but injected by gradle-scripts/set-release-version.gradle. #227</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#v100-m8-dec-29-2017","title":"v1.0.0-M8 -  Dec 29, 2017","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (1)</p> <ul> <li>Category Sync - Exposed new method <code>CategorySyncStatistics#getNumberOfCategoriesWithMissingParents</code> which gets the total number of categories with missing parents from the statistics instance. #186</li> </ul> </li> <li> <p>Changes (2)</p> <ul> <li>Product Sync - Changed product sync statistics report message wording. #186</li> <li>Product Sync - Exposed new methods <code>ProductReferenceResolver#resolveStateReference</code>, <code>ProductReferenceResolver#resolveTaxCategoryReference</code>, <code>ProductReferenceResolver#resolveCategoryReferences</code> and <code>ProductReferenceResolver#resolveProductTypeReference</code>. #218</li> </ul> </li> <li> <p>\ud83d\udee0 Enhancements (1) </p> <ul> <li>Build Tools - Bumped Gradle to version 4.4. #205</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#v100-m7-dec-15-2017","title":"v1.0.0-M7 -  Dec 15, 2017","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udc1e Bug Fixes (1)<ul> <li>Commons - Changed offset-based pagination of querying all elements to a limit-based with sorted ids approach  to mitigate problems of previous approach. #210</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#v100-m6-dec-5-2017","title":"v1.0.0-M6 -  Dec 5, 2017","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (3)</p> <ul> <li>Category Sync - Introduced <code>beforeCreateCallback</code> option which is callback applied on a category draft before a request to create it on CTP is issued. #183</li> <li>Product Sync - Introduced <code>beforeCreateCallback</code> option which is callback applied on a product draft before a request to create it on CTP is issued. #183</li> <li>Inventory Sync - Introduced <code>beforeCreateCallback</code> option which is callback applied on a inventoryEntry draft before a request to create it on CTP is issued. #183</li> </ul> </li> <li> <p>\u2728 Major Enhancements (2)</p> <ul> <li>Category Sync - Introduced batching on update action requests to allow for requesting updates of more than 500 actions. #21</li> <li>Product Sync - Introduced batching on update action requests to allow for requesting updates of more than 500 actions. #21</li> </ul> </li> <li> <p>\ud83d\udc1e Bug Fixes (1)</p> <ul> <li>Commons - Fixed library version in User-Agent headers of JVM SDK clients using the library. #191</li> </ul> </li> <li> <p>\ud83d\udccb Documentation (1)</p> <ul> <li>Commons - Added Code of Conduct doc.</li> </ul> </li> <li> <p>\ud83d\udea7 Migration guide (6)</p> <ul> <li>Product Sync - Removed <code>removeOtherVariants</code> option which is already done by the sync by default. Removal of  variants can be prevented through the beforeUpdateCallback. Please check here an example of how this can be done. #26</li> <li>Commons - Removed <code>removeOtherSetEntries</code>, <code>removeOtherCollectionEntries</code> and <code>removeOtherProperties</code> options  which are already done by the sync by default. The aforementioned options (and even more use cases) can now be covered with help of the beforeCreateCallback and beforeUpdateCallback. Please  check here  an example of how removal of variants can be disabled. #26</li> <li>Commons - Removed website and emergency contact e-mail appened in User-Agent headers of JVM SDK clients using the  library. #191</li> <li>Category Sync - <code>beforeUpdateCallback</code> now treats a null return as an empty list of update actions. #183</li> <li>Product Sync - <code>beforeUpdateCallback</code> now treats a null return as an empty list of update actions. #183</li> <li>Inventory Sync - <code>beforeUpdateCallback</code> now treats a null return as an empty list of update actions. #183</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#v100-m5-nov-16-2017","title":"v1.0.0-M5 -  Nov 16, 2017","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (3)</p> <ul> <li>Inventory Sync - Introduced <code>beforeUpdateCallback</code> which is applied after generation of update actions and before  actual InventoryEntry update. #169</li> <li>Build Tools - Added <code>Add Release Notes entry</code> checkbox in PR template on Github repo. #161</li> <li>Commons - Appended library name and version to User-Agent headers of JVM SDK clients using the library. #142</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Enhancements (3)</p> <ul> <li>Commons - <code>setUpdateActionsCallback</code> has been renamed to <code>beforeUpdateCallback</code> and now takes a TriFunction instead  of Function, which adds more information about the generated list of update actions, namely, the old resource being  updated and the new resource draft. #169</li> <li>Build Tools - Explicitly specified gradle tasks execution order in execution-order.gradle. #161</li> <li>Build Tools - Set PMD to run before Integration tests. #161</li> <li>Commons - Appended library name and version to User-Agent headers of JVM SDK clients using the library. #142</li> </ul> </li> <li> <p>\ud83d\udccb Documentation (1)</p> <ul> <li>Build Tools - Added Snyk vulnerabilities badge to repo README. #188</li> </ul> </li> <li> <p>\ud83d\udea7 Migration guide (8)</p> <ul> <li>Commons - Renamed <code>setUpdateActionsCallback</code> to <code>beforeUpdateCallback</code>. #169</li> <li>Commons - Renamed <code>setAllowUuid</code> to <code>allowUuid</code>. #169</li> <li>Commons - Renamed <code>setWarningCallBack</code> to <code>warningCallback</code>. #169</li> <li>Commons - Renamed <code>setErrorCallBack</code> to <code>errorCallback</code>. #169</li> <li>Commons - Renamed <code>setBatchSize</code> to <code>batchSize</code>. #169</li> <li>Commons - Removed <code>setRemoveOtherLocales</code> option. #169</li> <li>Commons - Renamed <code>setRemoveOtherSetEntries</code>, <code>setRemoveOtherCollectionEntries</code> and <code>setRemoveOtherProperties</code>  to <code>removeOtherSetEntries</code>, <code>removeOtherCollectionEntries</code> and <code>removeOtherProperties</code>. #169</li> <li>Product Sync - Renamed <code>setSyncFilter</code> to <code>syncFilter</code>. #169</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#v100-m4-nov-7-2017","title":"v1.0.0-M4 -  Nov 7, 2017","text":"<p>Commits | Javadoc | Jar</p> <ul> <li>\ud83d\udd25 Hotfix (1)<ul> <li>Product Sync - Fixed an issue with <code>replaceAttributesReferencesIdsWithKeys</code> which nullifies localized text attributes due  to JSON parsing not throwing exception on parsing it to reference set. #179</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#v100-m3-nov-3-2017","title":"v1.0.0-M3 -  Nov 3, 2017","text":"<p>Commits | Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (7)</p> <ul> <li>ProductSync - Introduced Product TaxCategory reference resolution and syncing. #120.</li> <li>ProductSync - Introduced Product State reference resolution and syncing. #120.</li> <li>ProductSync - Exposed <code>ProductReferenceReplacementUtils#buildProductQuery</code> util to create a product query with all needed reference expansions to fetch products from a source CTP project for the sync. #120.</li> <li>ProductSync - Exposed <code>VariantReferenceReplacementUtils#replaceVariantsReferenceIdsWithKeys</code> which provides utils to replace reference ids with keys on variants (price and attriute references) coming from a source CTP project to make it ready for reference resolution. #160.</li> <li>ProductSync - Exposed <code>VariantReferenceResolver</code> which is a helper that resolves the price and attribute references on a ProductVariantDraft. (Note: This is used now by the already existing ProductReferenceResolver) #160.</li> <li>CategorySync - Exposed <code>CategoryReferenceReplacementUtils#buildCategoryQuery</code> util to create a category query with all needed reference expansions to fetch categories from a source CTP project for the sync. #120.</li> <li>Commons - Exposed <code>replaceCustomTypeIdWithKeys</code> and <code>replaceReferenceIdWithKey</code>. #120.</li> </ul> </li> <li> <p>\ud83d\udc1e Bug Fixes (1) </p> <ul> <li>Category Sync - Fixes an issue where retrying on concurrent modification exception wasn't re-fetching the latest  Category and rebuilding build update actions. #94</li> </ul> </li> <li> <p>\ud83d\udccb Documentation (6)</p> <ul> <li>Product Sync - Documented the reason behind having the latest batch processing time. #119</li> <li>Category Sync - Documented the reason behind having the latest batch processing time. #119</li> <li>Category Sync - Fixed the statistics summary string used in the documentation. #119</li> <li>Inventory Sync - Documented the reason behind having the latest batch processing time. #119</li> <li>Product Sync - Fixed some typos. #172</li> <li>Commons - Provided inline example of how to use logging in callbacks. #172</li> </ul> </li> <li> <p>\ud83d\udea7 Migration guide (9)</p> <ul> <li>Product Sync - Moved <code>replaceProductsReferenceIdsWithKeys</code> from <code>SyncUtils</code> to <code>ProductReferenceReplacementUtils</code>. #120</li> <li>Product Sync - Removed <code>replaceProductDraftsCategoryReferenceIdsWithKeys</code> which is not needed anymore. #120</li> <li>Product Sync - Removed <code>replaceProductDraftCategoryReferenceIdsWithKeys</code> which is not needed anymore. #120</li> <li>Product Sync - Removed <code>replaceCategoryOrderHintCategoryIdsWithKeys</code> which is not needed anymore. #120</li> <li>Product Sync - Moved <code>getDraftBuilderFromStagedProduct</code> from <code>SyncUtils</code> to <code>ProductReferenceReplacementUtils</code>. #120</li> <li>Category Sync - Moved <code>replaceCategoriesReferenceIdsWithKeys</code> from <code>SyncUtils</code> to <code>CategoryReferenceReplacementUtils</code>. #120</li> <li>Inventory Sync - Moved <code>replaceInventoriesReferenceIdsWithKeys</code> from <code>SyncUtils</code> to <code>InventoryReferenceReplacementUtils</code>. #120</li> <li>Commons - Removed slf4j-simple dependency. #172</li> <li>Commons - Used implementation instead of compile configuration for dependencies. #172</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#v100-m2-oct-12-2017","title":"v1.0.0-M2 -  Oct 12, 2017","text":"<p>Commits | Javadoc | Jar - \ud83c\udf89 New Features (3)     - Product Sync - Supported syncing entire product variant images, putting order into consideration. #114     - Product Sync - Exposed <code>ProductVariantUpdateActionUtils#buildProductVariantImagesUpdateActions</code> and <code>ProductVariantUpdateActionUtils#buildMoveImageToPositionUpdateActions</code> action build util. #114     - Product Sync - Supported Blacklisting/Whitelisting update action groups on sync. #122</p> <ul> <li> <p>\ud83d\udc1e Bug Fixes (4)</p> <ul> <li>Build Tools - Fixed issue were JavaDoc jar was not built. #117</li> <li>Build Tools - Fixed issue were JavaDoc was not published on github. #118</li> <li>Product Sync - Fixed a potential bug where an exisitng master variant key could be blank.#122</li> <li>Product Sync - Fixed a potential bug where a product draft could be provided with no master variant set. #122</li> </ul> </li> <li> <p>\ud83d\udee0 Enhancements (2)\ufe0f</p> <ul> <li>Build Tools - Integration tests project credentials can now be set on a properties file not only as environment variables and give error messages if not set. #105</li> <li>Product Sync - Validated the SKU before making a <code>ChangeMasterVariant</code> request by SKU. #122</li> </ul> </li> <li> <p>\ud83d\udccb Documentation (5)</p> <ul> <li>Build Tools - Added bintray badge to repo. #126</li> <li>Product Sync - Added usage documentation. #121</li> <li>Commons - Separated contributing README into own README not in the main one. #121</li> <li>Commons - Added release notes doc. #125</li> <li>Build Tools - Added JavaDoc badge to repo. #145</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#v100-m2-beta-sep-28-2017","title":"v1.0.0-M2-beta -  Sep 28, 2017","text":"<p>Commits | Jar</p> <ul> <li>Beta Features (11)<ul> <li>Product Sync - Introduced syncing products name, categories, categoryOrderHints, description, slug,  metaTitle,  metaDescription, metaKeywords, masterVariant and searchKeywords. #57</li> <li>Product Sync -  Exposed update action build utils for products name, categories, categoryOrderHints, description, slug,  metaTitle,  metaDescription, metaKeywords, masterVariant and searchKeywords. #57</li> <li>Product Sync -  Introduced reference resolution support for product categories, productType and prices. #95 #96</li> <li>Product Sync -  Introduced syncing products publish state. #97</li> <li>Product Sync -  Exposed update action build utils for products publish state. #97</li> <li>Product Sync -  Introduced syncing products variant attributes. #98</li> <li>Product Sync -  Exposed update action build utils for products variant attributes. #98</li> <li>Product Sync -  Introduced syncing products variant prices without update action calculation. #99</li> <li>Product Sync -  Introduced syncing products variant images. #100</li> <li>Product Sync -  Exposed update action build utils for products variant images. #100</li> <li>Product Sync -  Introduced syncing products against staged projection. #93</li> </ul> </li> </ul>"},{"location":"RELEASE_NOTES/#v100-m1-sep-06-2017","title":"v1.0.0-M1 -  Sep 06, 2017","text":"<p>Commits |  Javadoc | Jar</p> <ul> <li> <p>\ud83c\udf89 New Features (16) </p> <ul> <li>Category Sync - Introduced syncing category name, description, orderHint, metaDescription, metaTitle,  customFields and parent category. #2</li> <li>Category Sync - Exposed update action build utils for category name, description, orderHint, metaDescription, metaTitle,  customFields and parent category. #2</li> <li>Category Sync - Introduced sync options builders. #5</li> <li>Category Sync - Introduced support of syncing categories in any order. #28</li> <li>Category Sync - Added concurrency modification exception repeater. #30</li> <li>Category Sync - Used category keys for matching. #45</li> <li>Category Sync - Introduced reference resolution support. #47</li> <li>Category Sync - Introduced Batch processing support. #73</li> <li>Category Sync - Added info about missing parent categories in statistics. #73</li> <li>Commons - Introduced sync statistics support. #6</li> <li>Commons - Sync ITs should now use client that repeats on 5xx errors. #31</li> <li>Commons - Sync only accepts drafts. #46</li> <li>Build Tools - Travis setup as CI tool. #1</li> <li>Build Tools - Setup Bintray release and publising process. #24</li> <li>Build Tools - Setup CheckStyle, PMD, FindBugs, Jacoco and CodeCov. #25</li> <li>Build Tools - Setup repo PR and issue templates. #29</li> </ul> </li> <li> <p>Beta Features (5)</p> <ul> <li>Inventory Sync - Introduced syncing inventory supplyChannel, quantityOnStock, restockableInDays, expectedDelivery  and customFields. #17</li> <li>Inventory Sync - Exposed update action build utils for inventory supplyChannel, quantityOnStock, restockableInDays, expectedDelivery  and customFields. #17</li> <li>Inventory Sync - Introduced sync options builder support. #15</li> <li>Inventory Sync - Introduced reference resolution support. #47</li> <li>Inventory Sync - Introduced batch processing support. #73</li> </ul> </li> </ul>"},{"location":"adr/0001-record-architecture-decisions/","title":"1. Record architecture decisions","text":"<p>Date: 2020-11-04</p>"},{"location":"adr/0001-record-architecture-decisions/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"adr/0001-record-architecture-decisions/#context","title":"Context","text":"<p>We need to record the architectural decisions made on this project.</p>"},{"location":"adr/0001-record-architecture-decisions/#decision","title":"Decision","text":"<p>We will use Architecture Decision Records, as described by Michael Nygard.</p>"},{"location":"adr/0001-record-architecture-decisions/#consequences","title":"Consequences","text":"<p>See Michael Nygard's article, linked above. For a lightweight ADR toolset, see Nat Pryce's adr-tools.</p>"},{"location":"adr/0002-shopping-lists-lineitem-and-textlineitem-update-actions/","title":"2. LineItem and TextLineItem update actions of the ShoppingLists.","text":"<p>Date: 2020-11-04</p>"},{"location":"adr/0002-shopping-lists-lineitem-and-textlineitem-update-actions/#status","title":"Status","text":"<p>Approved</p>"},{"location":"adr/0002-shopping-lists-lineitem-and-textlineitem-update-actions/#context","title":"Context","text":"<p>In a commerce application, a shopping list is a personal wishlist of a customer, (i.e. ingredients for a recipe, birthday wishes).  Shopping lists hold line items of products in the platform or any other items that can be described as text line items.</p> <p>We have challenges to build update actions of the <code>LineItem</code> and <code>TextLineItem</code> because of the nature of the synchronization,  so in this document, we will describe the reasons and constraints, mostly related to order of the items:  - LineItem orders might be important, if the customer has a front end that sorts the line items with their order could mean sorting by importance.</p>"},{"location":"adr/0002-shopping-lists-lineitem-and-textlineitem-update-actions/#lineitems","title":"LineItems","text":""},{"location":"adr/0002-shopping-lists-lineitem-and-textlineitem-update-actions/#how-to-ensure-line-item-order","title":"How to ensure line item order?","text":"LineItemDrafts LineItems <pre>\n{\n  \"lineItems\": [\n    {\n      \"sku\": \"SKU-1\",\n      \"quantity\": 1,\n      \"addedAt\": \"2020-11-04T09:38:35.571Z\",\n      \"custom\": {\n        \"type\": {\n          \"key\": \"custom-type-for-shoppinglists\"\n        },\n        \"fields\": {\n          \"textField\": \"text-1\"\n        }\n      }\n    },\n    {\n      \"sku\": \"SKU-2\",\n      \"quantity\": 2,\n      \"addedAt\": \"2020-11-04T09:40:12.341Z\",\n      \"custom\": {\n        \"type\": {\n          \"key\": \"custom-type-for-shoppinglists\"\n        },\n        \"fields\": {\n          \"textField\": \"text-2\"\n        }\n      }\n    }\n  ]\n}\n</pre> <pre>\n{\n  \"lineItems\": [\n    {\n      \"id\": \"24de3821-e27d-4ddb-bd0b-ecc99365285f\",\n      \"variant\": {\n        \"sku\": \"SKU-2\"\n      },\n      \"quantity\": 2,\n      \"custom\": {\n        \"type\": {\n          \"id\": \"4796e155-f5a4-403a-ae1a-04b10c9dfc54\",\n          \"obj\": {\n            \"key\": \"custom-type-for-shoppinglists\"\n          }\n        },\n        \"fields\": {\n          \"textField\": \"text-2\"\n        }\n      },\n     \"addedAt\": \"2020-11-04T09:38:35.571Z\"\n    }\n  ]\n}\n</pre> Analysis <p>Draft has line items with SKU-1 and SKU-2. In the target project line item with                 SKU-2 exists, so SKU-1 is a new line item. </p> <p> So we need to create an AddLineItem action                 and a Change LineItems Order                  of the line items SKU-1 and SKU-2, because when we add line item with SKU-1                 the order will be SKU-2 and SKU-1.</p> <p>The challenge in here is, those actions can not be added in one request because we don't know the                 line item id of the new line item                 with SKU-1, so we need to find another way to create a new line item with the right order.</p> Proposed solution <p>                 Normally, for a difference, we might do a set intersection and then calculate action for differences,                  but that does not make sense because we are not aware of the order from the draft.                  So in this case the one request could be created but we might need to remove line item with SKU-2                 and line items in the draft with the given order with the line items SKU-1 and SKU-2.             </p> <pre>\n{\n  \"version\": 1,\n  \"actions\": [\n    {\n      \"action\": \"removeLineItem\",\n      \"lineItemId\": \"24de3821-e27d-4ddb-bd0b-ecc99365285f\"\n    },\n    {\n      \"action\": \"addLineItem\",\n      \"sku\": \"SKU-1\",\n      \"quantity\": 1,\n      \"addedAt\": \"2020-11-04T09:38:35.571Z\",\n      \"custom\": {\n        \"type\": {\n          \"key\": \"custom-type-for-shoppinglists\"\n        },\n        \"fields\": {\n          \"textField\": \"text-1\"\n        }\n      }\n    },\n    {\n      \"action\": \"addLineItem\",\n      \"sku\": \"SKU-2\",\n      \"quantity\": 2,\n      \"addedAt\": \"2020-11-04T09:40:12.341Z\",\n      \"custom\": {\n        \"type\": {\n          \"key\": \"custom-type-for-shoppinglists\"\n        },\n        \"fields\": {\n          \"textField\": \"text-2\"\n        }\n      }\n    }\n  ]\n}\n</pre>"},{"location":"adr/0002-shopping-lists-lineitem-and-textlineitem-update-actions/#do-we-need-to-remove-all-line-items-when-the-order-changes","title":"Do we need to remove all line items when the order changes ?","text":"LineItemDrafts LineItems <pre>\n{\n  \"lineItems\": [\n    {\n      \"sku\": \"SKU-1\",\n      \"quantity\": 1,\n      \"addedAt\": \"2020-11-04T09:38:35.571Z\",\n      \"custom\": {\n        \"type\": {\n          \"key\": \"custom-type-for-shoppinglists\"\n        },\n        \"fields\": {\n          \"textField\": \"text-1\"\n        }\n      }\n    },\n    {\n      \"sku\": \"SKU-3\",\n      \"quantity\": 3,\n      \"addedAt\": \"2020-11-05T10:00:10.101Z\",\n      \"custom\": {\n        \"type\": {\n          \"key\": \"custom-type-for-shoppinglists\"\n        },\n        \"fields\": {\n          \"textField\": \"text-3\"\n        }\n      }\n    },\n    {\n      \"sku\": \"SKU-2\",\n      \"quantity\": 2,\n      \"addedAt\": \"2020-11-04T09:40:12.341Z\",\n      \"custom\": {\n        \"type\": {\n          \"key\": \"custom-type-for-shoppinglists\"\n        },\n        \"fields\": {\n          \"textField\": \"text-2\"\n        }\n      }\n    }        \n  ]\n}\n</pre> <pre>\n{\n  \"lineItems\": [\n    {\n      \"id\": \"1c38d582-2e65-43f8-85db-4d34e6cff57a\",\n      \"variant\": {\n        \"sku\": \"SKU-1\"\n      },\n      \"quantity\": 1,\n      \"custom\": {\n        \"type\": {\n          \"id\": \"4796e155-f5a4-403a-ae1a-04b10c9dfc54\",\n          \"obj\": {\n            \"key\": \"custom-type-for-shoppinglists\"\n          }\n        },\n        \"fields\": {\n          \"textField\": \"text-1\"\n        }\n      },\n     \"addedAt\": \"2020-11-04T09:38:35.571Z\"\n    },\n    {\n      \"id\": \"24de3821-e27d-4ddb-bd0b-ecc99365285f\",\n      \"variant\": {\n        \"sku\": \"SKU-2\"\n      },\n      \"quantity\": 2,\n      \"custom\": {\n        \"type\": {\n          \"id\": \"4796e155-f5a4-403a-ae1a-04b10c9dfc54\",\n          \"obj\": {\n            \"key\": \"custom-type-for-shoppinglists\"\n          }\n        },\n        \"fields\": {\n          \"textField\": \"text-2\"\n        }\n      },\n     \"addedAt\": \"2020-11-04T09:40:12.341Z\"\n    }\n  ]\n}\n</pre> Analysis <p>Draft has line items with SKU-1, SKU-3 and SKU-2 also in target project line item with                 SKU-1 exists in the same order, SKU-3 is a new line item, and SKU-2 needs to be in last order.</p> <p> So we need to create an AddLineItem action and                 a Change LineItems Order                 of the line items SKU-2 and SKU-3, because when we add line item with SKU-3                 the order will be SKU-1, SKU-2 and SKU-3.</p> <p>The challenge in here is, those actions can not be added in one request because we don't know the                 line item id of the new line item                 with SKU-3, so we need to find another way to create a new line item with the right order.</p> <p>Also another challenge in here is about the line item with SKU-1, as the order and data is                 exactly same, we need to find a better way to avoid creating unnecessary actions.             </p> Proposed solution <p>                 The solution idea about the new line item and changed order is still same like in the case-1. Do we                 need to remove and add line item with SKU-1? No, it is not needed and we could start the removing                 and adding from the first order change.             </p> <pre>\n{\n  \"version\": 1,\n  \"actions\": [\n    {\n      \"action\": \"removeLineItem\",\n      \"lineItemId\": \"24de3821-e27d-4ddb-bd0b-ecc99365285f\"\n    },\n    {\n      \"action\": \"addLineItem\",\n      \"sku\": \"SKU-3\",\n      \"quantity\": 3,\n      \"addedAt\": \"2020-11-05T10:00:10.101Z\",\n      \"custom\": {\n        \"type\": {\n          \"key\": \"custom-type-for-shoppinglists\"\n        },\n        \"fields\": {\n          \"textField\": \"text-3\"\n        }\n      }\n    },\n    {\n      \"action\": \"addLineItem\",\n      \"sku\": \"SKU-2\",\n      \"quantity\": 2,\n      \"addedAt\": \"2020-11-04T09:40:12.341Z\",\n      \"custom\": {\n        \"type\": {\n          \"key\": \"custom-type-for-shoppinglists\"\n        },\n        \"fields\": {\n          \"textField\": \"text-2\"\n        }\n      }\n    }\n  ]\n}\n</pre>"},{"location":"adr/0002-shopping-lists-lineitem-and-textlineitem-update-actions/#do-we-need-to-remove-and-add-all-line-items-when-no-new-line-item-is-added-or-removed-just-order-is-different","title":"Do we need to remove and add all line items when no new line item is added or removed, just order is different ?","text":"LineItemDrafts LineItems <pre>\n{\n  \"lineItems\": [\n    {\n      \"sku\": \"SKU-2\",\n      \"quantity\": 2,\n      \"addedAt\": \"2020-11-05T10:00:10.101Z\",\n      \"custom\": {\n        \"type\": {\n          \"key\": \"custom-type-for-shoppinglists\"\n        },\n        \"fields\": {\n          \"textField\": \"text-2\"\n        }\n      }\n    },\n    {\n      \"sku\": \"SKU-1\",\n      \"quantity\": 1,\n      \"addedAt\": \"2020-11-04T09:38:35.571Z\",\n      \"custom\": {\n        \"type\": {\n          \"key\": \"custom-type-for-shoppinglists\"\n        },\n        \"fields\": {\n          \"textField\": \"text-1\"\n        }\n      }\n    }\n  ]\n}\n</pre> <pre>\n{\n  \"lineItems\": [\n    {\n      \"id\": \"24de3821-e27d-4ddb-bd0b-ecc99365285f\",\n      \"variant\": {\n        \"sku\": \"SKU-1\"\n      },\n      \"quantity\": 1,\n      \"custom\": {\n        \"type\": {\n          \"id\": \"4796e155-f5a4-403a-ae1a-04b10c9dfc54\",\n          \"obj\": {\n            \"key\": \"custom-type-for-shoppinglists\"\n          }\n        },\n        \"fields\": {\n          \"textField\": \"text-1\"\n        }\n      },\n     \"addedAt\": \"2020-11-04T09:38:35.571Z\"\n    },\n    {\n      \"id\": \"24de3821-e27d-4ddb-bd0b-ecc99365285f\",\n      \"variant\": {\n        \"sku\": \"SKU-2\"\n      },\n      \"quantity\": 2,\n      \"custom\": {\n        \"type\": {\n          \"id\": \"4796e155-f5a4-403a-ae1a-04b10c9dfc54\",\n          \"obj\": {\n            \"key\": \"custom-type-for-shoppinglists\"\n          }\n        },\n        \"fields\": {\n          \"textField\": \"text-2\"\n        }\n      },\n     \"addedAt\": \"2020-11-04T09:40:12.341Z\"\n    }\n  ]\n}\n</pre> Analysis <p>The Draft has line items with SKU-2 and SKU-1 also in target project line item                 with SKU-2 and SKU-1 exists but in a different order.</p> <p> So we need                 a Change                     LineItems Order                 of the line items with order SKU-2 and SKU-1.</p> <p>The challenge here is about the line item order and no new line item is added or removed,                 just order is different, so we need to find a better way to avoid creating unnecessary actions like                 removing and adding back, is this possible ?             </p> Proposed solution <p>                 The solution idea for the changing order with removing and adding back looks like an overhead. We know                  all line item ids, so change order action could be created. However, the challenge is                 finding an algorithm to compare and find the line item ids, and then prepare an order.                             </p> <p>                 The example above seems reasonable but how you would sync a case like:                  [SKU-1, SKU-2, SKU-3] to [SKU-3, SKU-1, SKU-4, SKU-2], so with a different algorithm it might                  be done with change order [line-item-id-3, line-item-id-1, line-item-id-2] then removeLineItem                  SKU-2, add back addLineItem SKU-4, in total 3 actions. Even for this we need to remove and add back.             </p> <p>                 It looks like there are more different cases, when we dig in. That's why we decided to keep the idea                  of removing and adding back to  not have a more complex algorithm. </p>"},{"location":"adr/0002-shopping-lists-lineitem-and-textlineitem-update-actions/#textlineitems","title":"TextLineItems","text":""},{"location":"adr/0002-shopping-lists-lineitem-and-textlineitem-update-actions/#how-to-ensure-text-line-item-order","title":"How to ensure text line item order?","text":"TextLineItemDrafts TextLineItems <pre>\n{\n  \"textLineItems\": [\n    {\n     \"name\": {\n        \"de\": \"name1-DE\",\n        \"en\": \"name1-EN\"\n      },\n      \"description\": {\n        \"de\": \"desc1-DE\",\n        \"en\": \"desc1-EN\"\n      },\n      \"quantity\": 1,\n      \"addedAt\": \"2020-11-04T09:38:35.571Z\",\n      \"custom\": {\n        \"type\": {\n          \"key\": \"custom-type-for-shoppinglists\"\n        },\n        \"fields\": {\n          \"textField\": \"text-1\"\n        }\n      }\n    },\n    {\n      \"name\": {\n        \"de\": \"name2-DE\",\n        \"en\": \"name2-EN\"\n      },\n      \"description\": {\n        \"de\": \"desc2-DE\",\n        \"en\": \"desc2-EN\"\n      },\n      \"quantity\": 2,\n      \"addedAt\": \"2020-11-04T09:40:12.341Z\",\n      \"custom\": {\n        \"type\": {\n          \"key\": \"custom-type-for-shoppinglists\"\n        },\n        \"fields\": {\n          \"textField\": \"text-2\"\n        }\n      }\n    }\n  ]\n}\n</pre> <pre>\n{\n  \"textLineItems\": [\n    {\n      \"id\": \"24de3821-e27d-4ddb-bd0b-ecc99365285f\",\n      \"name\": {\n        \"de\": \"name2-DE\",\n        \"en\": \"name2-EN\"\n      },\n      \"description\": {\n        \"de\": \"desc2-DE\",\n        \"en\": \"desc2-EN\"\n      },\n      \"quantity\": 2,\n      \"custom\": {\n        \"type\": {\n          \"id\": \"4796e155-f5a4-403a-ae1a-04b10c9dfc54\",\n          \"obj\": {\n            \"key\": \"custom-type-for-shoppinglists\"\n          }\n        },\n        \"fields\": {\n          \"textField\": \"text-2\"\n        }\n      },\n     \"addedAt\": \"2020-11-04T09:38:35.571Z\"\n    }\n  ]\n}\n</pre> Analysis <p>Draft has text line items with name-1 and name-2. In the target project text line item with                 name-2 exists, so name-1 is a new text line item. </p> <p> So we need to create an AddTextLineItem                 action                 and a Change                     TextLineItems Order                 of the text line items name-1 and name-2, because when we add text line item with name-1                 the order will be name-2 and name-1.</p> <p>The challenge in here is, those actions cannot be added in one request because we don't know the                 text line item id of the new text line item                 with name-1. We need to find another way to create a new text line item with the right order.             </p> Proposed solution <p>                 Normally, for a difference, we do a set intersection and then calculate action for differences,                 but that does not make sense because we are not aware of the order from the draft.             </p> <p>                 Before that, we need to analyse the AddTextLineItem                 action, because the platform is not checking if the data exist. An API user could add the                 exact same data multiple times. So it's impossible to know the order by                 just checking the differences between the resource and draft object. Also, the name of the text line item                  does not need to be unique as line item does. Each line item is identified by its product variant and                  custom fields. Luckily the platform supports changing all field (except addedAt) of the text line                  items, so when an order change is needed we update the                 fields of the text line items. Which will look like:             </p> <pre>\n{\n  \"version\": 1,\n  \"actions\": [\n    {\n      \"action\" : \"changeTextLineItemName\",\n      \"textLineItemId\" : \"24de3821-e27d-4ddb-bd0b-ecc99365285f\",\n      \"name\": {\n        \"de\": \"name1-DE\",\n        \"en\": \"name1-EN\"\n      }\n    },\n    {\n      \"action\" : \"changeTextLineItemQuantity\",\n      \"textLineItemId\" : \"24de3821-e27d-4ddb-bd0b-ecc99365285f\",\n      \"quantity\" : 1\n    },\n    {\n      \"action\" : \"setTextLineItemDescription\",\n      \"textLineItemId\" : \"24de3821-e27d-4ddb-bd0b-ecc99365285f\",\n      \"description\": {\n        \"de\": \"desc1-DE\",\n        \"en\": \"desc1-EN\"\n      }\n    },\n    {\n      \"action\" : \"setTextLineItemCustomField\",\n      \"textLineItemId\" : \"24de3821-e27d-4ddb-bd0b-ecc99365285f\",\n      \"name\" : \"textField\",\n      \"value\" : \"text-1\"\n    },\n    {\n      \"action\" : \"addTextLineItem\",\n      \"name\": {\n        \"de\": \"name2-DE\",\n        \"en\": \"name2-EN\"\n      },\n      \"description\": {\n        \"de\": \"desc2-DE\",\n        \"en\": \"desc2-EN\"\n      },\n      \"quantity\": 2,\n      \"addedAt\": \"2020-11-04T09:38:35.571Z\",\n      \"custom\": {\n        \"type\": {\n          \"key\": \"custom-type-for-shoppinglists\"\n        },\n        \"fields\": {\n          \"textField\": \"text-2\"\n        }\n      }\n    }\n  ]\n}\n</pre>"},{"location":"adr/0002-shopping-lists-lineitem-and-textlineitem-update-actions/#common","title":"Common","text":""},{"location":"adr/0002-shopping-lists-lineitem-and-textlineitem-update-actions/#how-addedat-will-be-compared","title":"How addedAt will be compared?","text":"<p>In commercetools shopping lists API, there is no update action  to change the <code>addedAt</code> field of the <code>LineItem</code> and <code>TextLineItem</code>, also in API it has a default value described as <code>Defaults to the current date and time.</code>,  when it's not set in the draft, so how to compare and update this field?</p> <p>Proposed solution:</p> <p>The <code>addedAt</code> field will be synced only if the value provided in the line item draft, otherwise, the <code>addedAt</code> value will be omitted.  To be able to sync it we need to remove and add this line item back with the up-to-date value.  After some discussions in pull requests, we decided to not change this field.</p>"},{"location":"adr/0002-shopping-lists-lineitem-and-textlineitem-update-actions/#decision","title":"Decision","text":"<ul> <li> <p>In commercetools API, the product variant to be selected in the LineItemDraft can be specified either by its product ID plus variant ID or by its SKU.  For the sync library, product variant will be matched by its SKU, if the SKU not set for a LineItemDraft, the draft will not be synced and an error callback will be triggered. Check LineItemDraft Product Variant Selection for more details.</p> </li> <li> <p>When a Change LineItems Order action is needed,  the line items will be removed and added back with the order provided in the <code>ShoppingListDraft</code>.</p> </li> <li> <p>When a Change TextLineItems Order action is needed,  the text line items will be updated with using update actions with the order provided in the <code>ShoppingListDraft</code>.</p> </li> <li> <p>In commercetools shopping lists API, there is no update action  to change the <code>addedAt</code> field of the <code>LineItem</code> and <code>TextLineItem</code>, hereby we will not update the <code>addedAt</code> value.</p> </li> </ul>"},{"location":"adr/0002-shopping-lists-lineitem-and-textlineitem-update-actions/#consequences","title":"Consequences","text":"<ul> <li> <p>To ensure the order of the line items, we need to remove and add line items. That means a bigger payload and a performance overhead. </p> </li> <li> <p>To ensure the order of text line items, we need to calculate and update more than expected. That means a bigger payload and a performance overhead.</p> </li> <li> <p>Caveat: <code>addedAt</code> values not synced.</p> </li> </ul>"},{"location":"adr/0003-syncing-attribute-type-changes/","title":"3. Syncing attribute type changes","text":"<p>Date: 2021-09-28</p>"},{"location":"adr/0003-syncing-attribute-type-changes/#status","title":"Status","text":"<p>Approved.</p>"},{"location":"adr/0003-syncing-attribute-type-changes/#context","title":"Context","text":"<p>When changing an attribute definition type, we were using the approach by removing and re-adding the attribute with a new type but this approach is not working anymore. See: #762</p> <p>So when removing and adding an attribute from a productType in a single request the API returns:</p> <pre><code>\"code\" : \"AttributeDefinitionAlreadyExists\",\n\"message\" : \"An attribute definition with name 'attr_name_1' already exists on product type 'newName'.\",\n</code></pre> <p>We've discussed 3 different approaches to resolve the issue:</p> <ol> <li>Change the logic to apply remove action only and after that throw and just document as limitation that such errors can happen but if they run same import again later it should at some point work.</li> <li>Change the logic to apply remove action only and after that try apply re-add: handle specific error with a retry (exponential + backoff) with up to x retries.</li> <li>Check if attribute with the same name id deleted and added in the same request and skip the update with triggering error callback with a message to ask the user to handle it manually.</li> </ol>"},{"location":"adr/0003-syncing-attribute-type-changes/#decision","title":"Decision","text":"<p>The third approach is favoured due to the unpredictability of the other approaches since removeAttributeDefinition action is eventually consistent now and only takes place after the corresponding attribute has been removed from all the products asynchronously by the platform.</p>"},{"location":"adr/0003-syncing-attribute-type-changes/#best-practice-to-change-type","title":"Best practice to change type","text":"<p>Changes to attributes should be planned carefully and implemented with an understanding of the impact on the product data and performance for each change.</p> <ol> <li>Ensure product attributes of the same name are defined consistently across all product types.</li> <li>Allow time between attribute removal and the addition of attributes with the same name. Removal and addition actions of the attribute with the same name should be applied in separate requests.</li> </ol>"},{"location":"adr/0003-syncing-attribute-type-changes/#consequences","title":"Consequences","text":"<p>Support of changing the attribute type within a single API request is not supported anymore.</p>"},{"location":"usage/CART_DISCOUNT_SYNC/","title":"CartDiscount Sync","text":"<p>The module used for importing/syncing CartDiscounts into a commercetools project.  It also provides utilities for generating update actions based on the comparison of a CartDiscount  against a CartDiscountDraft.</p> <ul> <li>Usage</li> <li>Prerequisites<ul> <li>ProjectApiRoot</li> <li>Required Fields</li> <li>Reference Resolution</li> <li>Syncing from a commercetools project</li> <li>Syncing from an external resource</li> <li>SyncOptions</li> <li>errorCallback</li> <li>warningCallback</li> <li>beforeUpdateCallback</li> <li>beforeCreateCallback</li> <li>batchSize</li> <li>cacheSize</li> </ul> </li> <li>Running the sync<ul> <li>More examples of how to use the sync</li> </ul> </li> <li>Build all update actions</li> <li>Build particular update action(s)</li> <li>Migration Guide</li> <li>Client configuration and creation</li> <li>Signature of CartDiscountSyncOptions</li> <li>Build CartDiscountDraft (syncing from external project)</li> <li>Query for Cart Discounts (syncing from CTP project)</li> <li>Caveats</li> </ul>"},{"location":"usage/CART_DISCOUNT_SYNC/#usage","title":"Usage","text":""},{"location":"usage/CART_DISCOUNT_SYNC/#prerequisites","title":"Prerequisites","text":""},{"location":"usage/CART_DISCOUNT_SYNC/#projectapiroot","title":"ProjectApiRoot","text":"<p>Use the ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. To create <code>ClientCredentials</code> which are required for creating a client please use the <code>ClientCredentialsBuilder</code> provided in java-sdk-v2 Client OAUTH2 package If you have custom requirements for the client creation, have a look into the Important Usage Tips.</p> <pre><code>final ClientCredentials clientCredentials =\n        new ClientCredentialsBuilder()\n        .withClientId(\"client-id\")\n        .withClientSecret(\"client-secret\")\n        .withScopes(\"scopes\")\n        .build();\nfinal ProjectApiRoot apiRoot = ClientConfigurationUtils.createClient(\"project-key\", clientCredentials, \"auth-url\", \"api-url\");\n</code></pre>"},{"location":"usage/CART_DISCOUNT_SYNC/#required-fields","title":"Required Fields","text":"<p>The following fields are required to be set in, otherwise, they won't be matched by sync:</p> Draft Required Fields Note CartDiscountDraft <code>key</code> Also, the cart discounts in the target project are expected to have the <code>key</code> fields set."},{"location":"usage/CART_DISCOUNT_SYNC/#reference-resolution","title":"Reference Resolution","text":"<p>In commercetools, a reference can be created by providing the key instead of the ID with the type ResourceIdentifier. When the reference key is provided with a <code>ResourceIdentifier</code>, the sync will resolve the resource with the given key and use the ID of the found resource to create or update a reference. Therefore, in order to resolve the actual ids of those references in the sync process, <code>ResourceIdentifier</code>s with their <code>key</code>s have to be supplied. </p> Reference Field Type <code>custom.type</code> ResourceIdentifier to a Type <p>Note that a reference without the key field will be considered as an existing resource on the target commercetools project and the library will issue an update/create an API request without reference resolution.</p>"},{"location":"usage/CART_DISCOUNT_SYNC/#syncing-from-a-commercetools-project","title":"Syncing from a commercetools project","text":"<p>When syncing from a source commercetools project, you can use <code>toCartDiscountDrafts</code> method that transforms(resolves by querying and caching key-id pairs) and maps from a <code>CartDiscount</code> to <code>CartDiscountDraft</code> using cache in order to make them ready for reference resolution by the sync, for example: </p> <pre><code>// Build a ByProjectKeyCartDiscountsGet for fetching cart discounts from a source CTP project without any references expanded for the sync:\nfinal ByProjectKeyCartDiscountsGet byProjectKeyCartDiscountsGet = client.cartDiscounts().get();\n\n// Query all cart discounts (NOTE this is just for example, please adjust your logic)\nfinal List&lt;CartDiscount&gt; cartDiscounts = QueryUtils.queryAll(byProjectKeyCartDiscountsGet,\n        (cartDiscounts) -&gt; cartDiscounts)\n        .thenApply(lists -&gt; lists.stream().flatMap(List::stream).collect(Collectors.toList()))\n        .toCompletableFuture()\n        .join();\n</code></pre> <p>In order to transform and map the <code>CartDiscount</code> to <code>CartDiscountDraft</code>,  Utils method <code>toCartDiscountDrafts</code> requires <code>projectApiRoot</code>, implementation of <code>ReferenceIdToKeyCache</code> and <code>cartDiscounts</code> as parameters. For cache implementation, You can use your own cache implementation or use the class in the library - which implements the cache using caffeine library with an LRU (Least Recently Used) based cache eviction strategy<code>CaffeineReferenceIdToKeyCacheImpl</code>. Example as shown below:</p> <pre><code>//Implement the cache using library class.\nfinal ReferenceIdToKeyCache referenceIdToKeyCache = new CaffeineReferenceIdToKeyCacheImpl();\n\n//For every reference fetch its key using id, cache it and map from CartDiscount to CartDiscountDraft. With help of the cache same reference keys can be reused.\nCompletableFuture&lt;List&lt;CartDiscountDraft&gt;&gt; cartDiscountDrafts = CartDiscountTransformUtils.toCartDiscountDrafts(client, referenceIdToKeyCache, cartDiscounts);\n</code></pre>"},{"location":"usage/CART_DISCOUNT_SYNC/#syncing-from-an-external-resource","title":"Syncing from an external resource","text":"<ul> <li>When syncing from an external resource, <code>ResourceIdentifier</code>s with their <code>key</code>s have to be supplied as following example:</li> </ul> <pre><code>final CartDiscountDraft cartDiscountDraft = CartDiscountDraftBuilder.of()\n            .cartPredicate(\"cartPredicate\")\n            .name(LocalizedString.ofEnglish(\"foo\"))\n            .requiresDiscountCode(true)\n            .sortOrder(\"0.1\")\n            .target(CartDiscountTargetBuilder::shippingBuilder)\n            .value(CartDiscountValueAbsoluteDraftBuilder.of()\n                    .money(\n                            MoneyBuilder.of()\n                                    .centAmount(10L)\n                                    .currencyCode(DefaultCurrencyUnits.EUR.getCurrencyCode())\n                                    .build())\n                    .build())\n            .key(\"cart-discount-key\")\n            .custom(CustomFieldsDraftBuilder.of().type(typeResourceIdentifierBuilder -&gt; typeResourceIdentifierBuilder.key(\"type-key\")).fields(fieldContainerBuilder -&gt; fieldContainerBuilder.values(emptyMap())).build()) // note that custom type provided with key\n            .build();\n</code></pre>"},{"location":"usage/CART_DISCOUNT_SYNC/#syncoptions","title":"SyncOptions","text":"<p>After the <code>ProjectApiRoot</code> is set up, a <code>CartDiscountSyncOptions</code> should be built as follows:</p> <pre><code>// instantiating a CartDiscountSyncOptions\nfinal CartDiscountSyncOptions cartDiscountSyncOptions = CartDiscountSyncOptionsBuilder.of(projectApiRoot).build();\n</code></pre> <p><code>SyncOptions</code> is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:</p>"},{"location":"usage/CART_DISCOUNT_SYNC/#errorcallback","title":"errorCallback","text":"<p>A callback that is called whenever an error event occurs during the sync process. Each resource executes its own  error-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the error-event:</p> <ul> <li>sync exception</li> <li>cart discount draft from the source</li> <li>cart discount of the target project (only provided if an existing cart discount could be found)</li> <li>the update-actions, which failed (only provided if an existing cart discount could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(CartDiscountSync.class);\n final CartDiscountSyncOptions cartDiscountSyncOptions = CartDiscountSyncOptionsBuilder\n         .of(sphereClient)\n         .errorCallback((syncException, draft, cartDiscount, updateActions) -&gt; \n            logger.error(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/CART_DISCOUNT_SYNC/#warningcallback","title":"warningCallback","text":"<p>A callback is called whenever a warning event occurs during the sync process. Each resource executes its own  warning-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the warning message:</p> <ul> <li>sync exception</li> <li>cart discount draft from the source </li> <li>cart discount of the target project (only provided if an existing cart discount could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(CartDiscountSync.class);\n final CartDiscountSyncOptions cartDiscountSyncOptions = CartDiscountSyncOptionsBuilder\n         .of(projectApiRoot)\n         .warningCallback((syncException, draft, cartDiscount, updateActions) -&gt; \n            logger.warn(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/CART_DISCOUNT_SYNC/#beforeupdatecallback","title":"beforeUpdateCallback","text":"<p>During the sync process, if a target cart discount and a cart discount draft are matched, this callback can be used to  intercept the update request just before it is sent to the commercetools platform. This allows the user to modify  update actions array with custom actions or discard unwanted actions. The callback provides the following information :</p> <ul> <li>cart discount draft from the source</li> <li>cart discount from the target project</li> <li>update actions that were calculated after comparing both</li> </ul> <pre><code>final TriFunction&lt;\n        List&lt;CartDiscountUpdateAction&gt;, CartDiscountDraft, CartDiscount, List&lt;CartDiscountUpdateAction&gt;&gt; \n            beforeUpdateCartDiscountCallback =\n            (updateActions, newCartDiscountDraft, oldCartDiscount) -&gt;  updateActions.stream()\n                    .filter(updateAction -&gt; !(updateAction instanceof CartDiscountChangeCartPredicateAction))\n                    .collect(Collectors.toList());\n\nfinal CartDiscountSyncOptions cartDiscountSyncOptions = \n        CartDiscountSyncOptionsBuilder.of(projectApiRoot).beforeUpdateCallback(beforeUpdateCartDiscountCallback).build();\n</code></pre>"},{"location":"usage/CART_DISCOUNT_SYNC/#beforecreatecallback","title":"beforeCreateCallback","text":"<p>During the sync process, if a cart discount draft should be created, this callback can be used to intercept the create request just before it is sent to the commercetools platform.  It contains the following information : </p> <ul> <li>cart discount draft that should be created</li> </ul> <p>Please refer to example in product sync document.</p>"},{"location":"usage/CART_DISCOUNT_SYNC/#batchsize","title":"batchSize","text":"<p>A number that could be used to set the batch size with which cart discounts are fetched and processed, as cart discounts are obtained from the target project on the commercetools platform in batches for better performance. The algorithm accumulates up to <code>batchSize</code> resources from the input list, then fetches the corresponding cart discounts from the target project on the commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for cart discount sync.</p> <pre><code>final CartDiscountSyncOptions cartDiscountSyncOptions = \n         CartDiscountSyncOptionsBuilder.of(projectApiRoot).batchSize(30).build();\n</code></pre>"},{"location":"usage/CART_DISCOUNT_SYNC/#cachesize","title":"cacheSize","text":"<p>In the service classes of the commercetools-sync-java library, we have implemented an in-memory LRU cache to store a map used for the reference resolution of the library. The cache reduces the reference resolution based calls to the commercetools API as the required fields of a resource will be fetched only one time. These cached fields then might be used by another resource referencing the already resolved resource instead of fetching from commercetools API. It turns out, having the in-memory LRU cache will improve the overall performance of the sync library and commercetools API. which will improve the overall performance of the sync and commercetools API.</p> <p>Playing with this option can change the memory usage of the library. If it is not set, the default cache size is <code>10.000</code> for cart discount sync. <pre><code>final CartDiscountSyncOptions cartDiscountSyncOptions = \n         CartDiscountSyncOptionsBuilder.of(projectApiRoot).cacheSize(5000).build(); \n</code></pre></p>"},{"location":"usage/CART_DISCOUNT_SYNC/#running-the-sync","title":"Running the sync","text":"<p>After all the aforementioned points in the previous section have been fulfilled, to run the sync: <pre><code>// instantiating a cart discount sync\nfinal CartDiscountSync cartDiscountSync = new CartDiscountSync(cartDiscountSyncOptions);\n\n// execute the sync on your list of cart discounts\nCompletionStage&lt;CartDiscountSyncStatistics&gt; syncStatisticsStage = cartDiscountSync.sync(cartDiscountDrafts);\n</code></pre> The result of completing the <code>syncStatisticsStage</code> in the previous code snippet contains a <code>CartDiscountSyncStatistics</code> which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed cart discounts and the processing time of the last sync batch in different time units and in a human-readable format.</p> <pre><code>final CartDiscountSyncStatistics stats = syncStatisticsStage.toCompletebleFuture().join();\nstats.getReportMessage();\n/*\"Summary: 100 cart discounts were processed in total (11 created, 87 updated, 2 failed to sync).\"*/\n</code></pre> <p>Note The statistics object contains the processing time of the last batch only. This is due to two reasons:</p> <ol> <li>The sync processing time should not take into account the time between supplying batches to the sync.</li> <li>It is not known by the sync which batch is going to be the last one supplied.</li> </ol>"},{"location":"usage/CART_DISCOUNT_SYNC/#more-examples-of-how-to-use-the-sync","title":"More examples of how to use the sync","text":"<ol> <li>Sync from another CTP project as a source.</li> <li>Sync from an external source.</li> </ol> <p>Make sure to read the Important Usage Tips for optimal performance.</p>"},{"location":"usage/CART_DISCOUNT_SYNC/#build-all-update-actions","title":"Build all update actions","text":"<p>A utility method provided by the library to compare a <code>CartDiscount</code> with a new <code>CartDiscountDraft</code> and results in a list of cart discount update actions. <pre><code>List&lt;CartDiscountUpdateAction&gt; updateActions = CartDiscountSyncUtils.buildActions(cartDiscount, cartDiscountDraft, cartDiscountSyncOptions);\n</code></pre></p>"},{"location":"usage/CART_DISCOUNT_SYNC/#build-particular-update-actions","title":"Build particular update action(s)","text":"<p>Utility methods provided by the library to compare the specific fields of a <code>CartDiscount</code> and a new <code>CartDiscountDraft</code>, and in turn builds  the update action. One example is the <code>buildChangeNameUpdateAction</code> which compares names: <pre><code>Optional&lt;CartDiscountUpdateAction&gt; updateAction = CartDiscountUpdateActionUtils.buildChangeNameAction(oldCartDiscount, cartDiscountDraft);\n</code></pre> More examples of those utils for different cart discounts can be found here.</p>"},{"location":"usage/CART_DISCOUNT_SYNC/#migration-guide","title":"Migration Guide","text":"<p>The cart-discount-sync uses the JVM-SDK-V2, therefore ensure you Install JVM SDK module <code>commercetools-sdk-java-api</code> with any HTTP client module. The default one is <code>commercetools-http-client</code>.</p> <pre><code> &lt;!-- Sample maven pom.xml --&gt;\n &lt;properties&gt;\n     &lt;commercetools.version&gt;LATEST&lt;/commercetools.version&gt;\n &lt;/properties&gt;\n\n &lt;dependencies&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-http-client&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-sdk-java-api&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n &lt;/dependencies&gt;\n</code></pre>"},{"location":"usage/CART_DISCOUNT_SYNC/#client-configuration-and-creation","title":"Client configuration and creation","text":"<p>For client creation use ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. If you have custom requirements for the client creation make sure to replace <code>SphereClientFactory</code> with <code>ApiRootBuilder</code> as described in this Migration Document.</p>"},{"location":"usage/CART_DISCOUNT_SYNC/#signature-of-cartdiscountsyncoptions","title":"Signature of CartDiscountSyncOptions","text":"<p>As models and update actions have changed in the JVM-SDK-V2 the signature of SyncOptions is different. It's constructor now takes a <code>ProjectApiRoot</code> as first argument. The callback functions are signed with <code>CartDiscount</code>, <code>CartDiscountDraft</code> and <code>CartDiscountUpdateAction</code> from <code>package com.commercetools.api.models.cart_discount.*</code></p> <p>Note: Type <code>UpdateAction&lt;CartDiscount&gt;</code> has changed to <code>CartDiscountUpdateAction</code>. Make sure you create and supply a specific CartDiscountUpdateAction in <code>beforeUpdateCallback</code>. For that you can use the library-utilities or use a JVM-SDK builder (see also):</p> <pre><code>// Example: Create a cart discount update action to change name taking the 'newName' of the cartDiscountDraft\n    final Function&lt;LocalizedString, CartDiscountUpdateAction&gt; createBeforeUpdateAction =\n        (newName) -&gt; CartDiscountChangeNameAction.builder().name(newName).build();\n\n// Add the change name action to the list of update actions before update is executed\n    final TriFunction&lt;\n            List&lt;CartDiscountUpdateAction&gt;, CartDiscountDraft, CartDiscount, List&lt;CartDiscountUpdateAction&gt;&gt;\n        beforeUpdateCartDiscountCallback =\n            (updateActions, newCartDiscountDraft, oldCartDiscount) -&gt; {\n              final CartDiscountUpdateAction beforeUpdateAction =\n                  createBeforeUpdateAction.apply(newCartDiscountDraft.getName());\n              updateActions.add(beforeUpdateAction);\n              return updateActions;\n            };\n</code></pre>"},{"location":"usage/CART_DISCOUNT_SYNC/#build-cartdiscountdraft-syncing-from-external-project","title":"Build CartDiscountDraft (syncing from external project)","text":"<p>The cartDiscount-sync expects a list of <code>CartDiscountDraft</code>s to process. If you use java-sync-library to sync your cart discounts from any external system into a commercetools platform project you have to convert your data into CTP compatible <code>CartDiscountDraft</code> type. This was done in previous version using <code>DraftBuilder</code>s. The V2 SDK do not have inheritance for <code>DraftBuilder</code> classes but the differences are minor and you can replace it easily. Here's an example:</p> <p><pre><code>// CartDiscountDraftBuilder in v1 takes parameters 'name', 'cartPredicate', 'value', 'target', 'sortOrder', 'requiresDiscountCode' \nfinal CartDiscountDraft cartDiscountDraft =\n        CartDiscountDraftBuilder.of(\n              ofEnglish(\"name\"),\n              \"1 = 1\",\n              CartDiscountValue.ofAbsolute(MoneyImpl.of(20, EUR)),\n              \"sku = \\\"0123456789\\\" or sku = \\\"0246891213\\\"\",\n              \"0.2\",\n              false)\n          .key(\"key\")\n          .active(false)\n          .build()\n\n// CartDiscountDraftBuilder in v2\nfinal CartDiscountDraft cartDiscountDraft =\n        CartDiscountDraftBuilder.of()\n            .name(ofEnglish(\"name\"))\n            .cartPredicate(\"1 = 1\")\n            .value(\n              CartDiscountValueAbsoluteDraftBuilder.of()\n                .money(\n                    CentPrecisionMoneyBuilder.of()\n                      .centAmount(20L)\n                      .fractionDigits(0)\n                      .currencyCode(DefaultCurrencyUnits.EUR.getCurrencyCode())\n                      .build()\n                )\n                .build()\n            )\n            .target(\"sku = \\\"0123456789\\\" or sku = \\\"0246891213\\\"\")\n            .sortOrder(\"0.2\")\n            .requiresDiscountCode(false)\n            .key(\"key\")\n            .isActive(false)\n            .build();\n</code></pre> For more information, see the Guide to replace DraftBuilders.</p>"},{"location":"usage/CART_DISCOUNT_SYNC/#query-for-cart-discounts-syncing-from-ctp-project","title":"Query for Cart Discounts (syncing from CTP project)","text":"<p>If you sync cart discounts between different commercetools projects you probably use CartDiscountTransformUtils#toCartDiscountDrafts to transform <code>CartDiscount</code> into <code>CartDiscountDraft</code> which can be used by the cartDiscount-sync. However, if you need to query <code>Cart Discounts</code> from a commercetools project instead of passing <code>CartDiscountQuery</code>s to a <code>sphereClient</code>, create (and execute) requests directly from the <code>apiRoot</code>. Here's an example:</p> <p><pre><code>// SDK v1: CartDiscountQuery to fetch all cart discounts\nfinal CartDiscountQuery query = CartDiscountQuery.of();\n\nfinal PagedQueryResult&lt;CartDiscount&gt; pagedQueryResult = sphereClient.executeBlocking(query);\n\n// SDK v2: Create and execute query to fetch all cart discounts in one line\nfinal CartDiscountPagedQueryResponse result = apiRoot.cart discounts().get().executeBlocking().getBody();\n</code></pre> Read more about querying resources.</p>"},{"location":"usage/CART_DISCOUNT_SYNC/#caveats","title":"Caveats","text":"<ol> <li>Syncing cart discounts with a <code>CartDiscountValue</code> of type <code>giftLineItem</code> is not supported yet. #411.</li> </ol>"},{"location":"usage/CATEGORY_SYNC/","title":"Category Sync","text":"<p>Module used for importing/syncing Categories into a commercetools project.  It also provides utilities for generating update actions based on the comparison of a Category  against a CategoryDraft.</p> <ul> <li>Usage</li> <li>Prerequisites<ul> <li>ProjectApiRoot</li> <li>Required Fields</li> <li>Reference Resolution</li> <li>Persistence of Category Drafts with irresolvable parent</li> <li>Syncing from a commercetools project</li> <li>Syncing from an external resource</li> <li>SyncOptions</li> <li>errorCallback</li> <li>warningCallback</li> <li>beforeUpdateCallback</li> <li>beforeCreateCallback</li> <li>batchSize</li> <li>cacheSize</li> </ul> </li> <li>Running the sync<ul> <li>More examples of how to use the sync</li> </ul> </li> <li>Build all update actions</li> <li>Build particular update action(s)</li> <li>Migration Guide</li> <li>Client configuration and creation</li> <li>Signature of CategorySyncOptions</li> <li>Build CategoryDraft (syncing from external project)</li> <li>Query for Categories (syncing from CTP project)</li> <li>JVM-SDK-V2 migration guide</li> </ul>"},{"location":"usage/CATEGORY_SYNC/#usage","title":"Usage","text":""},{"location":"usage/CATEGORY_SYNC/#prerequisites","title":"Prerequisites","text":""},{"location":"usage/CATEGORY_SYNC/#projectapiroot","title":"ProjectApiRoot","text":"<p>Use the ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. To create <code>ClientCredentials</code> which are required for creating a client please use the <code>ClientCredentialsBuilder</code> provided in java-sdk-v2 Client OAUTH2 package If you have custom requirements for the client creation, have a look into the Important Usage Tips.</p> <pre><code>final ClientCredentials clientCredentials =\n        new ClientCredentialsBuilder()\n        .withClientId(\"client-id\")\n        .withClientSecret(\"client-secret\")\n        .withScopes(\"scopes\")\n        .build();\nfinal ProjectApiRoot apiRoot = ClientConfigurationUtils.createClient(\"project-key\", clientCredentials, \"auth-url\", \"api-url\");\n</code></pre>"},{"location":"usage/CATEGORY_SYNC/#required-fields","title":"Required Fields","text":"<p>The following fields are required to be set in, otherwise they won't be matched by sync:</p> Draft Required Fields Note CategoryDraft <code>key</code> Also, the categories in the target project are expected to have the <code>key</code> fields set."},{"location":"usage/CATEGORY_SYNC/#reference-resolution","title":"Reference Resolution","text":"<p>In commercetools, a reference can be created by providing the key instead of the ID with the type ResourceIdentifier. When the reference key is provided with a <code>ResourceIdentifier</code>, the sync will resolve the resource with the given key and use the ID of the found resource to create or update a reference. Therefore, in order to resolve the actual ids of those references in sync process, <code>ResourceIdentifier</code>s with their <code>key</code>s have to be supplied. </p> Reference Field Type <code>parent</code> CategoryResourceIdentifier <code>custom.type</code> TypeResourceIdentifier <code>assets.custom.type</code> TypeResourceIdentifier <p>Note that a reference without the key field will be considered as existing resource on the target commercetools project and the library will issue an update/create an API request without reference resolution.</p>"},{"location":"usage/CATEGORY_SYNC/#persistence-of-category-drafts-with-irresolvable-parent","title":"Persistence of Category Drafts with irresolvable parent","text":"<p>A CategoryDraft X could have a parent Category Y. But It could be that the parent Category Y is not supplied before X,  which means the sync could fail to create/updating X. It could also be that Y is not supplied at all in this batch but at a later batch.</p> <p>The library keeps track of such \"referencing\" Category Drafts like X and persists them in storage  (Commercetools platform <code>customObjects</code> in the target project , in this case)  to keep them and create/update them accordingly whenever the referenced drafts exist in the target project.</p> <p>The <code>customObject</code> will have a <code>container:</code> <code>\"commercetools-sync-java.UnresolvedReferencesService.categoryDrafts\"</code> and a <code>key</code> representing the key of the  category Drafts that is waiting to be created/updated.</p> <p>Here is an example of a <code>CustomObject</code> in the target project that represents a category Draft with the key <code>categoryKey1</code>. Being persisted as <code>CustomObject</code> means that the referenced parent Category with the key <code>nonExistingParent</code> does not exist yet.</p> <p><pre><code>{\n      \"id\": \"81dcb42f-1959-4412-a4bb-8ad420d0d11f\",\n      \"version\": 1,\n      \"createdAt\": \"2021-01-13T12:19:45.937Z\",\n      \"lastModifiedAt\": \"2021-01-13T12:19:45.937Z\",\n      \"lastModifiedBy\": {\n        \"clientId\": \"7OSAGVPscneW_KS4nqskFkrd\",\n        \"isPlatformClient\": false\n      },\n      \"createdBy\": {\n        \"clientId\": \"7OSAGVPscneW_KS4nqskFkrd\",\n        \"isPlatformClient\": false\n      },\n      \"container\": \"commercetools-sync-java.UnresolvedReferencesService.categoryDrafts\",\n      \"key\": \"8732a63fa8ca457e86f4075340d65154e7e2476a\",\n      \"value\": {\n        \"missingReferencedKeys\": [\n          \"nonExistingParent\"\n        ],\n        \"waitingDraft\": {\n          \"custom\": {\n            \"type\": {\n              \"key\": \"oldCategoryCustomTypeKey\"\n            },\n            \"fields\": {\n              \"backgroundColor\": {\n                \"de\": \"rot\",\n                \"en\": \"red\"\n              },\n              \"invisibleInShop\": false\n            }\n          },\n          \"key\": \"categoryKey1\",\n          \"name\": {\n            \"en\": \"furniture\"\n          },\n          \"parent\": {\n            \"key\": \"nonExistingParent\"\n          },\n          \"slug\": {\n            \"en\": \"new-furniture1\"\n          }\n        }\n      }\n    }\n</code></pre> As soon, as the referenced parent Category Draft is supplied to the sync, the Category will be created/updated and the  <code>CustomObject</code> will be removed from the target project.</p>"},{"location":"usage/CATEGORY_SYNC/#syncing-from-a-commercetools-project","title":"Syncing from a commercetools project","text":"<p>When syncing from a source commercetools project, you can use <code>toCategoryDrafts</code> method that transforms(resolves by querying and caching key-id pairs) and maps from a <code>Category</code> to <code>CategoryDraft</code> using cache in order to make them ready for reference resolution by the sync, for example: </p> <pre><code>// Build ByProjectKeyCategoriesGet for fetching categories from a source CTP project without any references expanded for the sync:\nfinal ByProjectKeyCategoriesGet byProjectKeyCategoriesGet = client.categories().get();\n\n// Query all categories (NOTE this is just for example, please adjust your logic)\nfinal List&lt;Categories&gt; categories = QueryUtils.queryAll(byProjectKeyCategoriesGet,\n            (categories) -&gt; categories)\n            .thenApply(lists -&gt; lists.stream().flatMap(List::stream).collect(Collectors.toList()))\n            .toCompletableFuture()\n            .join();\n</code></pre> <p>In order to transform and map the <code>Category</code> to <code>CategoryDraft</code>,  Utils method <code>toCategoryDrafts</code> requires <code>projectApiRoot</code>, implementation of <code>ReferenceIdToKeyCache</code> and <code>categories</code> as parameters. For cache implementation, You can use your own cache implementation or use the class in the library - which implements the cache using caffeine library with an LRU (Least Recently Used) based cache eviction strategy<code>CaffeineReferenceIdToKeyCacheImpl</code>. Example as shown below:</p> <pre><code>//Implement the cache using library class.\nfinal ReferenceIdToKeyCache referenceIdToKeyCache = new CaffeineReferenceIdToKeyCacheImpl();\n\n//For every reference fetch its key using id, cache it and map from Category to CategoryDraft. With help of the cache same reference keys can be reused.\nfinal CompletableFuture&lt;List&lt;CategoryDraft&gt;&gt; categoryDrafts = CategoryTransformUtils.toCategoryDrafts(client, referenceIdToKeyCache, categories);\n</code></pre>"},{"location":"usage/CATEGORY_SYNC/#syncing-from-an-external-resource","title":"Syncing from an external resource","text":"<ul> <li>When syncing from an external resource, <code>ResourceIdentifier</code>s with their <code>key</code>s have to be supplied as following example:</li> </ul> <pre><code>final CategoryDraft categoryDraft = \n    CategoryDraftBuilder.of(ofEnglish(\"name\"), ofEnglish(\"slug\"))\n                        .parent(ResourceIdentifier.ofKey(\"parent-category-key\")) // note that parent provided with key\n                        .custom(CustomFieldsDraft.ofTypeKeyAndJson(\"type-key\", emptyMap())) // note that custom type provided with key\n                        .assets(singletonList(\n                            AssetDraftBuilder.of(emptyList(), LocalizedString.ofEnglish(\"asset-name\"))\n                                             .custom(CustomFieldsDraft.ofTypeKeyAndJson(\"type-key\", emptyMap())) // note that custom type provided with key\n                                             .key(\"asset-key\")\n                                             .build()\n                        ))\n                        .build();\n</code></pre> <pre><code>final CustomFieldsDraft customFields = CustomFieldsDraftBuilder.of()\n                                       .type(TypeResourceIdentifierBuilder.of().key(\"type-key\").build()) // note that custom type provided with key\n                                       .fields(FieldContainerBuilder.of().values(Collections.emptyMap()).build())\n                                       .build();\n\nfinal CategoryResourceIdentifier categoryResourceIdentifier = CategoryResourceIdentifierBuilder.of()\n        .key(\"category-key\")\n        .build();\n\nfinal CategoryDraft categoryDraft = CategoryDraftBuilder.of()\n        .key(\"category-key\")\n        .slug(LocalizedString.of(Locale.ENGLISH, \"category-slug\"))\n        .name(LocalizedString.of(Locale.ENGLISH, \"category-name\"))\n        .description(LocalizedString.of(Locale.ENGLISH, \"category-description\"))\n        .externalId(\"external-id\")\n        .metaDescription(LocalizedString.of(Locale.ENGLISH, \"meta-description\"))\n        .metaKeywords(LocalizedString.of(Locale.ENGLISH, \"meta-keywords\"))\n        .metaTitle(LocalizedString.of(Locale.ENGLISH, \"meta-title\"))\n        .orderHint(\"order-hint\")\n        .custom(customFields)\n        .parent(categoryResourceIdentifier)\n        .build()\n</code></pre>"},{"location":"usage/CATEGORY_SYNC/#syncoptions","title":"SyncOptions","text":"<p>After the <code>ProjectApiRoot</code> is set up, a <code>CategorySyncOptions</code> should be built as follows: <pre><code>// instantiating a CategorySyncOptions\nfinal CategorySyncOptions categorySyncOptions = CategorySyncOptionsBuilder.of(projectApiRoot).build();\n</code></pre></p> <p><code>SyncOptions</code> is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:</p>"},{"location":"usage/CATEGORY_SYNC/#errorcallback","title":"errorCallback","text":"<p>A callback that is called whenever an error event occurs during the sync process. Each resource executes its own  error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the  following context about the error-event:</p> <ul> <li>sync exception</li> <li>category draft from the source</li> <li>category of the target project (only provided if an existing category could be found)</li> <li>the update-actions, which failed (only provided if an existing category could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(CategorySync.class);\n final CategorySyncOptions categorySyncOptions = CategorySyncOptionsBuilder\n         .of(projectApiRoot)\n         .errorCallback((syncException, draft, category, updateActions) -&gt; \n            logger.error(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/CATEGORY_SYNC/#warningcallback","title":"warningCallback","text":"<p>A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own  warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the  following context about the warning message:</p> <ul> <li>sync exception</li> <li>category draft from the source </li> <li>category of the target project (only provided if an existing category could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(CategorySync.class);\n final CategorySyncOptions categorySyncOptions = CategorySyncOptionsBuilder\n         .of(projectApiRoot)\n         .warningCallback((syncException, draft, category, updateActions) -&gt; \n            logger.warn(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/CATEGORY_SYNC/#beforeupdatecallback","title":"beforeUpdateCallback","text":"<p>During the sync process if a target category and a category draft are matched, this callback can be used to  intercept the update request just before it is sent to commercetools platform. This allows the user to modify  update actions array with custom actions or discard unwanted actions. The callback provides the following information :</p> <ul> <li>category draft from the source</li> <li>category from the target project</li> <li>update actions that were calculated after comparing both</li> </ul> <pre><code>// Example: Ignore update actions that change category name\nfinal TriFunction&lt;\n        List&lt;CategoryUpdateAction&gt;, CategoryDraft, Category, List&lt;CategoryUpdateAction&gt;&gt; \n            beforeUpdateCategoryCallback =\n            (updateActions, newCategoryDraft, oldCategory) -&gt;  updateActions.stream()\n                    .filter(updateAction -&gt; !(updateAction instanceof CategoryChangeNameAction))\n                    .collect(Collectors.toList());\n\nfinal CategorySyncOptions categorySyncOptions = \n        CategorySyncOptionsBuilder.of(projectApiRoot).beforeUpdateCallback(beforeUpdateCategoryCallback).build();\n</code></pre>"},{"location":"usage/CATEGORY_SYNC/#beforecreatecallback","title":"beforeCreateCallback","text":"<p>During the sync process if a category draft should be created, this callback can be used to intercept  the create request just before it is sent to commercetools platform.  It contains following information : </p> <ul> <li>category draft that should be created</li> </ul> <p>Please refer to example in product sync document.</p>"},{"location":"usage/CATEGORY_SYNC/#batchsize","title":"batchSize","text":"<p>A number that could be used to set the batch size with which categories are fetched and processed, as categories are obtained from the target project on commercetools platform in batches for better performance. The  algorithm accumulates up to <code>batchSize</code> resources from the input list, then fetches the corresponding categories from the target project on commecetools platform in a single request. Playing with this option can slightly improve or  reduce processing speed. If it is not set, the default batch size is 50 for category sync.</p> <pre><code>final CategorySyncOptions categorySyncOptions = \n         CategorySyncOptionsBuilder.of(projectApiRoot).batchSize(30).build();\n</code></pre>"},{"location":"usage/CATEGORY_SYNC/#cachesize","title":"cacheSize","text":"<p>In the service classes of the commercetools-sync-java library, we have implemented an in-memory LRU cache to store a map used for the reference resolution of the library. The cache reduces the reference resolution based calls to the commercetools API as the required fields of a resource will be fetched only one time. This cached fields then might be used by another resource referencing the already resolved resource instead of fetching from commercetools API. It turns out, having the in-memory LRU cache will improve overall performance of the sync library and commercetools API. which will improve the overall performance of the sync and commercetools API.</p> <p>Playing with this option can change the memory usage of the library. If it is not set, the default cache size is <code>10.000</code> for category sync. <pre><code>final CategorySyncOptions categorySyncOptions = \n         CategorySyncOptionsBuilder.of(projectApiRoot).cacheSize(5000).build(); \n</code></pre></p>"},{"location":"usage/CATEGORY_SYNC/#running-the-sync","title":"Running the sync","text":"<p>After all the aforementioned points in the previous section have been fulfilled, to run the sync: <pre><code>// instantiating a category sync\nfinal CategorySync categorySync = new CategorySync(categorySyncOptions);\n\n// execute the sync on your list of categories\nCompletionStage&lt;CategorySyncStatistics&gt; syncStatisticsStage = categorySync.sync(categoryDrafts);\n</code></pre> The result of the completing the <code>syncStatisticsStage</code> in the previous code snippet contains a <code>CategorySyncStatistics</code> which contains all the stats of the sync process; which includes a report message, the total number of updated, created,  failed, processed categories and the processing time of the last sync batch in different time units and in a human-readable format.</p> <pre><code>final CategorySyncStatistics stats = syncStatisticsStage.toCompletebleFuture().join();\nstats.getReportMessage(); \n/*\"Summary: 2000 categories were processed in total (1000 created, 995 updated, 5 failed to sync and 0 categories with a missing parent).\"*/\n</code></pre> <p>Note The statistics object contains the processing time of the last batch only. This is due to two reasons:</p> <ol> <li>The sync processing time should not take into account the time between supplying batches to the sync. </li> <li>It is not known by the sync which batch is going to be the last one supplied.</li> </ol>"},{"location":"usage/CATEGORY_SYNC/#more-examples-of-how-to-use-the-sync","title":"More examples of how to use the sync","text":"<ol> <li>Sync from another CTP project as a source.</li> <li>Sync from an external source.</li> </ol> <p>Make sure to read the Important Usage Tips for optimal performance.</p>"},{"location":"usage/CATEGORY_SYNC/#build-all-update-actions","title":"Build all update actions","text":"<p>A utility method provided by the library to compare a Category with a new CategoryDraft and results in a list of category update actions.  <pre><code>final List&lt;CategoryUpdateAction&gt; updateActions = CategorySyncUtils.buildActions(category, categoryDraft, categorySyncOptions);\n</code></pre></p> <p>Examples of its usage can be found in the tests here.</p>"},{"location":"usage/CATEGORY_SYNC/#build-particular-update-actions","title":"Build particular update action(s)","text":"<p>Utility methods provided by the library to compare the specific fields of a Category and a new CategoryDraft, and in turn, build  the update action. One example is the <code>buildChangeNameUpdateAction</code> which compares names: <pre><code>final Optional&lt;CategoryUpdateAction&gt; updateAction = CategoryUpdateActionUtils.buildChangeNameUpdateAction(oldCategory, categoryDraft);\n</code></pre> More examples of those utils for different fields can be found here.</p>"},{"location":"usage/CATEGORY_SYNC/#migration-guide","title":"Migration Guide","text":"<p>The category-sync uses the JVM-SDK-V2, therefore ensure you Install JVM SDK module <code>commercetools-sdk-java-api</code> with any HTTP client module. The default one is <code>commercetools-http-client</code>.</p> <pre><code> &lt;!-- Sample maven pom.xml --&gt;\n &lt;properties&gt;\n     &lt;commercetools.version&gt;LATEST&lt;/commercetools.version&gt;\n &lt;/properties&gt;\n\n &lt;dependencies&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-http-client&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-sdk-java-api&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n &lt;/dependencies&gt;\n</code></pre>"},{"location":"usage/CATEGORY_SYNC/#client-configuration-and-creation","title":"Client configuration and creation","text":"<p>For client creation use ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. If you have custom requirements for the client creation make sure to replace <code>SphereClientFactory</code> with <code>ApiRootBuilder</code> as described in this Migration Document.</p>"},{"location":"usage/CATEGORY_SYNC/#signature-of-categorysyncoptions","title":"Signature of CategorySyncOptions","text":"<p>As models and update actions have changed in the JVM-SDK-V2 the signature of SyncOptions is different. It's constructor now takes a <code>ProjectApiRoot</code> as first argument. The callback functions are signed with <code>CategoryDraft</code>, <code>Category</code> and <code>CategoryUpdateAction</code> from <code>package com.commercetools.api.models.category.*</code></p> <p>Note: Type <code>UpdateAction&lt;Category&gt;</code> has changed to <code>CategoryUpdateAction</code>. Make sure you create and supply a specific CategoryUpdateAction in <code>beforeUpdateCallback</code>. For that you can use the library-utilities or use a JVM-SDK builder (see also):</p> <pre><code>// Example: Create a category update action to change name taking the 'newName' of the categoryDraft\n    final Function&lt;LocalizedString, CategoryUpdateAction&gt; createBeforeUpdateAction =\n        (newName) -&gt; CategoryChangeNameAction.builder().name(newName).build();\n\n// Add the change name action to the list of update actions before update is executed\n    final TriFunction&lt;\n            List&lt;CategoryUpdateAction&gt;, CategoryDraft, Category, List&lt;CategoryUpdateAction&gt;&gt;\n        beforeUpdateCategoryCallback =\n            (updateActions, newCategoryDraft, oldCategory) -&gt; {\n              final CategoryUpdateAction beforeUpdateAction =\n                  createBeforeUpdateAction.apply(newCategoryDraft.getName());\n              updateActions.add(beforeUpdateAction);\n              return updateActions;\n            };\n</code></pre>"},{"location":"usage/CATEGORY_SYNC/#build-categorydraft-syncing-from-external-project","title":"Build CategoryDraft (syncing from external project)","text":"<p>The category-sync expects a list of <code>CategoryDraft</code>s to process. If you use java-sync-library to sync your categories from any external system into a commercetools platform project you have to convert your data into CTP compatible <code>CategoryDraft</code> type. This was done in previous version using <code>DraftBuilder</code>s. The V2 SDK do not have inheritance for <code>DraftBuilder</code> classes but the differences are minor and you can replace it easily. Here's an example:</p> <p><pre><code>// CategoryDraftBuilder in v1 takes parameters 'name' and 'slug'\nfinal CategoryDraft categoryDraft =\n              CategoryDraftBuilder\n                      .of(ofEnglish(\"name\"), ofEnglish(\"slug\"))\n                      .key(\"category-key\")\n                      .build();\n\n// CategoryDraftBuilder in v2\nfinal CategoryDraft categoryDraft =\n              CategoryDraftBuilder\n                      .of()\n                      .name(LocalizedString.ofEnglish(\"name\"))\n                      .slug(LocalizedString.ofEnglish(\"slug\"))\n                      .key(\"category-key\")\n                      .build();\n</code></pre> For more information, see the Guide to replace DraftBuilders.</p>"},{"location":"usage/CATEGORY_SYNC/#query-for-categories-syncing-from-ctp-project","title":"Query for Categories (syncing from CTP project)","text":"<p>If you sync categories between different commercetools projects you probably use CategoryTransformUtils#toCategoryDrafts to transform <code>Category</code> into <code>CategoryDraft</code> which can be used by the category-sync. However, if you need to query <code>Categories</code> from a commercetools project instead of passing <code>CategoryQuery</code>s to a <code>sphereClient</code>, create (and execute) requests directly from the <code>apiRoot</code>. Here's an example:</p> <p><pre><code>// SDK v1: CategoryQuery to fetch all categories\nfinal CategoryQuery query = CategoryQuery.of();\n\nfinal PagedQueryResult&lt;Category&gt; pagedQueryResult = sphereClient.executeBlocking(query);\n\n// SDK v2: Create and execute query to fetch all categories in one line\nfinal CategoryPagedQueryResponse result = apiRoot.categories().get().executeBlocking().getBody();\n</code></pre> Read more about querying resources.</p>"},{"location":"usage/CATEGORY_SYNC/#jvm-sdk-v2-migration-guide","title":"JVM-SDK-V2 migration guide","text":"<p>On any other needs to migrate your project using jvm-sdk-v2 please refer to it's Migration Guide. </p>"},{"location":"usage/CLEANUP_GUIDE/","title":"Cleanup of old unresolved reference custom objects","text":"<p>TODO</p>"},{"location":"usage/CUSTOMER_SYNC/","title":"Customer Sync","text":"<p>The module used for importing/syncing Customers into a commercetools project.  It also provides utilities for generating update actions based on the comparison of a Customer  against a CustomerDraft.</p> <ul> <li>Usage</li> <li>Prerequisites<ul> <li>ProjectApiRoot</li> <li>Required Fields</li> <li>Reference Resolution</li> <li>Syncing from a commercetools project</li> <li>Syncing from an external resource</li> <li>SyncOptions</li> <li>errorCallback</li> <li>warningCallback</li> <li>beforeUpdateCallback</li> <li>beforeCreateCallback</li> <li>batchSize</li> <li>cacheSize</li> </ul> </li> <li>Running the sync<ul> <li>More examples of how to use the sync</li> </ul> </li> <li>Build all update actions</li> <li>Build particular update action(s)</li> <li>Caveats</li> </ul>"},{"location":"usage/CUSTOMER_SYNC/#usage","title":"Usage","text":""},{"location":"usage/CUSTOMER_SYNC/#prerequisites","title":"Prerequisites","text":""},{"location":"usage/CUSTOMER_SYNC/#projectapiroot","title":"ProjectApiRoot","text":"<p>Use the ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. To create <code>ClientCredentials</code> which are required for creating a client please use the <code>ClientCredentialsBuilder</code> provided in java-sdk-v2 Client OAUTH2 package If you have custom requirements for the client creation, have a look into the Important Usage Tips.</p> <pre><code>final ClientCredentials clientCredentials =\n        new ClientCredentialsBuilder()\n            .withClientId(\"client-id\")\n            .withClientSecret(\"client-secret\")\n            .withScopes(\"scopes\")\n            .build();\nfinal ProjectApiRoot apiRoot = ClientConfigurationUtils.createClient(\"project-key\", clientCredentials, \"auth-url\", \"api-url\");\n</code></pre>"},{"location":"usage/CUSTOMER_SYNC/#required-fields","title":"Required Fields","text":"<p>The following fields are required to be set in, otherwise, they won't be matched by sync:</p> Draft Required Fields Note CustomerDraft <code>key</code> Also, the customers in the target project are expected to have the <code>key</code> fields set. CustomerDraft <code>address.key</code> Every customer BaseAddress needs a unique key to match the existing <code>Address</code> with the new <code>AddressDraft</code>."},{"location":"usage/CUSTOMER_SYNC/#reference-resolution","title":"Reference Resolution","text":"<p>In commercetools, a reference can be created by providing the key instead of the ID with the type ResourceIdentifier. When the reference key is provided with a <code>ResourceIdentifier</code>, the sync will resolve the resource with the given key and use the ID of the found resource to create or update a reference. Therefore, in order to resolve the actual ids of those references in the sync process, <code>ResourceIdentifier</code>s with their <code>key</code>s have to be supplied. </p> Reference Field Type <code>customerGroup</code> CustomerGroupResourceIdentifier <code>stores</code> List of StoreResourceIdentifier <code>custom.type</code> TypeResourceIdentifier <p>Note that a reference without the key field will be considered as an existing resource on the target commercetools project and the library will issue an update/create an API request without reference resolution.</p>"},{"location":"usage/CUSTOMER_SYNC/#syncing-from-a-commercetools-project","title":"Syncing from a commercetools project","text":"<p>When syncing from a source commercetools project, you can use <code>toCustomerDrafts</code>  method that transforms(resolves by querying and caching key-id pairs) and maps from a <code>Customer</code> to <code>CustomerDraft</code> using cache in order to make them ready for reference resolution by the sync, for example: </p> <pre><code>// Build ByProjectKeyCustomersGet for fetching customers from a source CTP project without any references expanded for the sync:\nfinal ByProjectKeyCustomersGet byProjectKeyCustomersGet = client.customers().get();\n\n// Query all customers (NOTE this is just for example, please adjust your logic)\nfinal List&lt;Customer&gt; customers = QueryUtils.queryAll(byProjectKeyCustomersGet,\n            (customers) -&gt; customers)\n            .thenApply(lists -&gt; lists.stream().flatMap(List::stream).collect(Collectors.toList()))\n            .toCompletableFuture()\n            .join();\n</code></pre> <p>In order to transform and map the <code>Customer</code> to <code>CustomerDraft</code>,  Utils method <code>toCustomerDrafts</code> requires <code>projectApiRoot</code>, implementation of <code>ReferenceIdToKeyCache</code> and <code>customers</code> as parameters. For cache implementation, You can use your own cache implementation or use the class in the library - which implements the cache using caffeine library with an LRU (Least Recently Used) based cache eviction strategy<code>CaffeineReferenceIdToKeyCacheImpl</code>. Example as shown below:</p> <pre><code>//Implement the cache using library class.\nfinal ReferenceIdToKeyCache referenceIdToKeyCache = new CaffeineReferenceIdToKeyCacheImpl();\n\n//For every reference fetch its key using id, cache it and map from Customer to CustomerDraft. With help of the cache same reference keys can be reused.\nCompletableFuture&lt;List&lt;CustomerDraft&gt;&gt; customerDrafts = CustomerTransformUtils.toCustomerDrafts(client, referenceIdToKeyCache, customers);\n</code></pre>"},{"location":"usage/CUSTOMER_SYNC/#syncing-from-an-external-resource","title":"Syncing from an external resource","text":"<ul> <li>When syncing from an external resource, <code>ResourceIdentifier</code>s with their <code>key</code>s have to be supplied as following example:</li> </ul> <pre><code>final CustomFieldsDraft customFields = CustomFieldsDraftBuilder.of()\n                                       .type(TypeResourceIdentifierBuilder.of().key(\"type-key\").build()) // note that custom type provided with key\n                                       .fields(FieldContainerBuilder.of().values(Collections.emptyMap()).build())\n                                       .build();\nfinal AddressDraft address = AddressDraftBuilder.of()\n                                                .key(\"address-key-1\") // note that addresses has to be provided with their keys\n                                                .country(\"DE\")\n                                                .build();\nfinal CustomerDraft customerDraft = CustomerDraftBuilder.of()\n        .email(\"email@example.com\")\n        .password(\"password\")\n        .key(\"customer-key\")\n        .customerGroup(CustomerGroupRescourceIdentifierBuilder.of().key(\"customer-group-key\").build()) // note that customergroup reference provided with key\n        .addresses(address)\n        .custom(customFields)\n        .stores(StoresResourceIdentifierBuilder.of().key(\"store-key1\").build(), StoresResourceIdentifierBuilder.of().key(\"store-key2\").build()) // note that store reference provided with key\n        .build();\n</code></pre>"},{"location":"usage/CUSTOMER_SYNC/#syncoptions","title":"SyncOptions","text":"<p>After the <code>ProjectApiRoot</code> is set up, a <code>CustomerSyncOptions</code> should be built as follows: <pre><code>// instantiating a CustomerSyncOptions\nfinal CustomerSyncOptions customerSyncOptions = CustomerSyncOptionsBuilder.of(projectApiRoot).build();\n</code></pre></p> <p><code>SyncOptions</code> is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:</p>"},{"location":"usage/CUSTOMER_SYNC/#errorcallback","title":"errorCallback","text":"<p>A callback that is called whenever an error event occurs during the sync process. Each resource executes its own  error-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the error-event:</p> <ul> <li>sync exception</li> <li>customer draft from the source</li> <li>customer of the target project (only provided if an existing customer could be found)</li> <li>the update-actions, which failed (only provided if an existing customer could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(CustomerSync.class);\n final CustomerSyncOptions customerSyncOptions = CustomerSyncOptionsBuilder\n         .of(projectApiRoot)\n         .errorCallback((syncException, draft, customer, updateActions) -&gt; \n            logger.error(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/CUSTOMER_SYNC/#warningcallback","title":"warningCallback","text":"<p>A callback is called whenever a warning event occurs during the sync process. Each resource executes its own  warning-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the warning message:</p> <ul> <li>sync exception</li> <li>customer draft from the source </li> <li>customer of the target project (only provided if an existing customer could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(CustomerSync.class);\n final CustomerSyncOptions customerSyncOptions = CustomerSyncOptionsBuilder\n         .of(projectApiRoot)\n         .warningCallback((syncException, draft, customer) -&gt; \n            logger.warn(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/CUSTOMER_SYNC/#beforeupdatecallback","title":"beforeUpdateCallback","text":"<p>During the sync process, if a target customer and a customer draft are matched, this callback can be used to  intercept the update request just before it is sent to the commercetools platform. This allows the user to modify  update actions array with custom actions or discard unwanted actions. The callback provides the following information :</p> <ul> <li>customer draft from the source</li> <li>customer from the target project</li> <li>update actions that were calculated after comparing both</li> </ul> <pre><code>// Example: Ignore update actions which contain setting of lastName action\nfinal TriFunction&lt;List&lt;CustomerUpdateAction&gt;, CustomerDraft, Customer,\n                  List&lt;CustomerUpdateAction&gt;&gt; beforeUpdateCallback, =\n            (updateActions, newCustomerDraft, oldCustomer) -&gt;  updateActions\n                    .stream()\n                    .filter(updateAction -&gt; !(updateAction instanceof CustomerSetLastNameActionImpl))\n                    .collect(Collectors.toList());\n\nfinal CustomerSyncOptions customerSyncOptions = CustomerSyncOptionsBuilder\n                    .of(projectApiRoot)\n                    .beforeUpdateCallback(beforeUpdateCallback)\n                    .build();\n</code></pre>"},{"location":"usage/CUSTOMER_SYNC/#beforecreatecallback","title":"beforeCreateCallback","text":"<p>During the sync process, if a customer draft should be created, this callback can be used to intercept the create request just before it is sent to the commercetools platform.  It contains the following information : </p> <ul> <li>customer draft that should be created</li> </ul> <p>Please refer to the example in the product sync document.</p>"},{"location":"usage/CUSTOMER_SYNC/#batchsize","title":"batchSize","text":"<p>A number that could be used to set the batch size with which customers are fetched and processed, as customers are obtained from the target project on the commercetools platform in batches for better performance. The algorithm accumulates up to <code>batchSize</code> resources from the input list, then fetches the corresponding customers from the target project on the commercetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for customer sync.</p> <pre><code>final CustomerSyncOptions customerSyncOptions = \n         CustomerSyncOptionsBuilder.of(projectApiRoot).batchSize(30).build();\n</code></pre>"},{"location":"usage/CUSTOMER_SYNC/#cachesize","title":"cacheSize","text":"<p>In the service classes of the commercetools-sync-java library, we have implemented an in-memory LRU cache to store a map used for the reference resolution of the library. The cache reduces the reference resolution based calls to the commercetools API as the required fields of a resource will be fetched only one time. These cached fields then might be used by another resource referencing the already resolved resource instead of fetching from commercetools API. It turns out, having the in-memory LRU cache will improve the overall performance of the sync library and commercetools API. which will improve the overall performance of the sync and commercetools API.</p> <p>Playing with this option can change the memory usage of the library. If it is not set, the default cache size is <code>10.000</code> for customer sync.</p> <pre><code>final CustomerSyncOptions customerSyncOptions = \n         CustomerSyncOptionsBuilder.of(projectApiRoot).cacheSize(5000).build();\n</code></pre>"},{"location":"usage/CUSTOMER_SYNC/#running-the-sync","title":"Running the sync","text":"<p>When all prerequisites are fulfilled, follow those steps to run the sync:</p> <p><pre><code>// instantiating a customer sync\nfinal CustomerSync customerSync = new CustomerSync(customerSyncOptions);\n\n// execute the sync on your list of customers\nCompletionStage&lt;CustomerSyncStatistics&gt; syncStatisticsStage = customerSync.sync(customerDrafts);\n</code></pre> The result of completing the <code>syncStatisticsStage</code> in the previous code snippet contains a <code>CustomerSyncStatistics</code> which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed customers, and the processing time of the last sync batch in different time units and in a human-readable format.</p> <pre><code>final CustomerSyncStatistics stats = syncStatisticsStage.toCompletebleFuture().join();\nstats.getReportMessage();\n/*\"Summary: 100 customers were processed in total (11 created, 87 updated, 2 failed to sync).\"*/\n</code></pre> <p>Note The statistics object contains the processing time of the last batch only. This is due to two reasons:</p> <ol> <li>The sync processing time should not take into account the time between supplying batches to the sync.</li> <li>It is not known by the sync which batch is going to be the last one supplied.</li> </ol>"},{"location":"usage/CUSTOMER_SYNC/#more-examples-of-how-to-use-the-sync","title":"More examples of how to use the sync","text":"<p>Sync from an external source.</p> <p>Make sure to read the Important Usage Tips for optimal performance.</p>"},{"location":"usage/CUSTOMER_SYNC/#build-all-update-actions","title":"Build all update actions","text":"<p>A utility method provided by the library to compare a <code>Customer</code> to a new <code>CustomerDraft</code>. The results are collected in a list of customer update actions. <pre><code>List&lt;CustomerUpdateAction&gt; updateActions = CustomerSyncUtils.buildActions(customer, customerDraft, customerSyncOptions);\n</code></pre></p>"},{"location":"usage/CUSTOMER_SYNC/#build-particular-update-actions","title":"Build particular update action(s)","text":"<p>The library provides utility methods to compare specific fields of a <code>Customer</code> and a new <code>CustomerDraft</code>, and builds the update action(s) as a result. One example is the <code>buildChangeEmailUpdateAction</code> which compare email addresses: <pre><code>Optional&lt;CustomerUpdateAction&gt; updateAction = CustomerUpdateActionUtils.buildChangeEmailUpdateAction(oldCustomer, customerDraft);\n</code></pre></p> <p>More examples for particular update actions can be found in the test scenarios for CustomerUpdateActionUtils and AddressUpdateActionUtils.</p>"},{"location":"usage/CUSTOMER_SYNC/#caveats","title":"Caveats","text":"<p>The library does not support the synchronization of the <code>password</code> field of existing customers. For customers that do not exist in the project, a password will be created with the given customer draft\u2019s password.</p>"},{"location":"usage/CUSTOM_OBJECT_SYNC/","title":"Custom Object Sync","text":"<p>Module used for importing/syncing CustomObject into a commercetools project.  It also provides utilities for correlating a custom object to a given custom object draft based on the  comparison of a CustomObject  against a CustomObjectDraft.</p> <ul> <li>Usage</li> <li>Prerequisites<ul> <li>ProjectApiRoot</li> <li>Required Fields</li> <li>SyncOptions</li> <li>errorCallback</li> <li>warningCallback</li> <li>beforeUpdateCallback</li> <li>beforeCreateCallback</li> <li>batchSize</li> <li>cacheSize</li> </ul> </li> <li>Running the sync<ul> <li>More examples of how to use the sync</li> </ul> </li> <li>Migration Guide</li> <li>Client configuration and creation</li> <li>Signature of CustomObjectSyncOptions</li> <li>Build CustomObjectDraft (syncing from external project)</li> <li>Query for CustomObjects</li> <li>JVM-SDK-V2 migration guide</li> </ul>"},{"location":"usage/CUSTOM_OBJECT_SYNC/#usage","title":"Usage","text":""},{"location":"usage/CUSTOM_OBJECT_SYNC/#prerequisites","title":"Prerequisites","text":""},{"location":"usage/CUSTOM_OBJECT_SYNC/#projectapiroot","title":"ProjectApiRoot","text":"<p>Use the ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. To create <code>ClientCredentials</code> which are required for creating a client please use the <code>ClientCredentialsBuilder</code> provided in java-sdk-v2 Client OAUTH2 package If you have custom requirements for the client creation, have a look into the Important Usage Tips.</p> <pre><code>final ClientCredentials clientCredentials =\n        new ClientCredentialsBuilder()\n        .withClientId(\"client-id\")\n        .withClientSecret(\"client-secret\")\n        .withScopes(\"scopes\")\n        .build();\nfinal ProjectApiRoot apiRoot = ClientConfigurationUtils.createClient(\"project-key\", clientCredentials, \"auth-url\", \"api-url\");\n</code></pre>"},{"location":"usage/CUSTOM_OBJECT_SYNC/#required-fields","title":"Required Fields","text":"<p>The following fields are required to be set in, otherwise, they won't be matched by sync:</p> Draft Required Fields Note CustomObjectDraft <code>key</code> Also, the custom objects in the target project are expected to have the <code>key</code> fields set. CustomObjectDraft <code>container</code> Also, the custom objects in the target project are expected to have the <code>container</code> fields set."},{"location":"usage/CUSTOM_OBJECT_SYNC/#syncoptions","title":"SyncOptions","text":"<p>After the <code>projectApiRoot</code> is set up, a <code>CustomObjectSyncOptions</code> should be built as follows: <pre><code>// instantiating a CustomObjectSyncOptions\nfinal CustomObjectSyncOptions customObjectSyncOptions = CustomObjectSyncOptionsBuilder.of(projectApiRoot).build();\n</code></pre></p> <p><code>SyncOptions</code> is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:</p>"},{"location":"usage/CUSTOM_OBJECT_SYNC/#errorcallback","title":"errorCallback","text":"<p>A callback that is called whenever an error event occurs during the sync process. Each resource executes its own  error-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the error-event:</p> <ul> <li>sync exception</li> <li>custom object draft from the source</li> <li>custom object of the target project (only provided if an existing custom object could be found)</li> <li>a fake list of update actions, as custom objects API does not provide update actions. NoopResourceUpdateAction.java</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(CustomObjectSync.class);\n final CustomObjectSyncOptions customObjectSyncOptions = CustomObjectSyncOptionsBuilder\n         .of(projectApiRoot)\n         .errorCallback((syncException, draft, customObject, updateActions) -&gt; \n            logger.error(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/CUSTOM_OBJECT_SYNC/#warningcallback","title":"warningCallback","text":"<p>A callback is called whenever a warning event occurs during the sync process. Each resource executes its own  warning-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the warning message:</p> <ul> <li>sync exception</li> <li>custom object draft from the source </li> <li>custom object of the target project (only provided if an existing custom object could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(CustomObjectSync.class);\n final CustomObjectSyncOptions customObjectSyncOptions = CustomObjectSyncOptionsBuilder\n         .of(projectApiRoot)\n         .warningCallback((syncException, draft, customObject) -&gt; \n            logger.warn(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/CUSTOM_OBJECT_SYNC/#beforeupdatecallback","title":"beforeUpdateCallback","text":"<p>In theory, <code>CustomObjectSyncOptions</code> provides callback before update operation. User can customize their own callback and inject into sync options. However, in the actual case, <code>beforeUpdateCallback</code>is not triggered in the custom object sync process. When the new custom object draft has the same key and container as an existing custom object but different in custom object values,  the sync process automatically performs the create/update operation. The value of a corresponding custom object in the target project is overwritten. This approach is different from other resources and no update action is involved.</p> <p>Also see the API documentation of Create-or-update-customobject</p>"},{"location":"usage/CUSTOM_OBJECT_SYNC/#beforecreatecallback","title":"beforeCreateCallback","text":"<p>During the sync process, if a custom object draft should be created, this callback can be used to intercept the create request just before it is sent to the commercetools platform.  It contains the following information : </p> <ul> <li>custom object draft that should be created</li> </ul> <p>Please refer to example in product sync document.</p>"},{"location":"usage/CUSTOM_OBJECT_SYNC/#batchsize","title":"batchSize","text":"<p>A number that could be used to set the batch size with which custom objects are fetched and processed, as custom objects are obtained from the target project on the commercetools platform in batches for better performance. The algorithm accumulates up to <code>batchSize</code> resources from the input list, then fetches the corresponding custom objects from the target project on the commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for custom object sync.</p> <pre><code>final CustomObjectSyncOptions customObjectSyncOptions = \n         CustomObjectSyncOptionsBuilder.of(projectApiRoot).batchSize(30).build();\n</code></pre>"},{"location":"usage/CUSTOM_OBJECT_SYNC/#cachesize","title":"cacheSize","text":"<p>In the service classes of the commercetools-sync-java library, we have implemented an in-memory LRU cache to store a map used for the reference resolution of the library. The cache reduces the reference resolution based calls to the commercetools API as the required fields of a resource will be fetched only one time. These cached fields then might be used by another resource referencing the already resolved resource instead of fetching from commercetools API. It turns out, having the in-memory LRU cache will improve the overall performance of the sync library and commercetools API. which will improve the overall performance of the sync and commercetools API.</p> <p>Playing with this option can change the memory usage of the library. If it is not set, the default cache size is <code>10.000</code> for custom object sync.</p> <pre><code>final CustomObjectSyncOptions customObjectSyncOptions = \n         CustomObjectSyncOptionsBuilder.of(projectApiRoot).cacheSize(5000).build();\n</code></pre>"},{"location":"usage/CUSTOM_OBJECT_SYNC/#running-the-sync","title":"Running the sync","text":"<p>After all the aforementioned points in the previous section have been fulfilled, to run the sync: <pre><code>// instantiating a CustomObjectSync\nfinal CustomObjectSync customObjectSync = new CustomObjectSync(customObjectSyncOptions);\n\n// execute the sync on your list of custom object drafts\nCompletionStage&lt;CustomObjectSyncStatistics&gt; syncStatisticsStage = customObjectSync.sync(customObjectDrafts);\n</code></pre> The result of completing the <code>syncStatisticsStage</code> in the previous code snippet contains a <code>CustomObjectSyncStatistics</code> which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed custom objects and the processing time of the last sync batch in different time units and in a human-readable format.</p> <pre><code>final CustomObjectSyncStatistics stats = syncStatisticsStage.toCompletebleFuture().join();\nstats.getReportMessage();\n/*\"Summary: 2000 custom objects were processed in total (1000 created, 995 updated, 5 failed to sync).\"*/\n</code></pre> <p>Note The statistics object contains the processing time of the last batch only. This is due to two reasons:</p> <ol> <li>The sync processing time should not take into account the time between supplying batches to the sync.</li> <li>It is not known by the sync which batch is going to be the last one supplied.</li> </ol>"},{"location":"usage/CUSTOM_OBJECT_SYNC/#more-examples-of-how-to-use-the-sync","title":"More examples of how to use the sync","text":"<ul> <li>Sync from an external source.</li> </ul> <p>Make sure to read the Important Usage Tips for optimal performance.</p>"},{"location":"usage/CUSTOM_OBJECT_SYNC/#migration-guide","title":"Migration Guide","text":"<p>The custom-object-sync uses the JVM-SDK-V2, therefore ensure you Install JVM SDK module <code>commercetools-sdk-java-api</code> with any HTTP client module. The default one is <code>commercetools-http-client</code>.</p> <pre><code> // Sample maven pom.xml\n &lt;properties&gt;\n     &lt;commercetools.version&gt;LATEST&lt;/commercetools.version&gt;\n &lt;/properties&gt;\n\n &lt;dependencies&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-http-client&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-sdk-java-api&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n &lt;/dependencies&gt;\n</code></pre>"},{"location":"usage/CUSTOM_OBJECT_SYNC/#client-configuration-and-creation","title":"Client configuration and creation","text":"<p>For client creation use ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. If you have custom requirements for the client creation make sure to replace <code>SphereClientFactory</code> with <code>ApiRootBuilder</code> as described in this Migration Document.</p>"},{"location":"usage/CUSTOM_OBJECT_SYNC/#signature-of-customobjectsyncoptions","title":"Signature of CustomObjectSyncOptions","text":"<p>As models and update actions have changed in the JVM-SDK-V2 the signature of SyncOptions is different. It's constructor now takes a <code>ProjectApiRoot</code> as first argument. The callback functions are signed with <code>CustomObjectDraft</code>, <code>CustomObject</code> (without type parameter as in v1) from <code>package com.commercetools.api.models.custom_object.*</code> and <code>NoopResourceUpdateAction</code> which is a fake class representing resource without update actions like custom-object.</p> <p>Note: Make sure <code>beforeUpdateCallback</code> isn't used as the sync will not trigger it in the process. Note: Further make sure on <code>errorCallback</code> to not operate on<code>NoopResourceUpdateAction</code>'s actions field as it is null.</p>"},{"location":"usage/CUSTOM_OBJECT_SYNC/#build-customobjectdraft-syncing-from-external-project","title":"Build CustomObjectDraft (syncing from external project)","text":"<p>The custom-object-sync expects a list of <code>CustomObjectDraft</code>s to process. To sync your categories from anywhere (including other CTP project) into a commercetools platform project you have to convert your data into CTP compatible <code>CategoryDraft</code> type. This was done in previous version using <code>DraftBuilder</code>s. The V2 SDK do not have inheritance for <code>DraftBuilder</code> classes but the differences are minor and you can replace it easily. Here's an example:</p> <p>Note: In v1 the value in CustomObjectDraft is of generic type and custom-object-sync was expecting <code>JsonNode</code> as value. This changed in V2 SDK and the sync-library, and value field is of type <code>Object</code> now. <pre><code>// CategoryDraft builder in v1 takes parameters 'container', 'key' and 'value'\nfinal CustomObjectDraft cutomObjectDraft =\n            CustomObjectDraft.ofUnversionedUpsert(\n            \"someContainer\",\n            \"someKey\",\n            JsonNodeFactory.instance.objectNode().put(\"json-field\", \"json-value\"));\n\n// CustomObjectDraftBuilder in v2\nfinal CustomObjectDraft newCustomObjectDraft =\n        CustomObjectDraftBuilder.of()\n            .container(\"someContainer\")\n            .key(\"someKey\")\n            .value(\"someValue\")\n            .build();\n</code></pre> For more information, see the Guide to replace DraftBuilders.</p>"},{"location":"usage/CUSTOM_OBJECT_SYNC/#query-for-customobjects","title":"Query for CustomObjects","text":"<p>If you need to query <code>CustomObjects</code> from a commercetools project instead of passing <code>CustomObjectQuery&lt;T&gt;</code>s to a <code>sphereClient</code>, create (and execute) requests directly from the <code>apiRoot</code>. Here's an example:</p> <p><pre><code>// SDK v1: CategoryQuery to fetch all categories\nfinal CustomObjectQuery&lt;JsonNode&gt; query = CustomObjectQuery.ofJsonNode();\n\nfinal PagedQueryResult&lt;CustomObject&lt;JsonNode&gt;&gt; pagedQueryResult = sphereClient.executeBlocking(query);\n\n// SDK v2: Create and execute query to fetch all custom objects in one line\nfinal CustomObjectPagedQueryResponse result = apiRoot.customObjects().get().executeBlocking().getBody();\n</code></pre> Read more about querying resources.</p>"},{"location":"usage/CUSTOM_OBJECT_SYNC/#jvm-sdk-v2-migration-guide","title":"JVM-SDK-V2 migration guide","text":"<p>On any other needs to migrate your project using jvm-sdk-v2 please refer to it's Migration Guide. </p>"},{"location":"usage/IMPORTANT_USAGE_TIPS/","title":"Important Usage Tips","text":"<ul> <li>Customized <code>ProjectApiRoot</code> Creation</li> <li>Tuning the Sync Process</li> </ul>"},{"location":"usage/IMPORTANT_USAGE_TIPS/#customized-projectapiroot-creation","title":"Customized <code>ProjectApiRoot</code> Creation","text":"<p>When creating a customized <code>ProjectApiRoot</code> the following remarks should be considered:</p> <ul> <li> <p>Limit the number of concurrent requests done to CTP. This can be done by adding a QueueMiddleware to the ApiRootBuilder QueueMiddleware</p> </li> <li> <p>Retry on 5xx errors with a retry strategy. This can be achieved by adding a RetryRequestMiddleware to the ApiRootBuilder RetryRequestMiddleware</p> </li> </ul> <p>If you have no special requirements on the client creation, then you can use the <code>ClientConfigurationUtils#createClient</code>  util which applies the best practices for <code>ProjectApiRoot</code> creation. To understand how to initialize those method arguments, please refer to the unit test</p> <p>To tune / customize your client please refer to Client Tuning</p>"},{"location":"usage/IMPORTANT_USAGE_TIPS/#tuning-the-sync-process","title":"Tuning the Sync Process","text":"<p>The sync library is not meant to be executed in a parallel fashion. For example: <pre><code>final ProductSync productSync = new ProductSync(syncOptions);\nfinal CompletableFuture&lt;ProductSyncStatistics&gt; syncFuture1 = productSync.sync(batch1).toCompletableFuture();\nfinal CompletableFuture&lt;ProductSyncStatistics&gt; syncFuture2 = productSync.sync(batch2).toCompletableFuture();\nCompletableFuture.allOf(syncFuture1, syncFuture2).join;\n</code></pre> The aforementioned example demonstrates how the library should NOT be used. The library, however, should be instead used in a sequential fashion: <pre><code>final ProductSync productSync = new ProductSync(syncOptions);\nproductSync.sync(batch1)\n           .thenCompose(result -&gt; productSync.sync(batch2))\n           .toCompletableFuture()\n           .join();\n</code></pre> By design, scaling the sync process should not be done by executing the batches themselves in parallel. However, it can be done either by:</p> <ul> <li>Changing the number of max parallel requests within the <code>projectApiRoot</code> configuration. It defines how many requests the client can execute in parallel.</li> <li>or changing the draft batch size. It defines how many drafts can one batch contains.</li> </ul> <p>The current overridable default configuration of the <code>projectApiRoot</code>  is the recommended good balance for stability and performance for the sync process.</p> <p>In order to exploit the number of <code>max parallel requests</code>, the <code>batch size</code> should have a value set that is equal or higher.</p>"},{"location":"usage/INVENTORY_SYNC/","title":"InventoryEntry Sync","text":"<p>The module used for importing/syncing InventoryEntries into a commercetools project.  It also provides utilities for generating update actions based on the comparison of a InventoryEntry  against a InventoryEntryDraft.</p> <ul> <li>Usage</li> <li>Prerequisites<ul> <li>ProjectApiRoot</li> <li>Required Fields</li> <li>Reference Resolution</li> <li>Syncing from a commercetools project</li> <li>Syncing from an external resource</li> <li>SyncOptions</li> <li>errorCallback</li> <li>warningCallback</li> <li>beforeUpdateCallback</li> <li>beforeCreateCallback</li> <li>batchSize</li> <li>cacheSize</li> <li>ensureChannels</li> </ul> </li> <li>Running the sync</li> <li>Build all update actions</li> <li>Build particular update action(s)</li> <li>Migration Guide</li> <li>Client configuration and creation</li> <li>Signature of InventorySyncOptions</li> <li>Build InventoryEntryDraft (syncing from external project)</li> <li>Query for Inventories (syncing from CTP project)</li> <li>JVM-SDK-V2 migration guide</li> </ul>"},{"location":"usage/INVENTORY_SYNC/#usage","title":"Usage","text":""},{"location":"usage/INVENTORY_SYNC/#prerequisites","title":"Prerequisites","text":""},{"location":"usage/INVENTORY_SYNC/#projectapiroot","title":"ProjectApiRoot","text":"<p>Use the ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. To create <code>ClientCredentials</code> which are required for creating a client please use the <code>ClientCredentialsBuilder</code> provided in java-sdk-v2 Client OAUTH2 package If you have custom requirements for the client creation, have a look into the Important Usage Tips.</p> <pre><code>final ClientCredentials clientCredentials =\n        new ClientCredentialsBuilder()\n        .withClientId(\"client-id\")\n        .withClientSecret(\"client-secret\")\n        .withScopes(\"scopes\")\n        .build();\nfinal ProjectApiRoot apiRoot = ClientConfigurationUtils.createClient(\"project-key\", clientCredentials, \"auth-url\", \"api-url\");\n</code></pre>"},{"location":"usage/INVENTORY_SYNC/#required-fields","title":"Required Fields","text":"<p>The following fields are required to be set in, otherwise, they won't be matched by sync:</p> Draft Required Fields Note InventoryEntryDraft <code>sku</code> Also, the inventory entries in the target project are expected to have the <code>sku</code> fields set."},{"location":"usage/INVENTORY_SYNC/#reference-resolution","title":"Reference Resolution","text":"<p>In commercetools, a reference can be created by providing the key instead of the ID with the type ResourceIdentifier. When the reference key is provided with a <code>ResourceIdentifier</code>, the sync will resolve the resource with the given key and use the ID of the found resource to create or update a reference. Therefore, in order to resolve the actual ids of those references in the sync process, <code>ResourceIdentifier</code>s with their <code>key</code>s have to be supplied. </p> Reference Field Type <code>supplyChannel</code> ChannelResourceIdentifier <code>custom.type</code> TypeResourceIdentifier <p>Note that a reference without the key field will be considered as an existing resource on the target commercetools project and the library will issue an update/create an API request without reference resolution.</p>"},{"location":"usage/INVENTORY_SYNC/#syncing-from-a-commercetools-project","title":"Syncing from a commercetools project","text":"<p>When syncing from a source commercetools project, you can use <code>toInventoryEntryDrafts</code>  method that transforms(resolves by querying and caching key-id pairs) and maps from a <code>InventoryEntry</code> to <code>InventoryEntryDraft</code> using cache in order to make them ready for reference resolution by the sync, for example: </p> <pre><code>// Build an ByProjectKeyInventoryGet for fetching inventories from a source CTP project without any references expanded for the sync:\nfinal ByProjectKeyInventoryEntriesGet inventoryEntryQuery = client.inventory().get();\n\n// Query all inventories (NOTE this is just for example, please adjust your logic)\nfinal List&lt;InventoryEntry&gt; categories = QueryUtils.queryAll(inventoryEntryQuery,\n            (inventories) -&gt; inventories)\n            .thenApply(lists -&gt; lists.stream().flatMap(List::stream).collect(Collectors.toList()))\n            .toCompletableFuture()\n            .join();\n</code></pre> <p>In order to transform and map the <code>InventoryEntry</code> to <code>InventoryEntryDraft</code>,  Utils method <code>toInventoryEntryDrafts</code> requires <code>projectApiRoot</code>, implementation of <code>ReferenceIdToKeyCache</code> and <code>inventoryEntries</code> as parameters. For cache implementation, You can use your own cache implementation or use the class in the library - which implements the cache using caffeine library with an LRU (Least Recently Used) based cache eviction strategy<code>CaffeineReferenceIdToKeyCacheImpl</code>. Example as shown below:</p> <pre><code>//Implement the cache using library class.\nfinal ReferenceIdToKeyCache referenceIdToKeyCache = new CaffeineReferenceIdToKeyCacheImpl();\n\n//For every reference fetch its key using id, cache it and map from InventoryEntry to InventoryEntryDraft. With help of the cache same reference keys can be reused.\nCompletableFuture&lt;List&lt;InventoryEntryDraft&gt;&gt; inventoryEntryDrafts = InventoryTransformUtils.toInventoryEntryDrafts(client, referenceIdToKeyCache, inventoryEntries);\n</code></pre>"},{"location":"usage/INVENTORY_SYNC/#syncing-from-an-external-resource","title":"Syncing from an external resource","text":"<ul> <li>When syncing from an external resource, <code>ResourceIdentifier</code>s with their <code>key</code>s have to be supplied as following example:</li> </ul> <pre><code>final InventoryEntryDraft inventoryEntryDraft = InventoryEntryDraftBuilder\n        .of()\n        .sku(\"sku1\")\n        .quantityOnStock(1L)\n        .custom(CustomFieldsDraftBuilder.of().type(typeResourceIdentifierBuilder -&gt; typeResourceIdentifierBuilder.key(\"type-key\")).fields(fieldContainerBuilder -&gt; fieldContainerBuilder.values(emptyMap())).build())) // note that custom type provided with key\n        .supplyChannel(ChannelResourceIdentifierBuilder.of().key(\"channel-key\").build()) // note that channel reference provided with key\n        .build();\n</code></pre>"},{"location":"usage/INVENTORY_SYNC/#syncoptions","title":"SyncOptions","text":"<p>After the <code>projectApiRoot</code> is set up, an <code>InventorySyncOptions</code> should be built as follows:  <pre><code>// instantiating a InventorySyncOptions\nfinal InventorySyncOptions inventorySyncOptions = InventorySyncOptionsBuilder.of(projectApiRoot).build();\n</code></pre></p> <p><code>SyncOptions</code> is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:</p>"},{"location":"usage/INVENTORY_SYNC/#errorcallback","title":"errorCallback","text":"<p>A callback that is called whenever an error event occurs during the sync process. Each resource executes its own  error-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the error-event:</p> <ul> <li>sync exception</li> <li>inventory entry draft from the source</li> <li>inventory entry of the target project (only provided if an existing inventory entry could be found)</li> <li>the update-actions, which failed (only provided if an existing inventory entry could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(InventorySync.class);\n final InventorySyncOptions inventorySyncOptions = InventorySyncOptionsBuilder\n         .of(projectApiRoot)\n         .errorCallback((syncException, draft, inventoryEntry, updateActions) -&gt; \n            logger.error(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/INVENTORY_SYNC/#warningcallback","title":"warningCallback","text":"<p>A callback is called whenever a warning event occurs during the sync process. Each resource executes its own  warning-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the warning message:</p> <ul> <li>sync exception</li> <li>inventory entry draft from the source </li> <li>inventory entry of the target project (only provided if an existing inventory entry could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(InventorySync.class);\n final InventorySyncOptions inventorySyncOptions = InventorySyncOptionsBuilder\n         .of(projectApiRoot)\n         .warningCallback((syncException, draft, inventoryEntry) -&gt; \n            logger.warn(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/INVENTORY_SYNC/#beforeupdatecallback","title":"beforeUpdateCallback","text":"<p>During the sync process, if a target inventory entry and an inventory entry draft are matched, this callback can be used  to intercept the update request just before it is sent to the commercetools platform. This allows the user to modify  update actions array with custom actions or discard unwanted actions. The callback provides the following information :</p> <ul> <li>inventory entry draft from the source</li> <li>inventory from the target project</li> <li>update actions that were calculated after comparing both</li> </ul> <pre><code>final TriFunction&lt;\n        List&lt;InventoryEntryUpdateAction&gt;, \n        InventoryEntryDraft, \n        InventoryEntry, \n        List&lt;InventoryEntryUpdateAction&gt;&gt; beforeUpdateInventoryCallback =\n            (updateActions, newInventoryEntryDraft, oldInventoryEntry) -&gt;  updateActions.stream()\n                    .filter(updateAction -&gt; !(updateAction instanceof InventoryEntryRemoveQuantityAction))\n                    .collect(Collectors.toList());\n\nfinal InventorySyncOptions inventorySyncOptions = \n        InventorySyncOptionsBuilder.of(projectApiRoot).beforeUpdateCallback(beforeUpdateInventoryCallback).build();\n</code></pre>"},{"location":"usage/INVENTORY_SYNC/#beforecreatecallback","title":"beforeCreateCallback","text":"<p>During the sync process, if an inventory entry draft should be created, this callback can be used to intercept the create request just before it is sent to the commercetools platform.  It contains the following information : </p> <ul> <li>inventory entry draft that should be created</li> </ul> <p>Please refer to example in product sync document.</p>"},{"location":"usage/INVENTORY_SYNC/#batchsize","title":"batchSize","text":"<p>A number that could be used to set the batch size with which inventories are fetched and processed, as inventories are obtained from the target project on the commercetools platform in batches for better performance. The algorithm accumulates up to <code>batchSize</code> resources from the input list, then fetches the corresponding inventories from the target project on the commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 150 for inventory sync.</p> <pre><code>final InventorySyncOptions inventorySyncOptions = \n         InventorySyncOptionsBuilder.of(projectApiRoot).batchSize(100).build();\n</code></pre>"},{"location":"usage/INVENTORY_SYNC/#cachesize","title":"cacheSize","text":"<p>In the service classes of the commercetools-sync-java library, we have implemented an in-memory LRU cache to store a map used for the reference resolution of the library. The cache reduces the reference resolution based calls to the commercetools API as the required fields of a resource will be fetched only one time. These cached fields then might be used by another resource referencing the already resolved resource instead of fetching from commercetools API. It turns out, having the in-memory LRU cache will improve the overall performance of the sync library and commercetools API. which will improve the overall performance of the sync and commercetools API.</p> <p>Playing with this option can change the memory usage of the library. If it is not set, the default cache size is <code>10.000</code> for inventory sync.</p> <pre><code>final InventorySyncOptions inventorySyncOptions = \n         InventorySyncOptionsBuilder.of(projectApiRoot).cacheSize(5000).build();\n</code></pre>"},{"location":"usage/INVENTORY_SYNC/#ensurechannels","title":"ensureChannels","text":"<p>A flag to indicate whether the sync process should create a supply channel of the given key when it doesn't exist in a  target project yet. - If <code>ensureChannels</code> is set to <code>false</code> this inventory won't be synced and the <code>errorCallback</code> will be triggered. - If <code>ensureChannels</code> is set to <code>true</code> the sync will attempt to create the missing supply channel with the given key.  If it fails to create the supply channel, the inventory won't sync and <code>errorCallback</code> will be triggered. - If not provided, it is set to <code>false</code> by default.</p> <pre><code>final InventorySyncOptions inventorySyncOptions = \n         InventorySyncOptionsBuilder.of(projectApiRoot).ensureChannels(true).build();\n</code></pre>"},{"location":"usage/INVENTORY_SYNC/#running-the-sync","title":"Running the sync","text":"<p>After all the aforementioned points in the previous section have been fulfilled, to run the sync: <pre><code>// instantiating an inventory sync\nfinal InventorySync inventorySync = new InventorySync(inventorySyncOptions);\n\n// execute the sync on your list of inventories\nCompletionStage&lt;InventorySyncStatistics&gt; syncStatisticsStage = inventorySync.sync(inventoryEntryDrafts);\n</code></pre> The result of completing the <code>syncStatisticsStage</code> in the previous code snippet contains a <code>InventorySyncStatistics</code> which contains all the stats of the sync process; which includes a report message, the total number of updated, created,  failed, processed inventories and the processing time of the sync in different time units and in a human-readable format. <pre><code>final InventorySyncStatistics stats = syncStatisticsStage.toCompletebleFuture().join();\nstats.getReportMessage(); \n/*\"Summary: 25 inventory entries were processed in total (9 created, 5 updated, 2 failed to sync).\"*/\n</code></pre></p> <p>Note The statistics object contains the processing time of the last batch only. This is due to two reasons:</p> <ol> <li>The sync processing time should not take into account the time between supplying batches to the sync. </li> <li>It is not known by the sync which batch is going to be the last one supplied.</li> </ol> <p>More examples of how to use the sync can be found here.</p> <p>Make sure to read the Important Usage Tips for optimal performance.</p>"},{"location":"usage/INVENTORY_SYNC/#build-all-update-actions","title":"Build all update actions","text":"<p>A utility method provided by the library to compare an InventoryEntry with a new InventoryEntryDraft and results in a list of InventoryEntry  update actions.  <pre><code>List&lt;InventoryEntryUpdateAction&gt; updateActions = InventorySyncUtils.buildActions(oldEntry, newEntry, inventorySyncOptions);\n</code></pre></p> <p>Examples of its usage can be found in the tests  here.</p>"},{"location":"usage/INVENTORY_SYNC/#build-particular-update-actions","title":"Build particular update action(s)","text":"<p>Utility methods provided by the library to compare the specific fields of an InventoryEntry and a new InventoryEntryDraft, and in turn builds  the update action. One example is the <code>buildChangeQuantityAction</code> which compares quantities:</p> <pre><code>Optional&lt;InventoryEntryUpdateAction&gt; updateAction = buildChangeQuantityAction(oldEntry, newEntry);\n</code></pre>"},{"location":"usage/INVENTORY_SYNC/#migration-guide","title":"Migration Guide","text":"<p>The inventory-sync uses the JVM-SDK-V2, therefore ensure you Install JVM SDK module <code>commercetools-sdk-java-api</code> with any HTTP client module. The default one is <code>commercetools-http-client</code>.</p> <pre><code> &lt;!-- Sample maven pom.xml --&gt;\n &lt;properties&gt;\n     &lt;commercetools.version&gt;LATEST&lt;/commercetools.version&gt;\n &lt;/properties&gt;\n\n &lt;dependencies&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-http-client&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-sdk-java-api&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n &lt;/dependencies&gt;\n</code></pre>"},{"location":"usage/INVENTORY_SYNC/#client-configuration-and-creation","title":"Client configuration and creation","text":"<p>For client creation use ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. If you have custom requirements for the client creation make sure to replace <code>SphereClientFactory</code> with <code>ApiRootBuilder</code> as described in this Migration Document.</p>"},{"location":"usage/INVENTORY_SYNC/#signature-of-inventorysyncoptions","title":"Signature of InventorySyncOptions","text":"<p>As models and update actions have changed in the JVM-SDK-V2 the signature of SyncOptions is different. It's constructor now takes a <code>ProjectApiRoot</code> as first argument. The callback functions are signed with <code>InventoryEntryDraft</code>, <code>InventoryEntry</code> and <code>InventoryEntryUpdateAction</code> from <code>package com.commercetools.api.models.inventory.*</code></p> <p>Note: Type <code>UpdateAction&lt;InventoryEntry&gt;</code> has changed to <code>InventoryEntryUpdateAction</code>. Make sure you create and supply a specific InventoryEntryUpdateAction in <code>beforeUpdateCallback</code>. For that you can use the library-utilities or use a JVM-SDK builder (see also):</p> <pre><code>// Example: Create a inventory update action to change quantity taking the 'newQuantity' of the InventoryEntryDraft\n    final Function&lt;Long, InventoryEntryUpdateAction&gt; createBeforeUpdateAction =\n        (newQuantity) -&gt; InventoryEntryChangeQuantityAction.builder().quantity(newQuantity).build();\n\n// Add the change quantity action to the list of update actions before update is executed\n    final TriFunction&lt;\n            List&lt;InventoryEntryUpdateAction&gt;, InventoryEntryDraft, InventoryEntry, List&lt;InventoryEntryUpdateAction&gt;&gt;\n        beforeUpdateInventoryCallback =\n            (updateActions, newInventoryEntryDraft, oldInventoryEntry) -&gt; {\n              final InventoryEntryUpdateAction beforeUpdateAction =\n                  createBeforeUpdateAction.apply(newInventoryDraft.getQuantity());\n              updateActions.add(beforeUpdateAction);\n              return updateActions;\n            };\n</code></pre>"},{"location":"usage/INVENTORY_SYNC/#build-inventoryentrydraft-syncing-from-external-project","title":"Build InventoryEntryDraft (syncing from external project)","text":"<p>The inventory-sync expects a list of <code>InventoryEntryDraft</code>s to process. If you use java-sync-library to sync your inventories from any external system into a commercetools platform project you have to convert your data into CTP compatible <code>InventoryEntryDraft</code> type. This was done in previous version using <code>DraftBuilder</code>s. The V2 SDK do not have inheritance for <code>DraftBuilder</code> classes but the differences are minor and you can replace it easily. Here's an example:</p> <p><pre><code>// InventoryEntryDraftBuilder in v1 takes parameters 'sku' and 'quantityOnStock'\nfinal InventoryEntryDraft inventoryEntryDraft =\n              InventoryEntryDraftBuilder\n                      .of(\"sku\", 10L)\n                      .restockableInDays(10) //Note: Field 'restockableInDays' is of type Integer\n                      .build();\n\n// InventoryEntryDraftBuilder in v2\nfinal InventoryEntryDraft inventoryEntryDraft =\n              InventoryEntryDraftBuilder\n                      .of()\n                      .sku(\"sku\")\n                      .quantityOnStock(10L)\n                      .restockableInDays(10L) //Note: Field 'restockableInDays' is of type Long\n                      .build();\n</code></pre> For more information, see the Guide to replace DraftBuilders.</p>"},{"location":"usage/INVENTORY_SYNC/#query-for-inventories-syncing-from-ctp-project","title":"Query for Inventories (syncing from CTP project)","text":"<p>If you sync inventories between different commercetools projects you probably use InventoryTransformUtils#toInventoryEntryDrafts to transform <code>InventoryEntry</code> into <code>InventoryEntryDraft</code> which can be used by the inventory-sync. However, if you need to query <code>Inventories</code> from a commercetools project instead of passing <code>InventoryEntryQuery</code>s to a <code>sphereClient</code>, create (and execute) requests directly from the <code>apiRoot</code>. Here's an example:</p> <p><pre><code>// SDK v1: InventoryEntryQuery to fetch all inventories\nfinal InventoryEntryQuery query = InventoryEntryQuery.of();\n\nfinal PagedQueryResult&lt;InventoryEntry&gt; pagedQueryResult = sphereClient.executeBlocking(query);\n\n// SDK v2: Create and execute query to fetch all inventories in one line\nfinal InventoryEntryPagedQueryResponse result = apiRoot.inventory().get().executeBlocking().getBody();\n</code></pre> Read more about querying resources.</p> <p>Note: If you use predicates to query resources please keep in mind the URI length is limited to ~8kB. Therefore, consider limiting the query-predicates (max. 10.000 characters), because above this size it could return - Error 414 (Request-URI Too Large).</p>"},{"location":"usage/INVENTORY_SYNC/#jvm-sdk-v2-migration-guide","title":"JVM-SDK-V2 migration guide","text":"<p>On any other needs to migrate your project using jvm-sdk-v2 please refer to it's Migration Guide. </p>"},{"location":"usage/PRODUCT_SYNC/","title":"Product Sync","text":"<p>The module used for importing/syncing Products into a commercetools project.  It also provides utilities for generating update actions based on the comparison of a ProductProjection  against a ProductDraft.</p> <ul> <li>Usage</li> <li>Prerequisites<ul> <li>ProjectApiRoot</li> <li>Required Fields</li> <li>Reference Resolution</li> <li>Syncing from a commercetools project</li> <li>Syncing from an external resource</li> <li>SyncOptions</li> <li>errorCallback</li> <li>warningCallback</li> <li>beforeUpdateCallback</li> <li>beforeCreateCallback</li> <li>batchSize</li> <li>cacheSize</li> <li>syncFilter</li> <li>ensureChannels</li> </ul> </li> <li>Running the sync<ul> <li>Persistence of ProductDrafts with Irresolvable References</li> <li>More examples of how to use the sync</li> </ul> </li> <li>Build all update actions</li> <li>Build particular update action(s)</li> <li>Caveats</li> <li>Migration Guide</li> <li>Client configuration and creation</li> <li>Signature of ProductSyncOptions</li> <li>Build ProductDraft (syncing from external project)</li> <li>Query for Products (syncing from CTP project)</li> <li>JVM-SDK-V2 migration guide</li> </ul>"},{"location":"usage/PRODUCT_SYNC/#usage","title":"Usage","text":""},{"location":"usage/PRODUCT_SYNC/#prerequisites","title":"Prerequisites","text":""},{"location":"usage/PRODUCT_SYNC/#projectapiroot","title":"ProjectApiRoot","text":"<p>Use the ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. To create <code>ClientCredentials</code> which are required for creating a client please use the <code>ClientCredentialsBuilder</code> provided in java-sdk-v2 Client OAUTH2 package If you have custom requirements for the client creation, have a look into the Important Usage Tips.</p> <pre><code>final ClientCredentials clientCredentials =\n        new ClientCredentialsBuilder()\n            .withClientId(\"client-id\")\n            .withClientSecret(\"client-secret\")\n            .withScopes(\"scopes\")\n            .build();\nfinal ProjectApiRoot apiRoot = ClientConfigurationUtils.createClient(\"project-key\", clientCredentials, \"auth-url\", \"api-url\");\n</code></pre>"},{"location":"usage/PRODUCT_SYNC/#required-fields","title":"Required Fields","text":"<p>The following fields are required to be set in, otherwise, they won't be matched by sync:</p> Draft Required Fields Note <code>ProductDraft</code> <code>key</code> Also, the products in the target project are expected to have the <code>key</code> fields set. <code>ProductVariantDraft</code> <code>key</code>, <code>sku</code> Also, all the variants in the target project are expected to have the <code>key</code> and <code>sku</code> fields set."},{"location":"usage/PRODUCT_SYNC/#reference-resolution","title":"Reference Resolution","text":"<p>In commercetools, a reference can be created by providing the key instead of the ID with the type ResourceIdentifier. When the reference key is provided with a <code>ResourceIdentifier</code>, the sync will resolve the resource with the given key and use the ID of the found resource to create or update a reference. Therefore, in order to resolve the actual ids of those references in the sync process, <code>ResourceIdentifier</code>s with their <code>key</code>s have to be supplied. </p> Reference Field Type Necessity <code>productType</code> ProductTypeResourceIdentifier Required <code>categories</code> List of CategoryResourceIdentifier Optional <code>taxCategory</code> TaxCategoryResourceIdentifier Optional <code>state</code> StateResourceIdentifier Optional <code>variants.prices.channel</code> ChannelResourceIdentifier Optional <code>variants.prices.customerGroup</code> CustomerGroupResourceIdentifier Optional <code>variants.prices.custom.type</code> TypeResourceIdentifier Required for <code>custom</code> (CustomFieldsDraft) <code>variants.assets.custom.type</code> TypeResourceIdentifier Required for <code>custom</code> (CustomFieldsDraft) <code>variants.attributes</code> Only the attributes with type ReferenceType, SetType with <code>elementType</code> as ReferenceType and NestedType requires <code>key</code> on the <code>id</code> field of the <code>ReferenceType</code>. Optional <p>Note that a reference without the key field will be considered as existing  resource on the target commercetools project and the library will issue an update/create an API request without reference resolution.</p>"},{"location":"usage/PRODUCT_SYNC/#syncing-from-a-commercetools-project","title":"Syncing from a commercetools project","text":"<p>When syncing from a source commercetools project, you can use <code>toProductDrafts</code>  method that transforms(resolves by querying and caching key-id pairs) and maps from a <code>ProductProjection</code> to <code>ProductDraft</code> using cache in order to make them ready for reference resolution by the sync, for example: </p> <pre><code>// Build a ProductQuery for fetching products from a source CTP project without any references expanded for the sync:\nfinal ByProjectKeyProductProjectionsGet byProjectKeyProductsGet = getCtpClient().productProjections().get().addStaged(true);\n\n// Query all product projections (NOTE this is only for example, please adjust your logic)\nfinal List&lt;ProductProjection&gt; products = QueryUtils.queryAll(byProjectKeyProductsGet,\n            (productProjections) -&gt; productProjections)\n            .thenApply(lists -&gt; lists.stream().flatMap(List::stream).collect(Collectors.toList()))\n            .toCompletableFuture()\n            .join();\n</code></pre> <p>In order to transform and map the <code>ProductProjections</code> to <code>ProductDraft</code>,  Utils method <code>toProductDrafts</code> requires <code>ProjectApiRoot</code>, implementation of <code>ReferenceIdToKeyCache</code> and list of <code>ProductProjection</code> as parameters. For cache implementation, You can use your own cache implementation or use the class in the library - which implements the cache using caffeine library with an LRU (Least Recently Used) based cache eviction strategy<code>CaffeineReferenceIdToKeyCacheImpl</code>. Example as shown below:</p> <pre><code>//Implement the cache using library class.\nfinal ReferenceIdToKeyCache referenceIdToKeyCache = new CaffeineReferenceIdToKeyCacheImpl();\n\n//For every reference fetch its key using id, cache it and map from ProductProjection to ProductDraft. With help of the cache same reference keys can be reused.\nCompletableFuture&lt;List&lt;ProductDraft&gt;&gt; productDrafts = ProductTransformUtils.toProductDrafts(client, referenceIdToKeyCache, products);\n</code></pre>"},{"location":"usage/PRODUCT_SYNC/#syncing-from-an-external-resource","title":"Syncing from an external resource","text":"<ul> <li>When syncing from an external resource, <code>ResourceIdentifier</code>s with their <code>key</code>s have to be supplied as following example:</li> </ul> <pre><code>final ProductDraft productDraft =\n              ProductDraftBuilder\n                      .of()\n                      .productType(ProductTypeResourceIdentifierBuilder.of().key(\"product-type-key\").build())\n                      .name(LocalizedString.ofEnglish(\"name\"))\n                      .slug(LocalizedString.ofEnglish(\"slug\"))\n                      .masterVariant(masterVariant)\n                      .key(\"product-key\")\n                      .categories(CategoryResourceIdentifierBuilder.of().key(\"category1-key\").build(),\n                              CategoryResourceIdentifierBuilder.of().key(\"category2-key\").build())\n                      .taxCategory(TaxCategoryResourceIdentifierBuilder.of().key(\"tax-category-key\").build())\n                      .state(StateResourceIdentifierBuilder.of().key(\"tax-category-key\").build())\n                      .build();\n</code></pre> <p>````java final PriceDraft priceDraft =           PriceDraftBuilder.of()               .value(MoneyBuilder.of().centAmount(20L).currencyCode(\"EUR\").build())               .channel(ChannelResourceIdentifierBuilder.of().key(\"channel-key\").build())               .customerGroup(                   CustomerGroupResourceIdentifierBuilder.of().key(\"customer-group-key\").build())               .custom(                   CustomFieldsDraftBuilder.of()                       .type(TypeResourceIdentifierBuilder.of().key(\"type-key\").build())                       .fields(FieldContainerBuilder.of().values(Collections.emptyMap()).build()).build())               .build(); <pre><code>-  The product projection variant attributes with a type `ReferenceType` do not support the `ResourceIdentifier` yet, for\n those references you have to provide the `key`  value on the `id` field of the reference. This means that calling `getId()` on the reference should return its `key`.\n\n````java\nfinal ProductReference productReference = ProductReferenceBuilder.of().id(\"product-key\").build();\nfinal Attribute attr = AttributeBuilder.of().name(\"attribute-name\").value(productReference).build();\n</code></pre></p> <ul> <li>For resolving <code>key-value-document</code> (custom object) references on attributes of type <code>Reference</code>, <code>Set</code> of <code>Reference</code>, <code>NestedType</code> or <code>Set</code> of <code>NestedType</code>, The <code>id</code> field of the reference in the attribute should be defined in the correct format.  The correct format must have a vertical bar <code>|</code> character between the values of the container and key. For example, if the custom object has a container value <code>container</code> and key value <code>key</code>, the <code>id</code> field should be <code>container|key</code>, also, the key and container value should match the pattern <code>[-_~.a-zA-Z0-9]+</code>. Please also keep in mind that length of the key is limited to 256 characters max: CustomObject</li> </ul> <pre><code>final CustomObjectReference coReference =\n          CustomObjectReferenceBuilder.of().id(\"co-container|co-key\").build();\nfinal Attribute attr =\n          AttributeBuilder.of().name(\"attribute-name\").value(coReference).build();\n</code></pre>"},{"location":"usage/PRODUCT_SYNC/#syncoptions","title":"SyncOptions","text":"<p>After the <code>ProjectApiRoot</code> is set up, a <code>ProductSyncOptions</code> should be built as follows: </p> <pre><code>// instantiating a ProductSyncOptions\nfinal ProductSyncOptions productSyncOptions = ProductSyncOptionsBuilder.of(projectApiRoot).build();\n</code></pre> <p><code>SyncOptions</code> is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:</p>"},{"location":"usage/PRODUCT_SYNC/#errorcallback","title":"errorCallback","text":"<p>A callback that is called whenever an error event occurs during the sync process. Each resource executes its own  error-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the error-event:</p> <ul> <li>sync exception</li> <li>product draft from the source</li> <li>product projection of the target project (only provided if an existing product projection could be found)</li> <li>the update-actions, which failed (only provided if an existing product projection could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(ProductSync.class);\n final ProductSyncOptions productSyncOptions = ProductSyncOptionsBuilder\n         .of(projectApiRoot)\n         .errorCallback((syncException, draft, productProjection, updateActions) -&gt; \n            logger.error(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/PRODUCT_SYNC/#warningcallback","title":"warningCallback","text":"<p>A callback is called whenever a warning event occurs during the sync process. Each resource executes its own  warning-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the warning message:</p> <ul> <li>sync exception</li> <li>product draft from the source </li> <li>product projection of the target project (only provided if an existing product projection could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(ProductSync.class);\n final ProductSyncOptions productSyncOptions = ProductSyncOptionsBuilder\n         .of(projectApiRoot)\n         .warningCallback((syncException, draft, productProjection) -&gt; \n            logger.warn(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/PRODUCT_SYNC/#beforeupdatecallback","title":"beforeUpdateCallback","text":"<p>During the sync process, if a target product projection and a product draft are matched, this callback can be used to intercept the update request just before it is sent to the commercetools platform. This allows the user to modify the update  actions array with custom actions or discard unwanted actions. The callback provides the following information :</p> <ul> <li>product draft from the source</li> <li>product projection from the target project</li> <li>update actions that were calculated after comparing both</li> </ul> <pre><code>// Example: Ignore update actions which contain deletion of variants\nfinal TriFunction&lt;\n        List&lt;ProductUpdateAction&gt;, ProductDraft, ProductProjection, List&lt;ProductUpdateAction\n&gt;&gt; beforeUpdateProductCallback =\n            (updateActions, newProductDraft, oldProduct) -&gt;  updateActions.stream()\n                    .filter(updateAction -&gt; !(updateAction instanceof ProductRemoveVariantActionImpl))\n                    .collect(Collectors.toList());\n\nfinal ProductSyncOptions productSyncOptions = \n        ProductSyncOptionsBuilder.of(projectApiRoot).beforeUpdateCallback(beforeUpdateProductCallback).build();\n</code></pre>"},{"location":"usage/PRODUCT_SYNC/#beforecreatecallback","title":"beforeCreateCallback","text":"<p>During the sync process, if a product draft should be created, this callback can be used to intercept the create request just before it is sent to the commercetools platform.  It contains the following information : </p> <ul> <li>product draft that should be created</li> </ul> <pre><code>// Example: Set publish stage if category references of given product draft exist\nfinal Function&lt;ProductDraft, ProductDraft&gt; beforeCreateProductCallback =\n        (callbackDraft) -&gt; {\n            List&lt;CategoryResourceIdentifier&gt; categoryResourceIdentifier = callbackDraft.getCategories();\n            if (categoryResourceIdentifier!=null &amp;&amp; !categoryResourceIdentifier.isEmpty()) {\n                return ProductDraftBuilder.of(callbackDraft).publish(true).build();\n            }\n            return callbackDraft;\n        };\n\nfinal ProductSyncOptions productSyncOptions = \n         ProductSyncOptionsBuilder.of(projectApiRoot).beforeCreateCallback(beforeCreateProductCallback).build();\n</code></pre>"},{"location":"usage/PRODUCT_SYNC/#batchsize","title":"batchSize","text":"<p>A number that could be used to set the batch size with which product projections are fetched and processed, as product projections are obtained from the target project on commercetools platform in batches for better performance.  The algorithm accumulates up to <code>batchSize</code> resources from the input list, then fetches the corresponding product projections from the target project on the commercetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 30 for product sync.</p> <pre><code>final ProductSyncOptions productSyncOptions = \n         ProductSyncOptionsBuilder.of(projectApiRoot).batchSize(50).build();\n</code></pre>"},{"location":"usage/PRODUCT_SYNC/#cachesize","title":"cacheSize","text":"<p>In the service classes of the commercetools-sync-java library, we have implemented an in-memory LRU cache to store a map used for the reference resolution of the library. The cache reduces the reference resolution based calls to the commercetools API as the required fields of a resource will be fetched only one time. These cached fields then might be used by another resource referencing the already resolved resource instead of fetching from commercetools API. It turns out, having the in-memory LRU cache will improve the overall performance of the sync library and commercetools API. which will improve the overall performance of the sync and commercetools API.</p> <p>Playing with this option can change the memory usage of the library. If it is not set, the default cache size is <code>10.000</code> for product sync.</p> <pre><code>final ProductSyncOptions productSyncOptions =\n    ProductSyncOptionsBuilder.of(projectApiRoot).cacheSize(5000).build(); \n</code></pre>"},{"location":"usage/PRODUCT_SYNC/#syncfilter","title":"syncFilter","text":"<p>It represents either a blacklist or a whitelist for filtering certain update action groups. </p> <ul> <li> <p>Blacklisting an update action group means that everything in products will be synced except for any group in    the blacklist. A typical use case is to blacklist prices when syncing product projections. In other words, syncing     everything in product projections except for prices.</p> <pre><code>final ProductSyncOptions syncOptions = syncOptionsBuilder.syncFilter(ofBlackList(ActionGroup.PRICES)).build();\n</code></pre> </li> <li> <p>Whitelisting an update action group means that the groups in this whitelist will be the only group synced in products. One use case could be to whitelist prices when syncing products. In other words, syncing prices only in   product projections and nothing else.</p> <pre><code>final ProductSyncOptions syncOptions = syncOptionsBuilder.syncFilter(ofWhiteList(ActionGroup.PRICES)).build();\n</code></pre> </li> <li> <p>The list of action groups allowed to be blacklisted or whitelisted on product projections can be found here. </p> </li> </ul>"},{"location":"usage/PRODUCT_SYNC/#ensurechannels","title":"ensureChannels","text":"<p>A flag to indicate whether the sync process should create a price channel of the given key when it doesn't exist in a  target project yet. - If <code>ensureChannels</code> is set to <code>false</code> this products won't be synced and the <code>errorCallback</code> will be triggered. - If <code>ensureChannels</code> is set to <code>true</code> the sync will attempt to create the missing channel with the given key.  If it fails to create the price channel, the products won't sync and <code>errorCallback</code> will be triggered. - If not provided, it is set to <code>false</code> by default.</p> <pre><code>final ProductSyncOptions productSyncOptions = \n         ProductSyncOptionsBuilder.of(projectApiRoot).ensureChannels(true).build();\n</code></pre>"},{"location":"usage/PRODUCT_SYNC/#running-the-sync","title":"Running the sync","text":"<p>After all the aforementioned points in the previous section have been fulfilled, to run the sync: <pre><code>// instantiating a product sync\nfinal ProductSync productSync = new ProductSync(productSyncOptions);\n\n// execute the sync on your list of products\nCompletionStage&lt;ProductSyncStatistics&gt; syncStatisticsStage = productSync.sync(productDrafts);\n</code></pre> The result of completing the <code>syncStatisticsStage</code> in the previous code snippet contains a <code>ProductSyncStatistics</code> which contains all the stats of the sync process; which includes a report message, the total number of updated, created,  failed, processed products and the processing time of the sync in different time units and in a human-readable format. <pre><code>final ProductSyncStatistics stats = syncStatisticsStage.toCompletableFuture().join();\nstats.getReportMessage(); \n/*Summary: 2000 product(s) were processed in total (1000 created, 995 updated, 5 failed to sync and 0 product(s) with missing reference(s)).*/\n</code></pre></p> <p>Note The statistics object contains the processing time of the last batch only. This is due to two reasons:</p> <ol> <li>The sync processing time should not take into account the time between supplying batches to the sync. </li> <li>It is not known by the sync which batch is going to be the last one supplied.</li> </ol>"},{"location":"usage/PRODUCT_SYNC/#persistence-of-productdrafts-with-irresolvable-references","title":"Persistence of ProductDrafts with Irresolvable References","text":"<p>A productDraft X could be supplied in with an attribute referencing productDraft Y.  It could be that Y is not supplied before X, which means the sync could fail to create/update X.  It could also be that Y is not supplied at all in this batch but at a later batch.</p> <p>The library keeps track of such \"referencing\" drafts like X and persists them in storage  (Commercetools platform <code>customObjects</code> in the target project , in this case)  to keep them and create/update them accordingly whenever the referenced drafts exist in the target project.</p> <p>The <code>customObject</code> will have a <code>container:</code> <code>\"commercetools-sync-java.UnresolvedReferencesService.productDrafts\"</code> and a <code>key</code> representing the key of the productDraft that is waiting to be created/updated.</p> <p>Here is an example of a <code>CustomObject</code> in the target project that represents a productDraft with <code>productKey1</code>. It being persisted as <code>CustomObject</code> means that the referenced productDrafts with keys <code>foo</code> and <code>bar</code> do not exist yet.</p> <pre><code>{\n  \"id\": \"d0fbb69e-76e7-4ec0-893e-3aaab6f4f6b6\",\n  \"version\": 1,\n  \"container\": \"commercetools-sync-java.UnresolvedReferencesService.productDrafts\",\n  \"key\": \"productKey1\",\n  \"value\": {\n    \"dependantProductKeys\": [\n      \"foo\",\n      \"bar\"\n    ],\n    \"productDraft\": {\n      \"productType\": {\n        \"typeId\": \"product-type\",\n        \"id\": \"main-product-type\"\n      },\n      \"masterVariant\": {\n          \"id\": 1,\n          \"sku\": \"white-shirt-1\",\n          \"key\": \"white-shirt-1\",\n          \"prices\": [],\n          \"images\": [],\n          \"attributes\": [\n            {\n              \"name\": \"product-reference-set\",\n              \"value\": [\n                {\n                  \"typeId\": \"product\",\n                  \"id\": \"foo\"\n                },\n                {\n                  \"typeId\": \"product\",\n                  \"id\": \"bar\"\n                }\n              ]\n            }\n          ]\n        },\n      \"key\": \"productKey1\"\n    }\n  },\n  \"createdAt\": \"2019-09-27T13:45:35.495Z\",\n  \"lastModifiedAt\": \"2019-09-27T13:45:35.495Z\",\n  \"lastModifiedBy\": {\n    \"clientId\": \"8bV3XSW-taCpi873-GQTa8lf\",\n    \"isPlatformClient\": false\n  },\n  \"createdBy\": {\n    \"clientId\": \"8bV3XSW-taCpi873-GQTa8lf\",\n    \"isPlatformClient\": false\n  }\n}\n</code></pre> <p>As soon, as the referenced productDrafts are supplied to the sync, the draft will be created/updated and the  <code>CustomObject</code> will be removed from the target project.</p> <p>Keeping the old custom objects around forever can negatively influence the performance of your project and the time it takes to restore it from a backup.  Deleting unused data ensures the best performance for your project. Please have a look into the Cleanup guide to cleanup old unresolved custom objects.</p>"},{"location":"usage/PRODUCT_SYNC/#more-examples-of-how-to-use-the-sync","title":"More examples of how to use the sync","text":"<ol> <li>Sync from another commercetools project as a source.</li> <li>Sync from an external source. </li> <li>Sync with blacklisting/whitelisting.</li> </ol> <p>Make sure to read the Important Usage Tips for optimal performance.</p>"},{"location":"usage/PRODUCT_SYNC/#build-all-update-actions","title":"Build all update actions","text":"<p>A utility method provided by the library to compare a ProductProjection with a new ProductDraft and results in a  list of update actions.  <pre><code>List&lt;ProductUpdateAction&gt; updateActions = ProductSyncUtils.buildActions(productProjection, productDraft, productSyncOptions, attributesMetaData);\n</code></pre></p> <p>Examples of its usage can be found in the tests  here.</p>"},{"location":"usage/PRODUCT_SYNC/#build-particular-update-actions","title":"Build particular update action(s)","text":"<p>Utility methods provided by the library to compare the specific fields of a ProductProjection and a new ProductDraft,  build the update action. One example is the <code>buildChangeNameUpdateAction</code> which compares names:</p> <p><pre><code>Optional&lt;ProductUpdateAction&gt; updateAction = buildChangeNameUpdateAction(oldProductProjection, productDraft);\n</code></pre> More examples of those utils for different fields can be found here.</p>"},{"location":"usage/PRODUCT_SYNC/#caveats","title":"Caveats","text":"<p>The commercetools-java-sync library has some exceptions to the data it can sync, particularly around product variant  attributes.</p> <ol> <li> <p>List of supported variant attributes, with an  <code>AttributeType</code>: <code>ReferenceType</code>,   that can be synced:</p> <code>referenceTypeId</code> supported <code>\u201ccart\u201d</code> \u274c <code>\u201ccategory\u201d</code> \u2705 <code>\u201cchannel\u201d</code> \u274c <code>\u201ccustomer\u201d</code> \u2705 <code>\u201ckey-value-document\u201d</code> \u2705 <code>\u201corder\u201d</code> \u274c <code>\u201cproduct\u201d</code> \u2705 <code>\u201cproduct-type\u201d</code> \u2705 <code>\u201creview\u201d</code> \u274c <code>\u201cstate\u201d</code> \u2705 <code>\u201cshipping-method\u201d</code> \u274c <code>\u201czone\u201d</code> \u274c </li> <li> <p>Support for syncing variant attributes with an <code>AttributeType</code> of <code>SetType</code> of <code>ReferenceType</code>  (of <code>elementType: ReferenceType</code>) with any of the aforementioned <code>referenceTypeId</code>, accordingly applies.</p> </li> <li>Support for syncing variant attributes with an <code>AttributeType</code> of <code>NestedType</code> which has an attribute inside of it of  <code>ReferenceType</code>  with any of the aforementioned <code>referenceTypeId</code>, accordingly applies.</li> <li>Syncing products with cyclic dependencies are not supported yet. An example of a cyclic dependency is a product <code>a</code> which references a product <code>b</code> and at the same time product <code>b</code> references product <code>a</code>. Cycles can contain more than 2 products. For example: <code>a</code> -&gt; <code>b</code> -&gt; <code>c</code> -&gt; <code>a</code>. If there are such cycles, the sync will consider all the products in the cycle as products with missing parents. They will be persisted as custom objects in the target project.</li> </ol>"},{"location":"usage/PRODUCT_SYNC/#migration-guide","title":"Migration Guide","text":"<p>The product-sync uses the JVM-SDK-V2, therefore ensure you Install JVM SDK module <code>commercetools-sdk-java-api</code> with any HTTP client module. The default one is <code>commercetools-http-client</code>. </p> <pre><code> &lt;!-- Sample maven pom.xml --&gt;\n &lt;properties&gt;\n     &lt;commercetools.version&gt;LATEST&lt;/commercetools.version&gt;\n &lt;/properties&gt;\n\n &lt;dependencies&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-http-client&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-sdk-java-api&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n &lt;/dependencies&gt;\n</code></pre>"},{"location":"usage/PRODUCT_SYNC/#client-configuration-and-creation","title":"Client configuration and creation","text":"<p>For client creation use ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. If you have custom requirements for the client creation make sure to replace <code>SphereClientFactory</code> with <code>ApiRootBuilder</code> as described in this Migration Document.</p>"},{"location":"usage/PRODUCT_SYNC/#signature-of-productsyncoptions","title":"Signature of ProductSyncOptions","text":"<p>As models and update actions have changed in the JVM-SDK-V2 the signature of SyncOptions is different. It's constructor now takes a <code>ProjectApiRoot</code> as first argument. The callback functions are signed with <code>ProductDraft</code>, <code>ProductProjection</code> and <code>ProductUpdateAction</code> from <code>package com.commercetools.api.models.product.*</code></p> <p>Note: Type <code>UpdateAction&lt;Product&gt;</code> has changed to <code>ProductUpdateAction</code>. Make sure you create and supply a specific ProductUpdateAction in <code>beforeUpdateCallback</code>. Therefore you can use the library-utilities or use a JVM-SDK builder (see also):</p> <pre><code>// Example: Create a product update action to change name taking the 'newName' of the productDraft\n    final Function&lt;LocalizedString, ProductUpdateAction&gt; createBeforeUpdateAction =\n        (newName) -&gt; ProductChangeNameAction.builder().name(newName).staged(true).build();\n\n// Add the change name action to the list of update actions before update is executed\n    final TriFunction&lt;\n            List&lt;ProductUpdateAction&gt;, ProductDraft, ProductProjection, List&lt;ProductUpdateAction&gt;&gt;\n        beforeUpdateProductCallback =\n            (updateActions, newProductDraft, oldProduct) -&gt; {\n              final ProductUpdateAction beforeUpdateAction =\n                  createBeforeUpdateAction.apply(newProductDraft.getName());\n              updateActions.add(beforeUpdateAction);\n              return updateActions;\n            };\n</code></pre>"},{"location":"usage/PRODUCT_SYNC/#build-productdraft-syncing-from-external-project","title":"Build ProductDraft (syncing from external project)","text":"<p>The product-sync expects a list of <code>ProductDraft</code>s to process. If you use java-sync-library to sync your products from any external system into a commercetools platform project you have to convert your data into CTP compatible <code>ProductDraft</code> type. This was done in previous version using <code>DraftBuilder</code>s.  The V2 SDK do not have inheritance for <code>DraftBuilder</code> classes but the differences are minor and you can replace it easily. Here's an example:</p> <p><pre><code>// ProductDraftBuilder in v1 takes parameters 'productType', 'name', 'slug' and optional 'masterVariant'\nfinal ProductDraft productDraft =\n              ProductDraftBuilder\n                      .of(mock(ProductType.class), ofEnglish(\"name\"), ofEnglish(\"slug\"), emptyList())\n                      .key(\"product-key\")\n                      .build();\n\n// ProductDraftBuilder in v2\nfinal ProductDraft productDraft =\n              ProductDraftBuilder\n                      .of()\n                      .productType(ProductTypeResourceIdentifierBuilder.of().key(\"product-type-key\").build())\n                      .name(LocalizedString.ofEnglish(\"name\"))\n                      .slug(LocalizedString.ofEnglish(\"slug\"))\n                      .masterVariant(masterVariant)\n                      .key(\"product-key\")\n                      .build();\n</code></pre> For more information, see the Guide to replace DraftBuilders.</p>"},{"location":"usage/PRODUCT_SYNC/#query-for-products-syncing-from-ctp-project","title":"Query for Products (syncing from CTP project)","text":"<p>If you sync products between different commercetools projects you probably use ProductTransformUtils#toProductDrafts to transform <code>ProductProjection</code> into <code>ProductDraft</code> which can be used by the product-sync. However, if you need to query <code>Products</code> / <code>ProductProjections</code> from a commercetools project instead of passing <code>ProductQuery</code>s to a <code>sphereClient</code>, create (and execute) requests directly from the <code>apiRoot</code>. Here's an example:</p> <p><pre><code>// SDK v1: ProductProjectionQuery to fetch all staged product projections\nfinal ProductProjectionQuery query = ProductProjectionQuery.ofStaged();\n\nfinal PagedQueryResult&lt;ProductProjection&gt; pagedQueryResult = sphereClient.executeBlocking(query);\n\n// SDK v2: Create and execute query to fetch all staged product projections in one line\nfinal ProductProjectionPagedQueryResponse result = apiRoot.productProjections().get().addStaged(true).executeBlocking().getBody();\n</code></pre> Read more about querying resources.</p>"},{"location":"usage/PRODUCT_SYNC/#jvm-sdk-v2-migration-guide","title":"JVM-SDK-V2 migration guide","text":"<p>On any other needs to migrate your project using jvm-sdk-v2 please refer to it's Migration Guide. </p>"},{"location":"usage/PRODUCT_TYPE_SYNC/","title":"ProductType Sync","text":"<p>The module used for importing/syncing ProductTypes into a commercetools project.  It also provides utilities for generating update actions based on the comparison of a ProductType  against a ProductTypeDraft.</p> <ul> <li>Usage</li> <li>Prerequisites<ul> <li>ProjectApiRoot</li> <li>Required Fields</li> <li>Reference Resolution</li> <li>Syncing from a commercetools project</li> <li>Syncing from an external resource</li> <li>SyncOptions</li> <li>errorCallback</li> <li>warningCallback</li> <li>beforeUpdateCallback</li> <li>beforeCreateCallback</li> <li>batchSize</li> <li>cacheSize</li> </ul> </li> <li>Running the sync<ul> <li>Important to Note</li> <li>More examples of how to use the sync</li> </ul> </li> <li>Build all update actions</li> <li>Build particular update action(s)</li> <li>Caveats</li> <li>Migration Guide</li> <li>Client configuration and creation</li> <li>Signature of ProductTypeSyncOptions</li> <li>Build ProductTypeDraft (syncing from external project)</li> <li>Query for ProductTypes (syncing from CTP project)</li> <li>JVM-SDK-V2 migration guide</li> </ul>"},{"location":"usage/PRODUCT_TYPE_SYNC/#usage","title":"Usage","text":""},{"location":"usage/PRODUCT_TYPE_SYNC/#prerequisites","title":"Prerequisites","text":""},{"location":"usage/PRODUCT_TYPE_SYNC/#projectapiroot","title":"ProjectApiRoot","text":"<p>Use the ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. To create the required <code>ClientCredentials</code> for client creation, please utilize the <code>ClientCredentialsBuilder</code> provided in the java-sdk-v2 Client OAUTH2 package. If you have custom requirements for the client creation, have a look into the Important Usage Tips.</p> <pre><code>final ClientCredentials clientCredentials =\n        new ClientCredentialsBuilder()\n        .withClientId(\"client-id\")\n        .withClientSecret(\"client-secret\")\n        .withScopes(\"scopes\")\n        .build();\nfinal ProjectApiRoot apiRoot = ClientConfigurationUtils.createClient(\"project-key\", clientCredentials, \"auth-url\", \"api-url\");\n</code></pre>"},{"location":"usage/PRODUCT_TYPE_SYNC/#required-fields","title":"Required Fields","text":"<p>The following fields are required to be set in, otherwise, they won't be matched by sync:</p> Draft Required Fields Note ProductTypeDraft <code>key</code> Also, the product types in the target project are expected to have the <code>key</code> fields set."},{"location":"usage/PRODUCT_TYPE_SYNC/#reference-resolution","title":"Reference Resolution","text":"<p>In commercetools, a reference can be created by providing the key instead of the ID with the type ResourceIdentifier. When the reference key is provided with a <code>ResourceIdentifier</code>, the sync will resolve the resource with the given key and use the ID of the found resource to create or update a reference. Therefore, in order to resolve the actual ids of those references in the sync process, <code>ResourceIdentifier</code>s with their <code>key</code>s have to be supplied. </p> Reference Field Type <code>attributes</code> Only the attributes with type AttributeNestedType and AttributeSetType with <code>elementType</code> as <code>AttributeNestedType</code> requires <code>key</code> on the <code>id</code> field of the ProductTypeReference. <p>Note that a reference without the key field will be considered as an existing resource on the target commercetools project and the library will issue an update/create an API request without reference resolution.</p>"},{"location":"usage/PRODUCT_TYPE_SYNC/#syncing-from-a-commercetools-project","title":"Syncing from a commercetools project","text":"<p>When syncing from a source commercetools project, you can use <code>toProductTypeDrafts</code>  method that transforms(resolves by querying and caching key-id pairs) and maps from a <code>ProductType</code> to <code>ProductTypeDraft</code>. It can be configured to use a cache that will speed up the reference resolution performed during the sync, for example: </p> <pre><code>// Build ByProjectKeyProductTypesGet for fetching product-types from a source CTP project without any references expanded for the sync:\nfinal ByProjectKeyProductTypesGet byProjectKeyProductTypesGet = client.productTypes().get();\n\n// Query all product-types (NOTE this is just for example, please adjust your logic)\nfinal List&lt;ProductTypes&gt; productTypes = QueryUtils.queryAll(byProjectKeyProductTypesGet,\n            (productTypes) -&gt; productTypes)\n            .thenApply(lists -&gt; lists.stream().flatMap(List::stream).collect(Collectors.toList()))\n            .toCompletableFuture()\n            .join();\n</code></pre> <p>In order to transform and map the <code>ProductType</code> to <code>ProductTypeDraft</code>,  Utils method <code>toProductTypeDrafts</code> requires <code>projectApiRoot</code>, implementation of <code>ReferenceIdToKeyCache</code> and a list of <code>productTypes</code> as parameters. For cache implementation, you have two options: you can either use your own cache implementation or utilize the class <code>CaffeineReferenceIdToKeyCacheImpl</code> provided in the library. This class implements the cache using caffeine library with an LRU (Least Recently Used) based cache eviction strategy.Example as shown below:</p> <pre><code>//Implement the cache using library class.\nfinal ReferenceIdToKeyCache referenceIdToKeyCache = new CaffeineReferenceIdToKeyCacheImpl();\n\n//For every reference fetch its key using id, cache it and map from ProductType to ProductTypeDraft. With help of the cache same reference keys can be reused.\nCompletableFuture&lt;List&lt;ProductTypeDraft&gt;&gt; productTypeDrafts = ProductTransformUtils.toProductTypeDrafts(client, referenceIdToKeyCache, productTypes);\n</code></pre>"},{"location":"usage/PRODUCT_TYPE_SYNC/#syncing-from-an-external-resource","title":"Syncing from an external resource","text":"<ul> <li>Attributes with type <code>AttributeNestedType</code> do not support the <code>ResourceIdentifier</code> yet,  for those references you have to provide the <code>key</code> value on the <code>id</code> field of the reference. This means that calling <code>getId()</code> on the reference should return its <code>key</code>. </li> </ul> <pre><code>final AttributeDefinitionDraft nestedTypeAttr = AttributeDefinitionDraftBuilder.of()\n            .type(AttributeNestedTypeBuilder.of()\n                    .typeReference(ProductTypeReferenceBuilder.of().id(\"product-type-key\").build()) // note that key is provided in the id field of reference\n                    .build())\n            .name(\"attrNestedType\")\n            .label(LocalizedString.ofEnglish(\"attrNestedType\"))\n            .isRequired(true)\n            .build();\n\nfinal AttributeDefinitionDraft setOfNestedTypeAttr = AttributeDefinitionDraftBuilder.of()\n            .type(AttributeSetTypeBuilder.of()\n                    .elementType(AttributeNestedTypeBuilder.of()\n                              .typeReference(ProductTypeReferenceBuilder.of()\n                              .id(\"product-type-key\").build())\n                    .build())\n                  .build())\n            .name(\"attrNestedType\")\n            .label(LocalizedString.ofEnglish(\"attrNestedType\"))\n            .isRequired(true)\n            .build();\n\nfinal ProductTypeDraft productTypeDraft =\n    ProductTypeDraftBuilder.of()\n            .name(\"foo\")\n            .description(\"description\")\n            .key(\"key\")\n            .attributes(nestedTypeAttr, setOfNestedTypeAttr)\n            .build();\n</code></pre>"},{"location":"usage/PRODUCT_TYPE_SYNC/#syncoptions","title":"SyncOptions","text":"<p>After the <code>projectApiRoot</code> is setup, a <code>ProductTypeSyncOptions</code> should be built as follows: <pre><code>// instantiating a ProductTypeSyncOptions\nfinal ProductTypeSyncOptions productTypeSyncOptions = ProductTypeSyncOptionsBuilder.of(projectApiRoot).build();\n</code></pre></p> <p><code>SyncOptions</code> is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:</p>"},{"location":"usage/PRODUCT_TYPE_SYNC/#errorcallback","title":"errorCallback","text":"<p>A callback that is called whenever an error event occurs during the sync process. Each resource executes its own  error-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the error-event:</p> <ul> <li>sync exception</li> <li>product type draft from the source</li> <li>product type of the target project (only provided if an existing product type could be found)</li> <li>the update-actions, which failed (only provided if an existing product type could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(ProductTypeSync.class);\n final ProductTypeSyncOptions productTypeSyncOptions = ProductTypeSyncOptionsBuilder\n         .of(projectApiRoot)\n         .errorCallback((syncException, draft, productType, updateActions) -&gt; \n            logger.error(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/PRODUCT_TYPE_SYNC/#warningcallback","title":"warningCallback","text":"<p>A callback is called whenever a warning event occurs during the sync process. Each resource executes its own  warning-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the warning message:</p> <ul> <li>sync exception</li> <li>product type draft from the source </li> <li>product type of the target project (only provided if an existing product type could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(ProductTypeSync.class);\n final ProductTypeSyncOptions productTypeSyncOptions = ProductTypeSyncOptionsBuilder\n         .of(projectApiRoot)\n         .warningCallback((syncException, draft, productType) -&gt; \n            logger.warn(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/PRODUCT_TYPE_SYNC/#beforeupdatecallback","title":"beforeUpdateCallback","text":"<p>During the sync process, if a target product type and a product type draft are matched, this callback can be used to  intercept the update request just before it is sent to the commercetools platform. This allows the user to modify  update actions array with custom actions or discard unwanted actions. The callback provides the following information :</p> <ul> <li>product type draft from the source</li> <li>product type from the target project</li> <li>update actions that were calculated after comparing both</li> </ul> <pre><code>final TriFunction&lt;\n        List&lt;ProductTypeUpdateAction&gt;, ProductTypeDraft, ProductType, List&lt;ProductTypeUpdateAction&gt;&gt; \n            beforeUpdateProductTypeCallback =\n            (updateActions, newProductTypeDraft, oldProductType) -&gt;  updateActions.stream()\n                    .filter(updateAction -&gt; !(updateAction instanceof ProductTypeRemoveAttributeDefinitionAction))\n                    .collect(Collectors.toList());\n\nfinal ProductTypeSyncOptions productTypeSyncOptions = \n        ProductTypeSyncOptionsBuilder.of(projectApiRoot).beforeUpdateCallback(beforeUpdateProductTypeCallback).build();\n</code></pre>"},{"location":"usage/PRODUCT_TYPE_SYNC/#beforecreatecallback","title":"beforeCreateCallback","text":"<p>During the sync process, if a product type draft should be created, this callback can be used to intercept the create request just before it is sent to the commercetools platform.  It contains the following information : </p> <ul> <li>product type draft that should be created</li> </ul> <p>Please refer to example in product sync document.</p>"},{"location":"usage/PRODUCT_TYPE_SYNC/#batchsize","title":"batchSize","text":"<p>A number that could be used to set the batch size with which product types are fetched and processed, as product types are obtained from the target project on the commercetools platform in batches for better performance. The algorithm accumulates up to <code>batchSize</code> resources from the input list, then fetches the corresponding product types from the target project on the commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is <code>50</code> for product type sync.</p> <pre><code>final ProductTypeSyncOptions productTypeSyncOptions = \n         ProductTypeSyncOptionsBuilder.of(projectApiRoot).batchSize(30).build();\n</code></pre>"},{"location":"usage/PRODUCT_TYPE_SYNC/#cachesize","title":"cacheSize","text":"<p>In the service classes of the commercetools-sync-java library, we have implemented an in-memory LRU cache to store a map used for the reference resolution of the library. The cache reduces the reference resolution based calls to the commercetools API as the required fields of a resource will be fetched only one time. These cached fields then might be used by another resource referencing the already resolved resource instead of fetching from commercetools API. It turns out, having the in-memory LRU cache will improve the overall performance of the sync library and commercetools API. which will improve the overall performance of the sync and commercetools API.</p> <p>Playing with this option can change the memory usage of the library. If it is not set, the default cache size is <code>10.000</code> for product type sync.</p> <pre><code>final ProductTypeSyncOptions productTypeSyncOptions = \n         ProductTypeSyncOptionsBuilder.of(projectApiRoot).cacheSize(5000).build();\n</code></pre>"},{"location":"usage/PRODUCT_TYPE_SYNC/#running-the-sync","title":"Running the sync","text":"<p>After all the aforementioned points in the previous section have been fulfilled, to run the sync: <pre><code>// instantiating a product type sync\nfinal ProductTypeSync productTypeSync = new ProductTypeSync(productTypeSyncOptions);\n\n// execute the sync on your list of product types\nCompletionStage&lt;ProductTypeSyncStatistics&gt; syncStatisticsStage = productTypeSync.sync(productTypeDrafts);\n</code></pre> The result of completing the <code>syncStatisticsStage</code> in the previous code snippet contains a <code>ProductTypeSyncStatistics</code> which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed product types and the processing time of the last sync batch in different time units and in a human-readable format.</p> <pre><code>final ProductTypeSyncStatistics stats = syncStatisticsStage.toCompletebleFuture().join();\nstats.getReportMessage();\n/*\"Summary: 2000 products types were processed in total (1000 created, 995 updated, 5 failed to sync).\"*/\n</code></pre> <p>Note The statistics object contains the processing time of the last batch only. This is due to two reasons:</p> <ol> <li>The sync processing time should not take into account the time between supplying batches to the sync.</li> <li>It is not known by the sync which batch is going to be the last one supplied.</li> </ol>"},{"location":"usage/PRODUCT_TYPE_SYNC/#important-to-note","title":"Important to Note","text":"<ol> <li> <p>If two matching <code>attributeDefinition</code>s (old and new) on the matching <code>productType</code>s (old and new) have a different <code>AttributeType</code>, the sync will remove the existing <code>attributeDefinition</code> and then add a new <code>attributeDefinition</code> with the new <code>AttributeType</code>.</p> </li> <li> <p>The <code>attributeDefinition</code> for which the <code>AttributeType</code> is not defined (<code>null</code>) will not be synced. </p> </li> </ol>"},{"location":"usage/PRODUCT_TYPE_SYNC/#more-examples-of-how-to-use-the-sync","title":"More examples of how to use the sync","text":"<ol> <li>Sync from another CTP project as a source.</li> <li>Sync from an external source.</li> </ol> <p>Make sure to read the Important Usage Tips for optimal performance.</p>"},{"location":"usage/PRODUCT_TYPE_SYNC/#build-all-update-actions","title":"Build all update actions","text":"<p>A utility method provided by the library to compare a ProductType with a new ProductTypeDraft and results in a list of product type update actions. <pre><code>List&lt;ProductTypeUpdateAction&gt; updateActions = ProductTypeSyncUtils.buildActions(productType, productTypeDraft, productTypeSyncOptions);\n</code></pre></p>"},{"location":"usage/PRODUCT_TYPE_SYNC/#build-particular-update-actions","title":"Build particular update action(s)","text":"<p>Utility methods provided by the library to compare the specific fields of a ProductType and a new ProductTypeDraft, and in turn, build  the update action. One example is the <code>buildChangeNameUpdateAction</code> which compares names: <pre><code>Optional&lt;ProductTypeUpdateAction&gt; updateAction = ProductTypeUpdateActionUtils.buildChangeNameAction(oldProductType, productTypeDraft);\n</code></pre> More examples of those utils for different fields can be found here.</p>"},{"location":"usage/PRODUCT_TYPE_SYNC/#caveats","title":"Caveats","text":"<ol> <li>The order of attribute definitions in the synced product types is not guaranteed.</li> <li>Changing the attribute definition type is not supported. Instead, remove and re-add it with a new type manually, either over API or merchant center. For more information please check this ADR.</li> </ol>"},{"location":"usage/PRODUCT_TYPE_SYNC/#migration-guide","title":"Migration Guide","text":"<p>The producttype-sync uses the JVM-SDK-V2, therefore ensure you Install JVM SDK module <code>commercetools-sdk-java-api</code> with any HTTP client module. The default one is <code>commercetools-http-client</code>.</p> <pre><code> &lt;!-- Sample maven pom.xml --&gt;\n &lt;properties&gt;\n     &lt;commercetools.version&gt;LATEST&lt;/commercetools.version&gt;\n &lt;/properties&gt;\n\n &lt;dependencies&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-http-client&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-sdk-java-api&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n &lt;/dependencies&gt;\n</code></pre>"},{"location":"usage/PRODUCT_TYPE_SYNC/#client-configuration-and-creation","title":"Client configuration and creation","text":"<p>For client creation use ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. If you have custom requirements for the client creation make sure to replace <code>SphereClientFactory</code> with <code>ApiRootBuilder</code> as described in this Migration Document.</p>"},{"location":"usage/PRODUCT_TYPE_SYNC/#signature-of-producttypesyncoptions","title":"Signature of ProductTypeSyncOptions","text":"<p>As models and update actions have changed in the JVM-SDK-V2 the signature of SyncOptions is different. It's constructor now takes a <code>ProjectApiRoot</code> as first argument. The callback functions are signed with <code>ProductTypeDraft</code>, <code>ProductType</code> and <code>ProductTypeUpdateAction</code> from <code>package com.commercetools.api.models.product_type.*</code></p> <p>Note: Type <code>UpdateAction&lt;ProductType&gt;</code> has changed to <code>ProductTypeUpdateAction</code>. Make sure you create and supply a specific ProductTypeUpdateAction in <code>beforeUpdateCallback</code>. For that you can use the library-utilities or use a JVM-SDK builder (see also):</p> <pre><code>// Example: Create a producttype update action to change name taking the 'newName' of the productTypeDraft\n    final Function&lt;LocalizedString, ProductTypeUpdateAction&gt; createBeforeUpdateAction =\n        (newName) -&gt; ProductTypeChangeNameAction.builder().name(newName).build();\n\n// Add the change name action to the list of update actions before update is executed\n    final TriFunction&lt;\n            List&lt;ProductTypeUpdateAction&gt;, ProductTypeDraft, ProductType, List&lt;ProductTypeUpdateAction&gt;&gt;\n        beforeUpdateProductTypeCallback =\n            (updateActions, newProductTypeDraft, oldProductType) -&gt; {\n              final ProductTypeUpdateAction beforeUpdateAction =\n                  createBeforeUpdateAction.apply(newProductTypeDraft.getName());\n              updateActions.add(beforeUpdateAction);\n              return updateActions;\n            };\n</code></pre>"},{"location":"usage/PRODUCT_TYPE_SYNC/#build-producttypedraft-syncing-from-external-project","title":"Build ProductTypeDraft (syncing from external project)","text":"<p>The producttype-sync expects a list of <code>ProductTypeDraft</code>s to process. If you use java-sync-library to sync your producttypes from any external system into a commercetools platform project you have to convert your data into CTP compatible <code>ProductTypeDraft</code> type. This was done in previous version using <code>DraftBuilder</code>s. The V2 SDK do not have inheritance for <code>DraftBuilder</code> classes but the differences are minor and you can replace it easily. Here's an example:</p> <p><pre><code>// SDK v1: ProductTypeDraftBuilder.of  takes parameters 'key', 'name', 'description' and list of 'attributes'\nfinal ProductTypeDraft productTypeDraft =\n              ProductTypeDraftBuilder\n                      .of(\"key\", \"name\", \"description\", emptyList())\n                      .build();\n\n// SDK v2: ProductTypeDraftBuilder without draftTemplate\nfinal ProductTypeDraft productTypeDraft =\n              ProductTypeDraftBuilder.of()\n                      .description(\"product-type-description\")\n                      .key(\"product-type-key\")\n                      .name(\"product-type-name\")\n                      .build();\n</code></pre> For more information, see the Guide to replace DraftBuilders.</p>"},{"location":"usage/PRODUCT_TYPE_SYNC/#query-for-producttypes-syncing-from-ctp-project","title":"Query for ProductTypes (syncing from CTP project)","text":"<p>If you sync producttypes between different commercetools projects you probably use ProductTypeTransformUtils#toProductTypeDrafts to transform <code>ProductType</code> into <code>ProductTypeDraft</code> which can be used by the producttype-sync. However, if you need to query <code>ProductTypes</code> from a commercetools project instead of passing <code>ProductTypeQuery</code>s to a <code>sphereClient</code>, create (and execute) requests directly from the <code>apiRoot</code>. Here's an example:</p> <p><pre><code>// SDK v1: ProductTypeQuery to fetch all producttypes\nfinal ProductTypeQuery query = ProductTypeQuery.of();\n\nfinal PagedQueryResult&lt;ProductType&gt; pagedQueryResult = sphereClient.executeBlocking(query);\n\n// SDK v2: Create and execute query to fetch all producttypes in one line\nfinal ProductTypePagedQueryResponse result = apiRoot.productTypes().get().executeBlocking().getBody();\n</code></pre> Read more about querying resources.</p>"},{"location":"usage/PRODUCT_TYPE_SYNC/#jvm-sdk-v2-migration-guide","title":"JVM-SDK-V2 migration guide","text":"<p>On any other needs to migrate your project using jvm-sdk-v2 please refer to its Migration Guide. </p>"},{"location":"usage/QUICK_START/","title":"\u26a1 Quick Start","text":"<ul> <li>1. Installation</li> <li>2. Setup Syncing Options</li> <li>3. Start Syncing</li> <li>4. And you're done \u2728</li> </ul>"},{"location":"usage/QUICK_START/#1-installation","title":"1. Installation","text":"<ul> <li>Make sure you have <code>JDK 11</code> or higher installed.</li> <li>Add the following dependency in your application:</li> <li>For Maven users:  <pre><code>&lt;!-- Add commercetools-sync-java dependency. --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;com.commercetools&lt;/groupId&gt;\n  &lt;artifactId&gt;commercetools-sync-java&lt;/artifactId&gt;\n  &lt;version&gt;10.0.4&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>For Gradle users: <pre><code>// Add commercetools-sync-java dependency.\nimplementation 'com.commercetools:commercetools-sync-java:10.0.4'\n</code></pre></li> </ul>"},{"location":"usage/QUICK_START/#2-setup-syncing-options","title":"2. Setup Syncing Options","text":"<pre><code>final Logger logger = LoggerFactory.getLogger(MySync.class);\nfinal ProductSyncOptions productsyncOptions = ProductSyncOptionsBuilder\n                                .of(projectApiRoot)\n                                .errorCallback((syncException, draft, productProjection, updateActions) -&gt; \n                                   logger.error(syncException.getMessage(), syncException))\n                                .warningCallback((exception, oldProductProjection, newResources) -&gt; \n                                   logger.warn(exception.getMessage(), exception))\n                                .build();\n</code></pre>"},{"location":"usage/QUICK_START/#3-start-syncing","title":"3. Start Syncing","text":"<pre><code>// Transform your product feed batch into a list of ProductDrafts using your preferred way.\nfinal List&lt;ProductDraft&gt; productDraftsBatch = ...\n\nfinal ProductSync productSync = new ProductSync(productSyncOptions);\n\n// execute the sync on your list of products\nfinal CompletionStage&lt;ProductSyncStatistics&gt; syncStatisticsStage = productSync.sync(productDraftsBatch);\n</code></pre>"},{"location":"usage/QUICK_START/#4-and-youre-done","title":"4. And you're done \u2728","text":"<pre><code>final ProductSyncStatistics stats = syncStatisticsStage.toCompletebleFuture()\n                                                       .join();\nstats.getReportMessage(); \n/*\"Summary: 2000 product(s) were processed in total (1000 created, 995 updated, 5 failed to sync and 0 \nproduct(s) with missing reference(s)).\"*/\n</code></pre>"},{"location":"usage/QUICK_START/#more-details","title":"More Details","text":"<p>Product Sync, ProductType Sync,  Category Sync, Inventory Sync,  Type Sync, CartDiscount Sync, TaxCategory Sync, State Sync,  CustomObject Sync, Customer Sync, ShoppingLists Sync</p>"},{"location":"usage/SHOPPING_LIST_SYNC/","title":"Shopping List Sync","text":"<p>The module used for importing/syncing Shopping Lists into a commercetools project.  It also provides utilities for generating update actions based on the comparison of a ShoppingList  against a ShoppingListDraft.</p> <p>Table of Contents </p> <ul> <li>Usage</li> <li>Prerequisites<ul> <li>ProjectApiRoot</li> <li>Required Fields</li> <li>Reference Resolution</li> <li>Syncing from a commercetools project</li> <li>Syncing from an external resource</li> <li>SyncOptions</li> <li>errorCallback</li> <li>warningCallback</li> <li>beforeUpdateCallback</li> <li>beforeCreateCallback</li> <li>batchSize</li> <li>cacheSize</li> </ul> </li> <li>Running the sync<ul> <li>More examples of how to use the sync</li> </ul> </li> <li>Build all update actions</li> <li>Build particular update action(s)</li> <li>Caveats</li> <li>Migration Guide</li> <li>Client configuration and creation</li> <li>Signature of ShoppingListSyncOptions</li> <li>Build ShoppingListDraft (syncing from external project)</li> <li>Query for ShoppingLists (syncing from CTP project)</li> <li>JVM-SDK-V2 migration guide</li> </ul>"},{"location":"usage/SHOPPING_LIST_SYNC/#usage","title":"Usage","text":""},{"location":"usage/SHOPPING_LIST_SYNC/#prerequisites","title":"Prerequisites","text":""},{"location":"usage/SHOPPING_LIST_SYNC/#projectapiroot","title":"ProjectApiRoot","text":"<p>Use the ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. To create the required <code>ClientCredentials</code> for client creation, please utilize the <code>ClientCredentialsBuilder</code> provided in the java-sdk-v2 Client OAUTH2 package. If you have custom requirements for the client creation, have a look into the Important Usage Tips.</p> <pre><code>final ClientCredentials clientCredentials =\n        new ClientCredentialsBuilder()\n        .withClientId(\"client-id\")\n        .withClientSecret(\"client-secret\")\n        .withScopes(\"scopes\")\n        .build();\nfinal ProjectApiRoot apiRoot = ClientConfigurationUtils.createClient(\"project-key\", clientCredentials, \"auth-url\", \"api-url\");\n</code></pre>"},{"location":"usage/SHOPPING_LIST_SYNC/#required-fields","title":"Required Fields","text":"<p>The following fields are required to be set in, otherwise, they won't be matched by sync:</p> Draft Required Fields Note ShoppingListDraft <code>key</code> Also, the shopping lists in the target project are expected to have the <code>key</code> fields set. LineItemDraft <code>sku</code> Also, all the line items in the target project are expected to have the <code>sku</code> fields set. TextLineItemDraft <code>name</code>"},{"location":"usage/SHOPPING_LIST_SYNC/#reference-resolution","title":"Reference Resolution","text":"<p>In commercetools, a reference can be created by providing the key instead of the ID with the type ResourceIdentifier. When the reference key is provided with a <code>ResourceIdentifier</code>, the sync will resolve the resource with the given key and use the ID of the found resource to create or update a reference. Therefore, in order to resolve the actual ids of those references in the sync process, <code>ResourceIdentifier</code>s with their <code>key</code>s have to be supplied. </p> Reference Field Type <code>customer</code> CustomerResourceIdentifier <code>custom.type</code> TypeResourceIdentifier <code>lineItems.custom.type</code> TypeResourceIdentifier <code>textLineItems.custom.type</code> TypeResourceIdentifier <p>Note that a reference without the key field will be considered as an existing resource on the target commercetools project and the library will issue an update/create an API request without reference resolution.</p>"},{"location":"usage/SHOPPING_LIST_SYNC/#syncing-from-a-commercetools-project","title":"Syncing from a commercetools project","text":"<p>When syncing from a source commercetools project, you can use <code>toShoppingListDrafts</code>  method that transforms(resolves by querying and caching key-id pairs) and maps from a <code>ShoppingList</code> to <code>ShoppingListDraft</code> using cache in order to make them ready for reference resolution by the sync, for example: </p> <pre><code>// Build a ShoppingListQuery for fetching shopping lists from a source CTP project with expansion for line items for the sync:\nfinal ByProjectKeyShoppingListsGet byProjectKeyShoppingListsGet = client.shoppingLists().addExpand(\"lineItems[*].variant\").get();\n\n// Query all shopping lists (NOTE this is just for example, please adjust your logic)\nfinal List&lt;ShoppingList&gt; states = QueryUtils.queryAll(byProjectKeyShoppingListsGet,\n        (shoppingLists) -&gt; shoppingLists)\n        .thenApply(lists -&gt; lists.stream().flatMap(List::stream).collect(Collectors.toList()))\n        .toCompletableFuture()\n        .join();\n</code></pre> <p>In order to transform and map the <code>ShoppingList</code> to <code>ShoppingListDraft</code>,  Utils method <code>toShoppingListDrafts</code> requires <code>projectApiRoot</code>, implementation of <code>ReferenceIdToKeyCache</code> and <code>shoppingLists</code> as parameters. For cache implementation, you can use your own cache implementation or use the class in the library - which implements the cache using caffeine library with an LRU (Least Recently Used) based cache eviction strategy<code>CaffeineReferenceIdToKeyCacheImpl</code>. Example as shown below:</p> <pre><code>//Implement the cache using library class.\nfinal ReferenceIdToKeyCache referenceIdToKeyCache = new CaffeineReferenceIdToKeyCacheImpl();\n\n//For every reference fetch its key using id, cache it and map from ShoppingList to ShoppingListDraft. With help of the cache same reference keys can be reused.\nfinal CompletableFuture&lt;List&lt;ShoppingListDraft&gt;&gt; shoppingListDrafts = ShoppingListTransformUtils.toShoppingListDrafts(client, referenceIdToKeyCache, shoppingLists);\n</code></pre>"},{"location":"usage/SHOPPING_LIST_SYNC/#syncing-from-an-external-resource","title":"Syncing from an external resource","text":"<ul> <li>When syncing from an external resource, <code>ResourceIdentifier</code>s with their <code>key</code>s have to be supplied as following example:</li> </ul> <pre><code>final ShoppingListDraft shoppingListDraft =\n    ShoppingListDraftBuilder\n        .of()\n        .name(LocalizedString.ofEnglish(\"name\"))\n        .key(\"shopping-list-key\")\n        .customer(CustomerResourceIdentifierBuilder.of().key(\"customer-key\").build()) // note that customer provided with key\n        .custom(CustomFieldsDraftBuilder.of().type(typeResourceIdentifierBuilder -&gt; typeResourceIdentifierBuilder.key(\"type-key\"))\n            .fields(fieldContainerBuilder -&gt; fieldContainerBuilder.values(Map.of())).build()\n        ) // note that custom type provided with key\n        .lineItems(List.of(ShoppingListLineItemDraftBuilder\n          .of()\n          .sku(\"SKU-1\")\n          .quantity(1L) // note that sku field is set.\n          .custom(CustomFieldsDraftBuilder.of().type(typeResourceIdentifierBuilder -&gt; typeResourceIdentifierBuilder.key(\"type-key\"))\n             .fields(fieldContainerBuilder -&gt; fieldContainerBuilder.values(Map.of())).build()\n           ) // note that custom type provided with key\n          .build())\n        )\n        .textLineItems(List.of(\n            TextLineItemDraftBuilder.of().name(ofEnglish(\"name\")).quantity(1L) // note that name field is set for text line item.\n              .custom(CustomFieldsDraftBuilder.of().type(typeResourceIdentifierBuilder -&gt; typeResourceIdentifierBuilder.key(\"type-key\"))\n                .fields(fieldContainerBuilder -&gt; fieldContainerBuilder.values(Map.of())).build()\n              ) // note that custom type provided with key\n              .build()\n          )\n        )\n        .build();\n</code></pre>"},{"location":"usage/SHOPPING_LIST_SYNC/#syncoptions","title":"SyncOptions","text":"<p>After the <code>projectApiRoot</code> is set up, a <code>ShoppingListSyncOptions</code> should be built as follows: <pre><code>// instantiating a ShoppingListSyncOptions\nfinal ShoppingListSyncOptions shoppingListSyncOptions = ShoppingListSyncOptionsBuilder.of(projectApiRoot).build();\n</code></pre></p> <p><code>SyncOptions</code> is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:</p>"},{"location":"usage/SHOPPING_LIST_SYNC/#errorcallback","title":"errorCallback","text":"<p>A callback that is called whenever an error event occurs during the sync process. Each resource executes its own  error-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the error-event:</p> <ul> <li>sync exception</li> <li>shopping list draft from the source</li> <li>shopping list of the target project (only provided if an existing shopping list could be found)</li> <li>the update-actions, which failed (only provided if an existing shopping list could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(ShoppingListSync.class);\n final ShoppingListSyncOptions shoppingListSyncOptions = ShoppingListSyncOptionsBuilder\n         .of(projectApiRoot)\n         .errorCallback((syncException, draft, shoppingList, updateActions) -&gt; \n            logger.error(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/SHOPPING_LIST_SYNC/#warningcallback","title":"warningCallback","text":"<p>A callback is called whenever a warning event occurs during the sync process. Each resource executes its own  warning-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the warning message:</p> <ul> <li>sync exception</li> <li>shopping list draft from the source </li> <li>shopping list of the target project (only provided if an existing shopping list could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(ShoppingListSync.class);\n final ShoppingListSyncOptions shoppingListSyncOptions = ShoppingListSyncOptionsBuilder\n         .of(projectApiRoot)\n         .warningCallback((syncException, draft, shoppingList) -&gt; \n            logger.warn(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/SHOPPING_LIST_SYNC/#beforeupdatecallback","title":"beforeUpdateCallback","text":"<p>During the sync process, if a target customer and a customer draft are matched, this callback can be used to  intercept the update request just before it is sent to the commercetools platform. This allows the user to modify  update actions array with custom actions or discard unwanted actions. The callback provides the following information :</p> <ul> <li>shopping list draft from the source</li> <li>shopping list from the target project</li> <li>update actions that were calculated after comparing both</li> </ul> <pre><code>final TriFunction&lt;List&lt;ShoppingListUpdateAction&gt;, ShoppingListDraft, ShoppingList,\n            List&lt;ShoppingListUpdateAction&gt;&gt; beforeUpdateCallback =\n                (updateActions, newShoppingList, oldShoppingList) -&gt;  updateActions\n                    .stream()\n                    .filter(updateAction -&gt; !(updateAction instanceof ShoppingListSetSlugAction))\n                    .collect(Collectors.toList());\n\nfinal ShoppingListSyncOptions shoppingListSyncOptions = ShoppingListSyncOptionsBuilder\n                    .of(projectApiRoot)\n                    .beforeUpdateCallback(beforeUpdateCallback)\n                    .build();\n</code></pre>"},{"location":"usage/SHOPPING_LIST_SYNC/#beforecreatecallback","title":"beforeCreateCallback","text":"<p>During the sync process, if a shopping list draft should be created, this callback can be used to intercept the create request just before it is sent to the commercetools platform.  It contains the following information : </p> <ul> <li>shopping list that should be created</li> </ul> <p>Please refer to the example in the product sync document.</p>"},{"location":"usage/SHOPPING_LIST_SYNC/#batchsize","title":"batchSize","text":"<p>A number that could be used to set the batch size with which shopping lists are fetched and processed, as shopping lists are obtained from the target project on the commercetools platform in batches for better performance. The algorithm accumulates up to <code>batchSize</code> resources from the input list, then fetches the corresponding shopping lists from the target project on the commercetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for shopping list sync.</p> <pre><code>final ShoppingListSyncOptions shoppingListSyncOptions = \n         ShoppingListSyncOptionsBuilder.of(projectApiRoot).batchSize(30).build();\n</code></pre>"},{"location":"usage/SHOPPING_LIST_SYNC/#cachesize","title":"cacheSize","text":"<p>In the service classes of the commercetools-sync-java library, we have implemented an in-memory LRU cache to store a map used for the reference resolution of the library. The cache reduces the reference resolution based calls to the commercetools API as the required fields of a resource will be fetched only one time. These cached fields then might be used by another resource referencing the already resolved resource instead of fetching from commercetools API. It turns out, having the in-memory LRU cache will improve the overall performance of the sync library and commercetools API. which will improve the overall performance of the sync and commercetools API.</p> <p>Playing with this option can change the memory usage of the library. If it is not set, the default cache size is <code>10.000</code> for shopping list sync.</p> <pre><code>final ShoppingListSyncOptions shoppingListSyncOptions = \n         ShoppingListSyncOptionsBuilder.of(projectApiRoot).cacheSize(5000).build();\n</code></pre>"},{"location":"usage/SHOPPING_LIST_SYNC/#running-the-sync","title":"Running the sync","text":"<p>When all prerequisites are fulfilled, follow these steps to run the sync:</p> <p><pre><code>// instantiating a shopping list sync\nfinal ShoppingListSync shoppingListSync = new ShoppingListSync(shoppingListSyncOptions);\n\n// execute the sync on your list of shopping lists\nCompletionStage&lt;ShoppingListSyncStatistics&gt; syncStatisticsStage = shoppingListSync.sync(shoppingListDrafts);\n</code></pre> The result of completing the <code>syncStatisticsStage</code> in the previous code snippet contains a <code>ShoppingListSyncStatistics</code> which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed shopping lists, and the processing time of the last sync batch in different time units and in a human-readable format.</p> <pre><code>final ShoppingListSyncStatistics stats = syncStatisticsStage.toCompletebleFuture().join();\nstats.getReportMessage();\n/*\"Summary: 100 shopping lists were processed in total (11 created, 87 updated, 2 failed to sync).\"*/\n</code></pre> <p>Note The statistics object contains the processing time of the last batch only. This is due to two reasons:</p> <ol> <li>The sync processing time should not take into account the time between supplying batches to the sync.</li> <li>It is not known by the sync which batch is going to be the last one supplied.</li> </ol>"},{"location":"usage/SHOPPING_LIST_SYNC/#more-examples-of-how-to-use-the-sync","title":"More examples of how to use the sync","text":"<ol> <li>Sync from another CTP project as a source.</li> <li>Sync from an external source.</li> </ol> <p>Make sure to read the Important Usage Tips for optimal performance.</p>"},{"location":"usage/SHOPPING_LIST_SYNC/#build-all-update-actions","title":"Build all update actions","text":"<p>A utility method provided by the library to compare a <code>ShoppingList</code> to a new <code>ShoppingListDraft</code>. The results are collected in a list of shopping list update actions.  <pre><code>List&lt;ShoppingListUpdateAction&gt; updateActions = ShoppingListSyncUtils.buildActions(shoppingList, shoppingListDraft, shoppingListSyncOptions);\n</code></pre></p>"},{"location":"usage/SHOPPING_LIST_SYNC/#build-particular-update-actions","title":"Build particular update action(s)","text":"<p>The library provides utility methods to compare specific fields of a <code>ShoppingList</code> and a new <code>ShoppingListDraft</code>, and builds the update action(s) as a result.  One example is the <code>buildChangeNameUpdateAction</code> which compare shopping list names:  <pre><code>Optional&lt;ShoppingListUpdateAction&gt; updateAction = ShoppingListUpdateActionUtils.buildChangeNameAction(shoppingList, shoppingListDraft);\n</code></pre></p> <p>More examples for particular update actions can be found in the test scenarios for ShoppingListUpdateActionUtils.</p>"},{"location":"usage/SHOPPING_LIST_SYNC/#caveats","title":"Caveats","text":"<p>In commercetools shopping lists API, there is no update action to change the <code>addedAt</code> field of the <code>LineItem</code> and <code>TextLineItem</code>,  hereby commercetools-java-sync library will not update the <code>addedAt</code> value. </p> <p>For the new LineItem and TextLineItem the <code>addedAt</code> values will be added, if the draft has the value set.</p>"},{"location":"usage/SHOPPING_LIST_SYNC/#migration-guide","title":"Migration Guide","text":"<p>The shopping-list-sync uses the JVM-SDK-V2, therefore ensure you Install JVM SDK module <code>commercetools-sdk-java-api</code> with any HTTP client module. The default one is <code>commercetools-http-client</code>.</p> <pre><code> &lt;!-- Sample maven pom.xml --&gt;\n &lt;properties&gt;\n     &lt;commercetools.version&gt;LATEST&lt;/commercetools.version&gt;\n &lt;/properties&gt;\n\n &lt;dependencies&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-http-client&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-sdk-java-api&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n &lt;/dependencies&gt;\n</code></pre>"},{"location":"usage/SHOPPING_LIST_SYNC/#client-configuration-and-creation","title":"Client configuration and creation","text":"<p>For client creation use ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. If you have custom requirements for the client creation make sure to replace <code>SphereClientFactory</code> with <code>ApiRootBuilder</code> as described in this Migration Document.</p>"},{"location":"usage/SHOPPING_LIST_SYNC/#signature-of-shoppinglistsyncoptions","title":"Signature of ShoppingListSyncOptions","text":"<p>As models and update actions have changed in the JVM-SDK-V2 the signature of SyncOptions is different. It's constructor now takes a <code>ProjectApiRoot</code> as first argument. The callback functions are signed with <code>ShoppingListDraft</code>, <code>ShoppingList</code> and <code>ShoppingListUpdateAction</code> from <code>package com.commercetools.api.models.shopping_list.*</code></p> <p>Note: Type <code>UpdateAction&lt;ShoppingList&gt;</code> has changed to <code>ShoppingListUpdateAction</code>. Make sure you create and supply a specific ShoppingListUpdateAction in <code>beforeUpdateCallback</code>. For that you can use the library-utilities or use a JVM-SDK builder (see also):</p> <pre><code>// Example: Create a shopping-list update action to change name taking the 'newName' of the shoppingListDraft\n    final Function&lt;LocalizedString, ShoppingListUpdateAction&gt; createBeforeUpdateAction =\n        (newName) -&gt; ShoppingListChangeNameAction.builder().name(newName).build();\n\n// Add the change name action to the list of update actions before update is executed\n    final TriFunction&lt;\n            List&lt;ShoppingListUpdateAction&gt;, ShoppingListDraft, ShoppingList, List&lt;ShoppingListUpdateAction&gt;&gt;\n        beforeUpdateShoppingListCallback =\n            (updateActions, newShoppingListDraft, oldShoppingList) -&gt; {\n              final ShoppingListUpdateAction beforeUpdateAction =\n                  createBeforeUpdateAction.apply(newShoppingListDraft.getName());\n              updateActions.add(beforeUpdateAction);\n              return updateActions;\n            };\n</code></pre>"},{"location":"usage/SHOPPING_LIST_SYNC/#build-shoppinglistdraft-syncing-from-external-project","title":"Build ShoppingListDraft (syncing from external project)","text":"<p>The shopping-list-sync expects a list of <code>ShoppingListDraft</code>s to process. If you use java-sync-library to sync your shopping-lists from any external system into a commercetools platform project you have to convert your data into CTP compatible <code>ShoppingListDraft</code> type. This was done in previous version using <code>DraftBuilder</code>s. The V2 SDK do not have inheritance for <code>DraftBuilder</code> classes but the differences are minor and you can replace it easily. Here's an example:</p> <p><pre><code>// SDK v1: ShoppingListDraftBuilder.of  takes parameters 'key', 'name' and 1 line item \nfinal ShoppingListDraft shoppingListDraft =\n        ShoppingListDraftBuilder.of(LocalizedString.ofEnglish(\"name\"))\n          .key(\"key\")\n          .plusLineItems(LineItemDraftBuilder.ofSku(\"sku\", Long.valueOf(1)).build())\n          .build()\n\n// SDK v2: ShoppingListDraftBuilder without draftTemplate\nfinal ShoppingListDraft shoppingListDraft =\n        ShoppingListDraftBuilder.of()\n          .name(LocalizedString.ofEnglish(\"name\"))\n          .key(\"product-type-key\")\n          .lineItems(ShoppingListLineItemDraftBuilder.of().sku(\"SKU-1\").quantity(1L).build())\n          .build();\n</code></pre> For more information, see the Guide to replace DraftBuilders.</p>"},{"location":"usage/SHOPPING_LIST_SYNC/#query-for-shoppinglists-syncing-from-ctp-project","title":"Query for ShoppingLists (syncing from CTP project)","text":"<p>If you sync shopping lists between different commercetools projects you probably use ShoppingListTransformUtils#toShoppingListDrafts to transform <code>ShoppingList</code> into <code>ShoppingListDraft</code> which can be used by the shopping-list-sync. However, if you need to query <code>ShoppingLists</code> from a commercetools project instead of passing <code>ShoppingListQuery</code>s to a <code>sphereClient</code>, create (and execute) requests directly from the <code>apiRoot</code>. Here's an example:</p> <p><pre><code>// SDK v1: ShoppingListQuery to fetch all shopping lists\nfinal ShoppingListQuery query = ShoppingListQuery.of();\n\nfinal PagedQueryResult&lt;ShoppingList&gt; pagedQueryResult = sphereClient.executeBlocking(query);\n\n// SDK v2: Create and execute query to fetch all shopping lists in one line\nfinal ShoppingListPagedQueryResponse result = apiRoot.shoppingLists().get().executeBlocking().getBody();\n</code></pre> Read more about querying resources.</p>"},{"location":"usage/SHOPPING_LIST_SYNC/#jvm-sdk-v2-migration-guide","title":"JVM-SDK-V2 migration guide","text":"<p>On any other needs to migrate your project using jvm-sdk-v2 please refer to its Migration Guide. </p>"},{"location":"usage/STATE_SYNC/","title":"State Sync","text":"<p>The module used for importing/syncing States into a commercetools project.  It also provides utilities for generating update actions based on the comparison a State (which basically represents what commercetools already has) against a StateDraft (which represents a new version of the state supplied by the user).</p> <ul> <li>Usage</li> <li>Prerequisites<ul> <li>ProjectApiRoot</li> <li>Required Fields</li> <li>Reference Resolution</li> <li>Syncing from a commercetools project</li> <li>Syncing from an external resource</li> <li>SyncOptions</li> <li>errorCallback</li> <li>warningCallback</li> <li>beforeUpdateCallback</li> <li>beforeCreateCallback</li> <li>batchSize</li> <li>cacheSize</li> </ul> </li> <li>Running the sync<ul> <li>Persistence of StateDrafts with missing references</li> <li>More examples of how to use the sync</li> </ul> </li> <li>Build all update actions</li> <li>Build particular update action(s)</li> <li>Migration Guide</li> <li>Client configuration and creation</li> <li>Signature of StateSyncOptions</li> <li>Build StateDraft (syncing from external project)</li> <li>Query for states (syncing from CTP project)</li> <li>Referencing other states in transitions</li> </ul>"},{"location":"usage/STATE_SYNC/#usage","title":"Usage","text":""},{"location":"usage/STATE_SYNC/#prerequisites","title":"Prerequisites","text":""},{"location":"usage/STATE_SYNC/#projectapiroot","title":"ProjectApiRoot","text":"<p>Use the ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. To create <code>ClientCredentials</code> which are required for creating a client please use the <code>ClientCredentialsBuilder</code> provided in java-sdk-v2 Client OAUTH2 package If you have custom requirements for the client creation, have a look into the Important Usage Tips.</p> <pre><code>final ClientCredentials clientCredentials =\n        new ClientCredentialsBuilder()\n        .withClientId(\"client-id\")\n        .withClientSecret(\"client-secret\")\n        .withScopes(\"scopes\")\n        .build();\nfinal ProjectApiRoot apiRoot = ClientConfigurationUtils.createClient(\"project-key\", clientCredentials, \"auth-url\", \"api-url\");\n</code></pre>"},{"location":"usage/STATE_SYNC/#required-fields","title":"Required Fields","text":"<p>The following fields are required to be set in, otherwise, they won't be matched by sync:</p> Draft Required Fields Note StateDraft <code>key</code> Also, the states in the target project are expected to have the <code>key</code> fields set."},{"location":"usage/STATE_SYNC/#reference-resolution","title":"Reference Resolution","text":"<p><code>Transitions</code> are a way to describe possible transformations of the current state to other states of the same type (for example Initial -&gt; Shipped). When performing a SetTransitions, an array of ResourceIdentifiers to State is needed. In commercetools, a ResourceIdentifier can be created by providing either the key or the ID.  When the key to a referenced state is provided with a <code>ResourceIdentifier</code>, the sync will resolve the resource with the given key and use the ID of the found resource to create or update a reference. </p> ResourceIdentifier Field Type <code>transitions</code> Array of StateResourceIdentifiers"},{"location":"usage/STATE_SYNC/#syncing-from-a-commercetools-project","title":"Syncing from a commercetools project","text":"<p>When syncing from a source commercetools project, you can use <code>toStateDrafts</code>  method that transforms(resolves by querying and caching key-id pairs) and maps from a <code>State</code> to <code>StateDraft</code> using cache in order to make them ready for reference resolution by the sync, for example: </p> <pre><code>// Build a ByProjectKeyStatesGet for fetching states from a source CTP project without any references expanded for the sync:\nfinal ByProjectKeyStatesGet byProjectKeyStatesGet = client.states().get();\n\n// Query all states (NOTE this is just for example, please adjust your logic)\nfinal List&lt;State&gt; states = QueryUtils.queryAll(byProjectKeyStatesGet,\n        (states) -&gt; states)\n        .thenApply(lists -&gt; lists.stream().flatMap(List::stream).collect(Collectors.toList()))\n        .toCompletableFuture()\n        .join();\n</code></pre> <p>In order to transform and map the <code>State</code> to <code>StateDraft</code>,  Utils method <code>toStateDrafts</code> requires <code>projectApiRoot</code>, implementation of <code>ReferenceIdToKeyCache</code> and <code>states</code> as parameters. For cache implementation, You can use your own cache implementation or use the class in the library - which implements the cache using caffeine library with an LRU (Least Recently Used) based cache eviction strategy<code>CaffeineReferenceIdToKeyCacheImpl</code>. Example as shown below:</p> <pre><code>//Implement the cache using library class.\nfinal ReferenceIdToKeyCache referenceIdToKeyCache = new CaffeineReferenceIdToKeyCacheImpl();\n\n//For every reference fetch its key using id, cache it and map from State to StateDraft. With help of the cache same reference keys can be reused.\nfinal CompletableFuture&lt;List&lt;StateDraft&gt;&gt; stateDrafts = StateTransformUtils.toStateDrafts(client, referenceIdToKeyCache, states);\n</code></pre>"},{"location":"usage/STATE_SYNC/#syncing-from-an-external-resource","title":"Syncing from an external resource","text":"<ul> <li>When syncing from an external resource, <code>ResourceIdentifier</code>s with their <code>key</code>s have to be supplied as following example:</li> </ul> <pre><code>final StateDraft stateDraft = StateDraftBuilder.of()\n        .key(\"state-key\")\n        .type(StateTypeEnum.LINE_ITEM_STATE)\n        .transitions(StateResourceIdentifierBuilder.of().key(\"another-state-key\").build())\n        .build();\n</code></pre>"},{"location":"usage/STATE_SYNC/#syncoptions","title":"SyncOptions","text":"<p>After the <code>projectApiRoot</code> is set up, a <code>StateSyncOptions</code> should be built as follows: </p> <pre><code>// instantiating a StateSyncOptions\n   final StateSyncOptions stateSyncOptions = StateSyncOptionsBuilder.of(projectApiRoot).build();\n</code></pre> <p><code>SyncOptions</code> is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:</p>"},{"location":"usage/STATE_SYNC/#errorcallback","title":"errorCallback","text":"<p>A callback that is called whenever an error event occurs during the sync process. Each resource executes its own  error-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the error-event:</p> <ul> <li>sync exception</li> <li>state draft from the source</li> <li>state of the target project (only provided if an existing state could be found)</li> <li>the update-actions, which failed (only provided if an existing state could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(StateSync.class);\n final StateSyncOptions stateSyncOptions = StateSyncOptionsBuilder\n         .of(projectApiRoot)\n         .errorCallback((syncException, draft, state, updateActions) -&gt; \n            logger.error(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/STATE_SYNC/#warningcallback","title":"warningCallback","text":"<p>A callback is called whenever a warning event occurs during the sync process. Each resource executes its own  warning-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the warning message:</p> <ul> <li>sync exception</li> <li>state draft from the source </li> <li>state of the target project (only provided if an existing state could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(StateSync.class);\n final StateSyncOptions stateSyncOptions = StateSyncOptionsBuilder\n         .of(projectApiRoot)\n         .warningCallback((syncException, draft, state) -&gt; \n            logger.warn(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/STATE_SYNC/#beforeupdatecallback","title":"beforeUpdateCallback","text":"<p>During the sync process, if a target state and a state draft are matched, this callback can be used to  intercept the update request just before it is sent to the commercetools platform. This allows the user to modify  update actions array with custom actions or discard unwanted actions. The callback provides the following information :</p> <ul> <li>state draft from the source</li> <li>state from the target project</li> <li>update actions that were calculated after comparing both</li> </ul> <pre><code>final TriFunction&lt;\n        List&lt;StateUpdateAction&gt;, StateDraft, State, List&lt;StateUpdateAction&gt;&gt; \n            beforeUpdateStateCallback =\n            (updateActions, newStateDraft, oldState) -&gt;  updateActions.stream()\n                    .filter(updateAction -&gt; !(updateAction instanceof StateRemoveRolesAction))\n                    .collect(Collectors.toList());\n\nfinal StateSyncOptions stateSyncOptions = \n        StateSyncOptionsBuilder.of(projectApiRoot).beforeUpdateCallback(beforeUpdateStateCallback).build();\n</code></pre>"},{"location":"usage/STATE_SYNC/#beforecreatecallback","title":"beforeCreateCallback","text":"<p>During the sync process, if a state draft should be created, this callback can be used to intercept the create request just before it is sent to the commercetools platform.  It contains the following information : </p> <ul> <li>state draft that should be created</li> </ul> <p>Please refer to example in product sync document.</p>"},{"location":"usage/STATE_SYNC/#batchsize","title":"batchSize","text":"<p>A number that could be used to set the batch size with which states are fetched and processed, as states are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to <code>batchSize</code> resources from the input list, then fetches the corresponding states from the target project on the commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for state sync.</p> <pre><code>final StateSyncOptions stateSyncOptions = \n         StateSyncOptionsBuilder.of(projectApiRoot).batchSize(30).build();\n</code></pre>"},{"location":"usage/STATE_SYNC/#cachesize","title":"cacheSize","text":"<p>In the service classes of the commercetools-sync-java library, we have implemented an in-memory LRU cache to store a map used for the reference resolution of the library. The cache reduces the reference resolution based calls to the commercetools API as the required fields of a resource will be fetched only one time. These cached fields then might be used by another resource referencing the already resolved resource instead of fetching from commercetools API. It turns out, having the in-memory LRU cache will improve the overall performance of the sync library and commercetools API. which will improve the overall performance of the sync and commercetools API.</p> <p>Playing with this option can change the memory usage of the library. If it is not set, the default cache size is <code>10.000</code> for state sync.</p> <pre><code>final StateSyncOptions stateSyncOptions = \n         StateSyncOptionsBuilder.of(projectApiRoot).cacheSize(5000).build();\n</code></pre>"},{"location":"usage/STATE_SYNC/#running-the-sync","title":"Running the sync","text":"<p>After all the aforementioned points in the previous section have been fulfilled, run the sync as follows: <pre><code>// instantiating a State sync\n   final StateSync stateSync = new StateSync(stateSyncOptions);\n\n// execute the sync on your list of StateDraft\n  final CompletionStage&lt;StateSyncStatistics&gt; stateSyncStatisticsStage = stateSync.sync(stateDrafts);\n</code></pre> The result of the completing the <code>StateSyncStatistics</code> in the previous code snippet contains a <code>StateSyncStatistics</code> which contains all the stats of the sync process; which includes a report message, the total number of updated, created,  failed, processed states, the missing parent of transitions and the processing time of the sync in different time units and in a human-readable format. <pre><code>final StateSyncStatistics stats = stateSyncStatisticsStage.toCompletebleFuture().join();\nstats.getReportMessage(); \n// Summary: 3 state(s) were processed in total (3 created, 0 updated, 0 failed to sync and 0 state(s) with missing transition(s).\n</code></pre></p> <p>Note The statistics object contains the processing time of the last batch only. This is due to two reasons:</p> <ol> <li>The sync processing time should not take into account the time between supplying batches to the sync.</li> <li>It is not known by the sync which batch is going to be the last one supplied.</li> </ol>"},{"location":"usage/STATE_SYNC/#persistence-of-statedrafts-with-missing-references","title":"Persistence of StateDrafts with missing references","text":"<p>A StateDraft (state-A) could be supplied with a transition referencing StateDraft (state-B).  It could be that (state-B) is not supplied before (state-A), which means the sync could fail to create/update (state-A).  It could also be that (state-B) is not supplied at all in this batch but at a later batch.</p> <p>The library keeps tracks of such \"referencing\" states like (state-A) and persists them in storage  (commercetools <code>customObjects</code> in the target project , in this case)  to keep them and create/update them accordingly whenever the referenced state has been provided at some point.</p> <p>The <code>customObject</code> will have a <code>container:</code> <code>\"commercetools-sync-java.UnresolvedTransitionsService.stateDrafts\"</code> and a <code>key</code> representing a hash value of the StateDraft key that is waiting to be created/updated.</p> <p>Here is an example of a <code>CustomObject</code> in the target project that represents a StateDraft with key <code>state-A</code>. It being persisted as <code>CustomObject</code> means that the referenced StateDrafts with keys <code>state-B</code>  do not exist yet.</p> <pre><code>{\n  \"container\": \"commercetools-sync-java.UnresolvedTransitionsService.stateDrafts\",\n  \"key\": \"518ea82bb78755c0cdd67909dd3206d56186f7e5\",\n  \"value\": {\n    \"missingTransitionStateKeys\": [\n      \"state-B\"\n    ],\n    \"stateDraft\": {\n      \"type\": \"ReviewState\",\n      \"transitions\": [\n        {\n          \"id\": \"state-B\",\n          \"typeId\": \"state\"\n        }\n      ],\n      \"roles\": [\n        \"ReviewIncludedInStatistics\"\n      ],\n      \"key\": \"state-A\",\n      \"initial\": true\n    }\n  }\n}\n</code></pre> <p>As soon, as the referenced StateDrafts are supplied to the sync, the draft will be created/updated and the  <code>CustomObject</code> will be removed from the target project.</p> <p>Keeping the old custom objects around forever can negatively influence the performance of your project and the time it takes to restore it from a backup. Deleting unused data ensures the best performance for your project. Please have a look into the Cleanup guide to cleanup old unresolved custom objects.</p>"},{"location":"usage/STATE_SYNC/#more-examples-of-how-to-use-the-sync","title":"More examples of how to use the sync","text":"<ol> <li>Sync from another CTP project as a source.</li> <li>Sync from an external source.</li> </ol> <p>Make sure to read the Important Usage Tips for optimal performance.</p>"},{"location":"usage/STATE_SYNC/#build-all-update-actions","title":"Build all update actions","text":"<p>A utility method provided by the library to compare a <code>State</code> with a new <code>StateDraft</code> and results in a list of state update actions.  update actions.  <pre><code>List&lt;StateUpdateAction&gt; updateActions = StateSyncUtils.buildActions(state, stateDraft, stateSyncOptions);\n</code></pre></p>"},{"location":"usage/STATE_SYNC/#build-particular-update-actions","title":"Build particular update action(s)","text":"<p>Utility methods provided by the library to compare the specific fields of a <code>State</code> and a new <code>StateDraft</code>, and in turn builds  the update action. One example is the <code>buildSetNameAction</code> which compares names: <pre><code>Optional&lt;StateUpdateAction&gt; updateAction = StateUpdateActionUtils.buildSetNameAction(oldState, stateDraft);\n</code></pre> More examples of those utils for different types can be found here.</p>"},{"location":"usage/STATE_SYNC/#migration-guide","title":"Migration Guide","text":"<p>The state-sync uses the JVM-SDK-V2, therefore ensure you Install JVM SDK module <code>commercetools-sdk-java-api</code> with any HTTP client module. The default one is <code>commercetools-http-client</code>.</p> <pre><code> &lt;!-- Sample maven pom.xml --&gt;\n &lt;properties&gt;\n     &lt;commercetools.version&gt;LATEST&lt;/commercetools.version&gt;\n &lt;/properties&gt;\n\n &lt;dependencies&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-http-client&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-sdk-java-api&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n &lt;/dependencies&gt;\n</code></pre>"},{"location":"usage/STATE_SYNC/#client-configuration-and-creation","title":"Client configuration and creation","text":"<p>For client creation use ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. If you have custom requirements for the client creation make sure to replace <code>SphereClientFactory</code> with <code>ApiRootBuilder</code> as described in this Migration Document.</p>"},{"location":"usage/STATE_SYNC/#signature-of-statesyncoptions","title":"Signature of StateSyncOptions","text":"<p>As models and update actions have changed in the JVM-SDK-V2 the signature of SyncOptions is different. It's constructor now takes a <code>ProjectApiRoot</code> as first argument. The callback functions are signed with <code>State</code>, <code>StateDraft</code> and <code>StateUpdateAction</code> from <code>package com.commercetools.api.models.state.*</code></p> <p>Note: Type <code>StateUpdateAction</code> has changed to <code>StateUpdateAction</code>. Make sure you create and supply a specific StateUpdateAction in <code>beforeUpdateCallback</code>. For that you can use the library-utilities or use a JVM-SDK builder (see also):</p> <pre><code>// Example: Create a state update action to change name taking the 'newName' of the stateDraft\n    final Function&lt;LocalizedString, StateUpdateAction&gt; createBeforeUpdateAction =\n        (newName) -&gt; StateSetNameAction.builder().name(newName).build();\n\n// Add the change name action to the list of update actions before update is executed\n    final TriFunction&lt;\n            List&lt;StateUpdateAction&gt;, StateDraft, State, List&lt;StateUpdateAction&gt;&gt;\n        beforeUpdateStateCallback =\n            (updateActions, newStateDraft, oldState) -&gt; {\n              final StateUpdateAction beforeUpdateAction =\n                  createBeforeUpdateAction.apply(newStateDraft.getName());\n              updateActions.add(beforeUpdateAction);\n              return updateActions;\n            };\n</code></pre>"},{"location":"usage/STATE_SYNC/#build-statedraft-syncing-from-external-project","title":"Build StateDraft (syncing from external project)","text":"<p>The state-sync expects a list of <code>StateDraft</code>s to process. If you use java-sync-library to sync your states from any external system into a commercetools platform project you have to convert your data into CTP compatible <code>StateDraft</code> type. This was done in previous version using <code>DraftBuilder</code>s. The V2 SDK do not have inheritance for <code>DraftBuilder</code> classes but the differences are minor and you can replace it easily. Here's an example:</p> <p><pre><code>// StateDraftBuilder in v1 takes parameters 'key', 'type' \nfinal StateDraft stateDraft =\n        StateDraftBuilder.of(\"key\", StateType.LINE_ITEM_STATE)\n        .name(ofEnglish(\"state-name\"))\n        .description(ofEnglish(\"state-desc\"))\n        .roles(Collections.singleton(StateRole.RETURN))\n        .initial(false)\n        .build();\n\n// StateDraftBuilder in v2\nfinal StateDraft stateDraft =\n        StateDraftBuilder.of()\n        .key(\"key\")\n        .type(StateTypeEnum.LINE_ITEM_STATE)\n        .name(ofEnglish(\"state-name\"))\n        .description(ofEnglish(\"state-desc\"))\n        .roles(StateRoleEnum.RETURN)\n        .initial(false)\n        .build();\n</code></pre> For more information, see the Guide to replace DraftBuilders.</p>"},{"location":"usage/STATE_SYNC/#query-for-states-syncing-from-ctp-project","title":"Query for states (syncing from CTP project)","text":"<p>If you sync states between different commercetools projects you probably use StateTransformUtils#toStateDrafts to transform <code>State</code> into <code>StateDraft</code> which can be used by the state-sync. However, if you need to query <code>states</code> from a commercetools project instead of passing <code>StateQuery</code>s to a <code>sphereClient</code>, create (and execute) requests directly from the <code>apiRoot</code>. Here's an example:</p> <p><pre><code>// SDK v1: StateQuery to fetch all states\nfinal StateQuery query = StateQuery.of();\n\nfinal PagedQueryResult&lt;State&gt; pagedQueryResult = sphereClient.executeBlocking(query);\n\n// SDK v2: Create and execute query to fetch all states in one line\nfinal StatePagedQueryResponse result = apiRoot.states().get().executeBlocking().getBody();\n</code></pre> Read more about querying resources.</p>"},{"location":"usage/STATE_SYNC/#referencing-other-states-in-transitions","title":"Referencing other states in transitions","text":"<p>When you use references to other states in the field <code>transitions</code>, the state-sync needs to do the reference resolution process. In the previous java-sdk-v1 it was required to provide the <code>key</code> value on the <code>id</code> field of the reference. In the current java-sdk-v2 you must provide the <code>key</code> field in <code>StateResourceIdentifier</code>. For detailed information see the Reference resolution section.</p>"},{"location":"usage/SYNC_OPTIONS/","title":"Sync Options","text":""},{"location":"usage/SYNC_OPTIONS/#errorcallback","title":"<code>errorCallback</code>","text":"<p>a callback that is called whenever an error event occurs during the sync process. It contains the following information  about the error-event:</p> <ul> <li>sync exception</li> <li>the resource draft of the source project</li> <li>the resource of the target project</li> <li>the update-actions, which failed</li> </ul>"},{"location":"usage/SYNC_OPTIONS/#warningcallback","title":"<code>warningCallback</code>","text":"<p>a callback that is called whenever a warning event occurs during the sync process. It contains the following information  about the warning message:</p> <ul> <li>sync exception</li> <li>the resource draft of the source project</li> <li>the resource of the target project</li> </ul>"},{"location":"usage/SYNC_OPTIONS/#beforeupdatecallback","title":"<code>beforeUpdateCallback</code>","text":"<p>during the sync process, if a target resource and a resource draft are matched, this callback can be used to intercept the update request just before it is sent to CTP. It contains information about the resource draft, the target resource, and the update actions that were calculated after comparing both.  </p>"},{"location":"usage/SYNC_OPTIONS/#beforecreatecallback","title":"<code>beforeCreateCallback</code>","text":"<p>during the sync process, if a resource draft should be created, this callback can be used to intercept the create request just before it sent to CTP.  It contains information about the resource draft that should be created.</p>"},{"location":"usage/SYNC_OPTIONS/#batchsize","title":"<code>batchSize</code>","text":"<p>a number that could be used to set the batch size with which resources are fetched and processed, as resources are obtained from the target CTP project in batches for better performance. The algorithm accumulates up to <code>batchSize</code> resources from the input list, then fetch the corresponding resources from the target CTP project in a single request. Playing with this option can slightly improve or reduce processing speed.</p>"},{"location":"usage/SYNC_OPTIONS/#cachesize","title":"<code>cacheSize</code>","text":"<p>In the service classes of the commercetools-sync-java library, we have implemented an in-memory LRU cache to store a map used for the reference resolution of the library. The cache reduces the reference resolution based calls to the commercetools API as the required fields of a resource will be fetched only one time. These cached fields then might be used by another resource referencing the already resolved resource instead of fetching from commercetools API. It turns out, having the in-memory LRU cache will improve the overall performance of the sync library and commercetools API. which will improve the overall performance of the sync and commercetools API.</p> <p>Playing with this option can change the memory usage of the library. If it is not set, the default cache size is <code>10.000</code> for the sync.</p>"},{"location":"usage/SYNC_OPTIONS/#syncfilter-only-for-product-sync-options","title":"<code>syncFilter</code> (Only for Product Sync Options)","text":"<p>represents either a blacklist or a whitelist for filtering certain update action groups. </p> <ul> <li> <p>Blacklisting an update action group means that everything in products will be synced except for any group in the blacklist. A typical use case is to blacklist prices when syncing products. In other words, syncing everything    in products except for prices. </p> </li> <li> <p>Whitelisting an update action group means that the groups in this whitelist will be the only group synced in products. One use case could be to whitelist prices when syncing products. In other words, syncing prices only in    products and nothing else.</p> </li> <li> <p>The list of action groups allowed to be blacklisted or whitelisted on products can be found here. </p> </li> </ul>"},{"location":"usage/SYNC_OPTIONS/#ensurechannels-only-for-product-and-inventory-sync-options","title":"<code>ensureChannels</code> (Only for Product and Inventory Sync Options)","text":"<p>a flag that represents a strategy to handle syncing inventory entries with missing channels. Having an inventory entry or a product, with a missing channel reference, could be processed in either of the following ways: - If <code>ensureChannels</code> is set to <code>false</code> this inventory entry/product won't be synced and the <code>errorCallback</code> will be triggered. - If <code>ensureChannels</code> is set to <code>true</code> the sync will attempt to create the missing channel with the given key.  If it fails to create the supply channel, the inventory entry/product won't sync and <code>errorCallback</code> will be triggered. - If not provided, it is set to <code>false</code> by default.</p>"},{"location":"usage/SYNC_OPTIONS/#examples","title":"Examples","text":""},{"location":"usage/SYNC_OPTIONS/#1-using-errorcallback-and-warningcallback-for-logging","title":"1. Using <code>errorCallback</code> and <code>warningCallback</code> for logging","text":"<pre><code> final Logger logger = LoggerFactory.getLogger(MySync.class);\n final ProductSyncOptions productsyncOptions = ProductSyncOptionsBuilder\n         .of(sphereClient)\n         .errorCallback((syncException, draft, product, updateActions) -&gt; \n            logger.error(syncException.getMessage(), syncException))\n         .warningCallback((exception, oldResource, newResources) -&gt; \n            logger.warn(exception.getMessage(), exception))\n         .build();\n</code></pre>"},{"location":"usage/SYNC_OPTIONS/#2-using-beforeupdatecallback-for-syncing-a-single-locale","title":"2. Using <code>beforeUpdateCallback</code> for syncing a single locale.","text":""},{"location":"usage/SYNC_OPTIONS/#3-using-beforeupdatecallback-for-keeping-other-variants","title":"3. Using <code>beforeUpdateCallback</code> for keeping other variants.","text":""},{"location":"usage/SYNC_OPTIONS/#4-using-syncfilter-for-blacklisting-product-categories-while-syncing-products","title":"4. Using <code>syncFilter</code> for blacklisting product categories while syncing products.","text":""},{"location":"usage/SYNC_OPTIONS/#5-using-syncfilter-for-whitelisting-product-names-while-syncing-products","title":"5. Using <code>syncFilter</code> for whitelisting product names while syncing products.","text":""},{"location":"usage/TAX_CATEGORY_SYNC/","title":"Tax Category Sync","text":"<p>Allows importing/syncing TaxCategory into a commercetools project.  It also provides utilities for generating update actions based on the comparison of a TaxCategory  against a TaxCategoryDraft.</p> <ul> <li>Usage</li> <li>Prerequisites<ul> <li>ProjectApiRoot</li> <li>Required Fields</li> <li>SyncOptions</li> <li>errorCallback</li> <li>warningCallback</li> <li>beforeUpdateCallback</li> <li>beforeCreateCallback</li> <li>batchSize</li> <li>cacheSize</li> </ul> </li> <li>Running the sync<ul> <li>More examples of how to use the sync</li> </ul> </li> <li>Build all update actions</li> <li>Build particular update action(s)</li> <li>Migration Guide</li> <li>Client configuration and creation</li> <li>Signature of TaxCategorySyncOptions</li> <li>Build TaxCategoryDraft (syncing from external project)</li> <li>Query for TaxCategories (syncing from CTP project)</li> <li>JVM-SDK-V2 migration guide</li> </ul>"},{"location":"usage/TAX_CATEGORY_SYNC/#usage","title":"Usage","text":""},{"location":"usage/TAX_CATEGORY_SYNC/#prerequisites","title":"Prerequisites","text":""},{"location":"usage/TAX_CATEGORY_SYNC/#projectapiroot","title":"ProjectApiRoot","text":"<p>Use the ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. To create <code>ClientCredentials</code> which are required for creating a client please use the <code>ClientCredentialsBuilder</code> provided in java-sdk-v2 Client OAUTH2 package If you have custom requirements for the client creation, have a look into the Important Usage Tips.</p> <pre><code>final ClientCredentials clientCredentials =\n        new ClientCredentialsBuilder()\n        .withClientId(\"client-id\")\n        .withClientSecret(\"client-secret\")\n        .withScopes(\"scopes\")\n        .build();\nfinal ProjectApiRoot apiRoot = ClientConfigurationUtils.createClient(\"project-key\", clientCredentials, \"auth-url\", \"api-url\");\n</code></pre>"},{"location":"usage/TAX_CATEGORY_SYNC/#required-fields","title":"Required Fields","text":"<p>The following fields are required to be set in, otherwise, they won't be matched by sync:</p> Draft Required Fields Note TaxCategoryDraft <code>key</code> Also, the tax categories in the target project are expected to have the <code>key</code> fields set."},{"location":"usage/TAX_CATEGORY_SYNC/#syncoptions","title":"SyncOptions","text":"<p>After the <code>projectApiRoot</code> is set up, a <code>TaxCategorySyncOptions</code> should be built as follows: <pre><code>// instantiating a TaxCategorySyncOptions\nfinal TaxCategorySyncOptions taxCategorySyncOptions = TaxCategorySyncOptionsBuilder.of(projectApiRoot).build();\n</code></pre></p> <p><code>SyncOptions</code> is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:</p>"},{"location":"usage/TAX_CATEGORY_SYNC/#errorcallback","title":"errorCallback","text":"<p>A callback that is called whenever an error event occurs during the sync process. Each resource executes its own  error-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the error-event:</p> <ul> <li>sync exception</li> <li>tax category draft from the source</li> <li>tax category of the target project (only provided if an existing tax category could be found)</li> <li>the update-actions, which failed (only provided if an existing tax category could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(TaxCategorySync.class);\n final TaxCategorySyncOptions taxCategorySyncOptions = TaxCategorySyncOptionsBuilder\n         .of(projectApiRoot)\n         .errorCallback((syncException, draft, taxCategory, updateActions) -&gt; \n            logger.error(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/TAX_CATEGORY_SYNC/#warningcallback","title":"warningCallback","text":"<p>A callback is called whenever a warning event occurs during the sync process. Each resource executes its own  warning-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the warning message:</p> <ul> <li>sync exception</li> <li>tax category draft from the source </li> <li>tax category of the target project (only provided if an existing tax category could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(TaxCategorySync.class);\n final TaxCategorySyncOptions taxCategorySyncOptions = TaxCategorySyncOptionsBuilder\n         .of(projectApiRoot)\n         .warningCallback((syncException, draft, taxCategory) -&gt; \n            logger.warn(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/TAX_CATEGORY_SYNC/#beforeupdatecallback","title":"beforeUpdateCallback","text":"<p>During the sync process, if a target tax category and a tax category draft are matched, this callback can be used to  intercept the update request just before it is sent to the commercetools platform. This allows the user to modify  update actions array with custom actions or discard unwanted actions. The callback provides the following information :</p> <ul> <li>tax category draft from the source</li> <li>tax category from the target project</li> <li>update actions that were calculated after comparing both</li> </ul> <pre><code>final TriFunction&lt;\n        List&lt;TaxCategoryUpdateAction&gt;, TaxCategoryDraft, TaxCategory, List&lt;TaxCategoryUpdateAction&gt;&gt; \n            beforeUpdateTaxCategoryCallback =\n            (updateActions, newTaxCategoryDraft, oldTaxCategory) -&gt;  updateActions.stream()\n                    .filter(updateAction -&gt; !(updateAction instanceof TaxCategoryRemoveTaxRateAction))\n                    .collect(Collectors.toList());\n\nfinal TaxCategorySyncOptions taxCategorySyncOptions = \n        TaxCategorySyncOptionsBuilder.of(projectApiRoot).beforeUpdateCallback(beforeUpdateTaxCategoryCallback).build();\n</code></pre>"},{"location":"usage/TAX_CATEGORY_SYNC/#beforecreatecallback","title":"beforeCreateCallback","text":"<p>During the sync process, if a tax category draft should be created, this callback can be used to intercept the create request just before it is sent to the commercetools platform.  It contains the following information : </p> <ul> <li>tax category draft that should be created</li> </ul> <p>Please refer to example in product sync document.</p>"},{"location":"usage/TAX_CATEGORY_SYNC/#batchsize","title":"batchSize","text":"<p>A number that could be used to set the batch size with which tax categories are fetched and processed, as tax categories are obtained from the target project on the commercetools platform in batches for better performance. The algorithm accumulates up to <code>batchSize</code> resources from the input list, then fetches the corresponding tax categories from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for tax category sync.</p> <pre><code>final TaxCategorySyncOptions taxCategorySyncOptions = \n         TaxCategorySyncOptionsBuilder.of(projectApiRoot).batchSize(30).build();\n</code></pre>"},{"location":"usage/TAX_CATEGORY_SYNC/#cachesize","title":"cacheSize","text":"<p>In the service classes of the commercetools-sync-java library, we have implemented an in-memory LRU cache to store a map used for the reference resolution of the library. The cache reduces the reference resolution based calls to the commercetools API as the required fields of a resource will be fetched only one time. These cached fields then might be used by another resource referencing the already resolved resource instead of fetching from commercetools API. It turns out, having the in-memory LRU cache will improve the overall performance of the sync library and commercetools API. which will improve the overall performance of the sync and commercetools API.</p> <p>Playing with this option can change the memory usage of the library. If it is not set, the default cache size is <code>10.000</code> for tax category sync.</p> <pre><code>final TaxCategorySyncOptions taxCategorySyncOptions = \n         TaxCategorySyncOptionsBuilder.of(projectApiRoot).cacheSize(5000).build();\n</code></pre>"},{"location":"usage/TAX_CATEGORY_SYNC/#running-the-sync","title":"Running the sync","text":"<p>After all the aforementioned points in the previous section have been fulfilled, to run the sync: <pre><code>// instantiating a TaxCategorySync\nfinal TaxCategorySync taxCategorySync = new TaxCategorySync(taxCategorySyncOptions);\n\n// execute the sync on your list of tax categories\nCompletionStage&lt;TaxCategorySyncStatistics&gt; syncStatisticsStage = taxCategorySync.sync(taxCategoryDrafts);\n</code></pre> The result of completing the <code>syncStatisticsStage</code> in the previous code snippet contains a <code>TaxCategorySyncStatistics</code> which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed tax categories and the processing time of the last sync batch in different time units and in a human-readable format.</p> <pre><code>final TaxCategorySyncStatistics stats = syncStatisticsStage.toCompletebleFuture().join();\nstats.getReportMessage();\n/*\"Summary: 2000 tax categories were processed in total (1000 created, 995 updated, 5 failed to sync).\"*/\n</code></pre> <p>Note The statistics object contains the processing time of the last batch only. This is due to two reasons:</p> <ol> <li>The sync processing time should not take into account the time between supplying batches to the sync.</li> <li>It is not known by the sync which batch is going to be the last one supplied.</li> </ol>"},{"location":"usage/TAX_CATEGORY_SYNC/#more-examples-of-how-to-use-the-sync","title":"More examples of how to use the sync","text":"<p>Sync from an external source.</p> <p>Make sure to read the Important Usage Tips for optimal performance.</p>"},{"location":"usage/TAX_CATEGORY_SYNC/#build-all-update-actions","title":"Build all update actions","text":"<p>A utility method provided by the library to compare a <code>TaxCategory</code> with a new <code>TaxCategoryDraft</code> and results in a list of tax category update actions. <pre><code>List&lt;TaxCategoryUpdateAction&gt; updateActions = TaxCategorySyncUtils.buildActions(taxCategory, taxCategoryDraft, taxCategorySyncOptions);\n</code></pre></p>"},{"location":"usage/TAX_CATEGORY_SYNC/#build-particular-update-actions","title":"Build particular update action(s)","text":"<p>Utility methods provided by the library to compare the specific fields of a <code>TaxCategory</code> and a new <code>TaxCategoryDraft</code>, and in turn builds  the update action. One example is the <code>buildChangeNameUpdateAction</code> which compares names: <pre><code>Optional&lt;TaxCategoryUpdateAction&gt; updateAction = TaxCategoryUpdateActionUtils.buildChangeNameAction(oldTaxCategory, taxCategoryDraft);\n</code></pre> More examples of those utils for different tax categories can be found here.</p>"},{"location":"usage/TAX_CATEGORY_SYNC/#migration-guide","title":"Migration Guide","text":"<p>The tax-category-sync uses the JVM-SDK-V2, therefore ensure you Install JVM SDK module <code>commercetools-sdk-java-api</code> with any HTTP client module. The default one is <code>commercetools-http-client</code>.</p> <pre><code> &lt;!-- Sample maven pom.xml --&gt;\n &lt;properties&gt;\n     &lt;commercetools.version&gt;LATEST&lt;/commercetools.version&gt;\n &lt;/properties&gt;\n\n &lt;dependencies&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-http-client&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-sdk-java-api&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n &lt;/dependencies&gt;\n</code></pre>"},{"location":"usage/TAX_CATEGORY_SYNC/#client-configuration-and-creation","title":"Client configuration and creation","text":"<p>For client creation use ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. If you have custom requirements for the client creation make sure to replace <code>SphereClientFactory</code> with <code>ApiRootBuilder</code> as described in this Migration Document.</p>"},{"location":"usage/TAX_CATEGORY_SYNC/#signature-of-taxcategorysyncoptions","title":"Signature of TaxCategorySyncOptions","text":"<p>As models and update actions have changed in the JVM-SDK-V2 the signature of SyncOptions is different. It's constructor now takes a <code>ProjectApiRoot</code> as first argument. The callback functions are signed with <code>TaxCategoryDraft</code>, <code>TaxCategory</code> and <code>TaxCategoryUpdateAction</code> from <code>package com.commercetools.api.models.tax_category.*</code></p> <p>Note: Type <code>UpdateAction&lt;TaxCategory&gt;</code> has changed to <code>TaxCategoryUpdateAction</code>. Make sure you create and supply a specific TaxCategoryUpdateAction in <code>beforeUpdateCallback</code>. For that you can use the library-utilities or use a JVM-SDK builder (see also):</p> <pre><code>// Example: Create a tax-category update action to change name taking the 'newName' of the taxCategoryDraft\n    final Function&lt;String, TaxCategoryUpdateAction&gt; changeNameBeforeUpdateAction =\n        (newName) -&gt; TaxCategoryChangeNameAction.builder().name(newName).build();\n\n// Add the change name action to the list of update actions before update is executed\n    final TriFunction&lt;\n            List&lt;TaxCategoryUpdateAction&gt;, TaxCategoryDraft, TaxCategory, List&lt;TaxCategoryUpdateAction&gt;&gt;\n        beforeUpdateTypeCallback =\n            (updateActions, newTaxCategoryDraft, oldTaxCategory) -&gt; {\n              final TaxCategoryUpdateAction beforeUpdateAction =\n                  changeNameBeforeUpdateAction.apply(newTaxCategoryDraft.getName());\n              updateActions.add(beforeUpdateAction);\n              return updateActions;\n            };\n</code></pre>"},{"location":"usage/TAX_CATEGORY_SYNC/#build-taxcategorydraft-syncing-from-external-project","title":"Build TaxCategoryDraft (syncing from external project)","text":"<p>The tax-category-sync expects a list of <code>TaxCategoryDraft</code>s to process. If you use java-sync-library to sync your types from any external system into a commercetools platform project you have to convert your data into CTP compatible <code>TaxCategoryDraft</code> type. This was done in previous version using <code>DraftBuilder</code>s. The V2 SDK do not have inheritance for <code>DraftBuilder</code> classes but the differences are minor and you can replace it easily. Here's an example:</p> <p><pre><code>// TaxCategoryDraftBuilder in v1 takes parameters 'name', 'taxRates' and 'description'\nfinal TaxCategoryDraft taxCategoryDraft =\n              TaxCategoryDraftBuilder\n                      .of(\"name\", emptyList(), \"description\")\n                      .key(\"key\")\n                      .build();\n\n// TaxCategoryDraftBuilder in v2.\nfinal TaxCategoryDraft taxCategoryDraft =\n        TaxCategoryDraftBuilder.of()\n            .key(\"key\")\n            .name(\"name\")\n            .rates(emptyList())\n            .description(\"description\")\n            .build();\n</code></pre> For more information, see the Guide to replace DraftBuilders.</p>"},{"location":"usage/TAX_CATEGORY_SYNC/#query-for-taxcategories-syncing-from-ctp-project","title":"Query for TaxCategories (syncing from CTP project)","text":"<p>If you sync types between different commercetools projects you have to transform <code>TaxCategory</code> into <code>TaxCategoryDraft</code>. However, if you need to query <code>TaxCategory</code> from a commercetools project instead of passing <code>TaxCategoryQuery</code>s to a <code>sphereClient</code>, create (and execute) requests directly from the <code>apiRoot</code>. Here's an example:</p> <p><pre><code>// SDK v1: TaxCategoryQuery to fetch all taxCategories\nfinal TaxCategoryQuery query = TaxCategoryQuery.of();\n\nfinal PagedQueryResult&lt;TaxCategory&gt; pagedQueryResult = sphereClient.executeBlocking(query);\n\n// SDK v2: Create and execute query to fetch all tax-categories in one line\nfinal TaxCategoryPagedQueryResponse result = apiRoot.taxCategories().get().executeBlocking().getBody();\n</code></pre> Read more about querying resources.</p>"},{"location":"usage/TAX_CATEGORY_SYNC/#jvm-sdk-v2-migration-guide","title":"JVM-SDK-V2 migration guide","text":"<p>On any other needs to migrate your project using jvm-sdk-v2 please refer to it's Migration Guide. </p>"},{"location":"usage/TYPE_SYNC/","title":"Type Sync","text":"<p>The module used for importing/syncing Types into a commercetools project.  It also provides utilities for generating update actions based on the comparison of a Type  against a TypeDraft.</p> <ul> <li>Usage</li> <li>Prerequisites<ul> <li>SphereClient</li> <li>Required Fields</li> <li>SyncOptions</li> <li>errorCallback</li> <li>warningCallback</li> <li>beforeUpdateCallback</li> <li>beforeCreateCallback</li> <li>batchSize</li> <li>cacheSize</li> </ul> </li> <li>Running the sync<ul> <li>Important to Note</li> <li>More examples of how to use the sync</li> </ul> </li> <li>Build all update actions</li> <li>Build particular update action(s)</li> <li>Caveats</li> </ul>"},{"location":"usage/TYPE_SYNC/#usage","title":"Usage","text":""},{"location":"usage/TYPE_SYNC/#prerequisites","title":"Prerequisites","text":""},{"location":"usage/TYPE_SYNC/#projectapiroot","title":"ProjectApiRoot","text":"<p>Use the ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. To create <code>ClientCredentials</code> which are required for creating a client please use the <code>ClientCredentialsBuilder</code> provided in java-sdk-v2 Client OAUTH2 package If you have custom requirements for the client creation, have a look into the Important Usage Tips.</p> <pre><code>final ClientCredentials clientCredentials =\n        new ClientCredentialsBuilder()\n        .withClientId(\"client-id\")\n        .withClientSecret(\"client-secret\")\n        .withScopes(\"scopes\")\n        .build();\nfinal ProjectApiRoot apiRoot = ClientConfigurationUtils.createClient(\"project-key\", clientCredentials, \"auth-url\", \"api-url\");\n</code></pre>"},{"location":"usage/TYPE_SYNC/#required-fields","title":"Required Fields","text":"<p>The following fields are required to be set in, otherwise, they won't be matched by sync:</p> Draft Required Fields Note TypeDraft <code>key</code> Also, the types in the target project are expected to have the <code>key</code> fields set."},{"location":"usage/TYPE_SYNC/#syncoptions","title":"SyncOptions","text":"<p>After the <code>projectApiRoot</code> is set up, a <code>TypeSyncOptions</code> should be built as follows: <pre><code>// instantiating a TypeSyncOptions\nfinal TypeSyncOptions typeSyncOptions = TypeSyncOptionsBuilder.of(projectApiRoot).build();\n</code></pre></p> <p><code>SyncOptions</code> is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:</p>"},{"location":"usage/TYPE_SYNC/#errorcallback","title":"errorCallback","text":"<p>A callback that is called whenever an error event occurs during the sync process. Each resource executes its own  error-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the error-event:</p> <ul> <li>sync exception</li> <li>type draft from the source</li> <li>type of the target project (only provided if an existing type could be found)</li> <li>the update-actions, which failed (only provided if an existing type could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(TypeSync.class);\n final TypeSyncOptions typeSyncOptions = TypeSyncOptionsBuilder\n         .of(projectApiRoot)\n         .errorCallback((syncException, draft, type, updateActions) -&gt; \n            logger.error(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/TYPE_SYNC/#warningcallback","title":"warningCallback","text":"<p>A callback is called whenever a warning event occurs during the sync process. Each resource executes its own  warning-callback. When the sync process of a particular resource runs successfully, it is not triggered. It contains the  following context about the warning message:</p> <ul> <li>sync exception</li> <li>type draft from the source </li> <li>type of the target project (only provided if an existing type could be found)</li> </ul> <pre><code> final Logger logger = LoggerFactory.getLogger(TypeSync.class);\n final TypeSyncOptions typeSyncOptions = TypeSyncOptionsBuilder\n         .of(projectApiRoot)\n         .warningCallback((syncException, draft, type) -&gt; \n            logger.warn(new SyncException(\"My customized message\"), syncException)).build();\n</code></pre>"},{"location":"usage/TYPE_SYNC/#beforeupdatecallback","title":"beforeUpdateCallback","text":"<p>During the sync process, if a target type and a type draft are matched, this callback can be used to  intercept the update request just before it is sent to the commercetools platform. This allows the user to modify  update actions array with custom actions or discard unwanted actions. The callback provides the following information :</p> <ul> <li>type draft from the source</li> <li>type from the target project</li> <li>update actions that were calculated after comparing both</li> </ul> <pre><code>// Example: Ignore update actions that remove field definition\nfinal TriFunction&lt;\n        List&lt;TypeUpdateAction&gt;, TypeDraft, Type, List&lt;TypeUpdateAction&gt;&gt; \n            beforeUpdateTypeCallback =\n            (updateActions, newTypeDraft, oldType) -&gt;  updateActions.stream()\n                    .filter(updateAction -&gt; !(updateAction instanceof TypeRemoveFieldDefinitionAction))\n                    .collect(Collectors.toList());\n\nfinal TypeSyncOptions typeSyncOptions = \n        TypeSyncOptionsBuilder.of(projectApiRoot).beforeUpdateCallback(beforeUpdateTypeCallback).build();\n</code></pre>"},{"location":"usage/TYPE_SYNC/#beforecreatecallback","title":"beforeCreateCallback","text":"<p>During the sync process, if a type draft should be created, this callback can be used to intercept the create request just before it is sent to the commercetools platform.  It contains the following information : </p> <ul> <li>type draft that should be created</li> </ul> <p>Please refer to example in product sync document.</p>"},{"location":"usage/TYPE_SYNC/#batchsize","title":"batchSize","text":"<p>A number that could be used to set the batch size with which types are fetched and processed, as types are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to <code>batchSize</code> resources from the input list, then fetches the corresponding types from the target project on the commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for type sync.</p> <pre><code>final TypeSyncOptions typeSyncOptions = \n         TypeSyncOptionsBuilder.of(projectApiRoot).batchSize(30).build();\n</code></pre>"},{"location":"usage/TYPE_SYNC/#cachesize","title":"cacheSize","text":"<p>In the service classes of the commercetools-sync-java library, we have implemented an in-memory LRU cache to store a map used for the reference resolution of the library. The cache reduces the reference resolution based calls to the commercetools API as the required fields of a resource will be fetched only one time. These cached fields then might be used by another resource referencing the already resolved resource instead of fetching from commercetools API. It turns out, having the in-memory LRU cache will improve the overall performance of the sync library and commercetools API. which will improve the overall performance of the sync and commercetools API.</p> <p>Playing with this option can change the memory usage of the library. If it is not set, the default cache size is <code>10.000</code> for type sync.</p> <pre><code>final TypeSyncOptions typeSyncOptions = \n         TypeSyncOptionsBuilder.of(projectApiRoot).cacheSize(5000).build();\n</code></pre>"},{"location":"usage/TYPE_SYNC/#running-the-sync","title":"Running the sync","text":"<p>After all the aforementioned points in the previous section have been fulfilled, to run the sync: <pre><code>// instantiating a type sync\nfinal TypeSync typeSync = new TypeSync(typeSyncOptions);\n\n// execute the sync on your list of types\nCompletionStage&lt;TypeSyncStatistics&gt; syncStatisticsStage = typeSync.sync(typeDrafts);\n</code></pre> The result of completing the <code>syncStatisticsStage</code> in the previous code snippet contains a <code>TypeSyncStatistics</code> which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed types and the processing time of the last sync batch in different time units and in a human-readable format.</p> <pre><code>final TypeSyncStatistics stats = syncStatisticsStage.toCompletebleFuture().join();\nstats.getReportMessage();\n/*\"Summary: 2000 types were processed in total (1000 created, 995 updated, 5 failed to sync).\"*/\n</code></pre> <p>Note The statistics object contains the processing time of the last batch only. This is due to two reasons:</p> <ol> <li>The sync processing time should not take into account the time between supplying batches to the sync.</li> <li>It is not known by the sync which batch is going to be the last one supplied.</li> </ol>"},{"location":"usage/TYPE_SYNC/#important-to-note","title":"Important to Note","text":"<ol> <li> <p>If two matching <code>fieldDefinition</code>s (old and new) on the matching <code>type</code>s (old and new) have a different <code>FieldType</code>, the sync will remove the existing <code>fieldDefinition</code> and then add a new <code>fieldDefinition</code> with the new <code>FieldType</code>.</p> </li> <li> <p>The <code>fieldDefinition</code> with missing <code>fieldType</code> (is <code>null</code>) will not be synced.</p> </li> </ol>"},{"location":"usage/TYPE_SYNC/#more-examples-of-how-to-use-the-sync","title":"More examples of how to use the sync","text":"<ol> <li>Sync from another CTP project as a source.</li> <li>Sync from an external source.</li> </ol> <p>Make sure to read the Important Usage Tips for optimal performance.</p>"},{"location":"usage/TYPE_SYNC/#build-all-update-actions","title":"Build all update actions","text":"<p>A utility method provided by the library to compare a <code>Type</code> with a new <code>TypeDraft</code> and results in a list of type update actions. <pre><code>List&lt;TypeUpdateAction&gt; updateActions = TypeSyncUtils.buildActions(type, typeDraft, typeSyncOptions);\n</code></pre></p>"},{"location":"usage/TYPE_SYNC/#build-particular-update-actions","title":"Build particular update action(s)","text":"<p>Utility methods provided by the library to compare the specific fields of a <code>Type</code> and a new <code>TypeDraft</code>, and in turn builds  the update action. One example is the <code>buildChangeNameUpdateAction</code> which compares names: <pre><code>Optional&lt;TypeUpdateAction&gt; updateAction = TypeUpdateActionUtils.buildChangeNameUpdateAction(oldType, typeDraft);\n</code></pre> More examples of those utils for different types can be found here.</p>"},{"location":"usage/TYPE_SYNC/#migration-guide","title":"Migration Guide","text":"<p>The type-sync uses the JVM-SDK-V2, therefore ensure you Install JVM SDK module <code>commercetools-sdk-java-api</code> with any HTTP client module. The default one is <code>commercetools-http-client</code>.</p> <pre><code> &lt;!-- Sample maven pom.xml --&gt;\n &lt;properties&gt;\n     &lt;commercetools.version&gt;LATEST&lt;/commercetools.version&gt;\n &lt;/properties&gt;\n\n &lt;dependencies&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-http-client&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n     &lt;dependency&gt;\n       &lt;groupId&gt;com.commercetools.sdk&lt;/groupId&gt;\n       &lt;artifactId&gt;commercetools-sdk-java-api&lt;/artifactId&gt;\n       &lt;version&gt;${commercetools.version}&lt;/version&gt;\n     &lt;/dependency&gt;\n &lt;/dependencies&gt;\n</code></pre>"},{"location":"usage/TYPE_SYNC/#client-configuration-and-creation","title":"Client configuration and creation","text":"<p>For client creation use ClientConfigurationUtils which apply the best practices for <code>ProjectApiRoot</code> creation. If you have custom requirements for the client creation make sure to replace <code>SphereClientFactory</code> with <code>ApiRootBuilder</code> as described in this Migration Document.</p>"},{"location":"usage/TYPE_SYNC/#signature-of-typesyncoptions","title":"Signature of TypeSyncOptions","text":"<p>As models and update actions have changed in the JVM-SDK-V2 the signature of SyncOptions is different. It's constructor now takes a <code>ProjectApiRoot</code> as first argument. The callback functions are signed with <code>TypeDraft</code>, <code>Type</code> and <code>TypeUpdateAction</code> from <code>package com.commercetools.api.models.type.*</code></p> <p>Note: Type <code>UpdateAction&lt;Type&gt;</code> has changed to <code>TypeUpdateAction</code>. Make sure you create and supply a specific TypeUpdateAction in <code>beforeUpdateCallback</code>. For that you can use the library-utilities or use a JVM-SDK builder (see also):</p> <pre><code>// Example: Create a type update action to change name taking the 'newName' of the typeDraft\n    final Function&lt;LocalizedString, TypeUpdateAction&gt; changeNameBeforeUpdateAction =\n        (newName) -&gt; TypeChangeNameAction.builder().name(newName).build();\n\n// Add the change name action to the list of update actions before update is executed\n    final TriFunction&lt;\n            List&lt;TypeUpdateAction&gt;, TypeDraft, Type, List&lt;TypeUpdateAction&gt;&gt;\n        beforeUpdateTypeCallback =\n            (updateActions, newTypeDraft, oldType) -&gt; {\n              final TypeUpdateAction beforeUpdateAction =\n                  changeNameBeforeUpdateAction.apply(newTypeDraft.getName());\n              updateActions.add(beforeUpdateAction);\n              return updateActions;\n            };\n</code></pre>"},{"location":"usage/TYPE_SYNC/#build-typedraft-syncing-from-external-project","title":"Build TypeDraft (syncing from external project)","text":"<p>The type-sync expects a list of <code>TypeDraft</code>s to process. If you use java-sync-library to sync your types from any external system into a commercetools platform project you have to convert your data into CTP compatible <code>TypeDraft</code> type. This was done in previous version using <code>DraftBuilder</code>s. The V2 SDK do not have inheritance for <code>DraftBuilder</code> classes but the differences are minor and you can replace it easily. Here's an example:</p> <p><pre><code>// TypeDraftBuilder in v1 takes parameters 'key', 'name' and a set of 'resourceTypeIds'\nfinal TypeDraft typeDraft =\n              TypeDraftBuilder\n                      .of(\"type-key\", ofEnglish(\"name\"), ResourceTypeIdsSetBuilder.of().addCategories().build())\n                      .build();\n\n// TypeDraftBuilder in v2. 'resourceTypeIds' is a list\n    TypeDraftBuilder.of()\n            .key(\"type-key\")\n            .name(LocalizedString.ofEnglish(\"name\"))\n            .resourceTypeIds(ResourceTypeId.CATEGORY)\n            .build();\n</code></pre> For more information, see the Guide to replace DraftBuilders.</p>"},{"location":"usage/TYPE_SYNC/#query-for-types-syncing-from-ctp-project","title":"Query for Types (syncing from CTP project)","text":"<p>If you sync types between different commercetools projects you have to transform <code>Type</code> into <code>TypeDraft</code>. However, if you need to query <code>Types</code> from a commercetools project instead of passing <code>TypeQuery</code>s to a <code>sphereClient</code>, create (and execute) requests directly from the <code>apiRoot</code>. Here's an example:</p> <p><pre><code>// SDK v1: TypeQuery to fetch all types\nfinal TypeQuery query = TypeQuery.of();\n\nfinal PagedQueryResult&lt;Type&gt; pagedQueryResult = sphereClient.executeBlocking(query);\n\n// SDK v2: Create and execute query to fetch all types in one line\nfinal TypePagedQueryResponse result = apiRoot.types().get().executeBlocking().getBody();\n</code></pre> Read more about querying resources.</p>"},{"location":"usage/TYPE_SYNC/#jvm-sdk-v2-migration-guide","title":"JVM-SDK-V2 migration guide","text":"<p>On any other needs to migrate your project using jvm-sdk-v2 please refer to it's Migration Guide. </p>"}]}