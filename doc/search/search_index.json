{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"commercetools sync \u00b6 Java library that imports commercetools platform data in the following ways: Synchronise data coming from an external system in any form (CSV, XML, etc..) that has been already mapped to commercetools-jvm-sdk resource draft objects (e.g. CategoryDraft ). Synchronise data from another commercetools project as commercetools-jvm-sdk resource draft objects (e.g. CategoryDraft ). Synchronise: Resources will either be created or updated. But they will not be deleted. \u26a1 See the Quick Start Guide for more information on building a product importer! \ud83d\udd1b Check out the commercetools-project-sync for a ready-to-use CLI application that syncs your entire data catalogue between 2 commercetools projects! The library supports synchronising the following entities in commercetools Categories Products InventoryEntries ProductTypes Types CartDiscounts States TaxCategories CustomObjects Prerequisites \u00b6 Make sure you have JDK 8 installed. commercetools-jvm-sdk as a dependency in your JVM-based application. (Make sure to use a version >= 1.47.0 ). a target commercetools project for syncing your source data to. Installation \u00b6 There are multiple ways to add the commercetools sync dependency to your project, based on your dependency manager. Here are the most popular ones: Maven \u00b6 <dependency> <groupId> com.commercetools </groupId> <artifactId> commercetools-sync-java </artifactId> <version> 2.3.0 </version> </dependency> Gradle \u00b6 implementation 'com.commercetools:commercetools-sync-java:2.3.0' SBT \u00b6 libraryDependencies += \"com.commercetools\" % \"commercetools-sync-java\" % \"2.3.0\" Ivy \u00b6 <dependency org= \"com.commercetools\" name= \"commercetools-sync-java\" rev= \"2.3.0\" />","title":"Overview"},{"location":"#commercetools-sync","text":"Java library that imports commercetools platform data in the following ways: Synchronise data coming from an external system in any form (CSV, XML, etc..) that has been already mapped to commercetools-jvm-sdk resource draft objects (e.g. CategoryDraft ). Synchronise data from another commercetools project as commercetools-jvm-sdk resource draft objects (e.g. CategoryDraft ). Synchronise: Resources will either be created or updated. But they will not be deleted. \u26a1 See the Quick Start Guide for more information on building a product importer! \ud83d\udd1b Check out the commercetools-project-sync for a ready-to-use CLI application that syncs your entire data catalogue between 2 commercetools projects! The library supports synchronising the following entities in commercetools Categories Products InventoryEntries ProductTypes Types CartDiscounts States TaxCategories CustomObjects","title":"commercetools sync"},{"location":"#prerequisites","text":"Make sure you have JDK 8 installed. commercetools-jvm-sdk as a dependency in your JVM-based application. (Make sure to use a version >= 1.47.0 ). a target commercetools project for syncing your source data to.","title":"Prerequisites"},{"location":"#installation","text":"There are multiple ways to add the commercetools sync dependency to your project, based on your dependency manager. Here are the most popular ones:","title":"Installation"},{"location":"#maven","text":"<dependency> <groupId> com.commercetools </groupId> <artifactId> commercetools-sync-java </artifactId> <version> 2.3.0 </version> </dependency>","title":"Maven"},{"location":"#gradle","text":"implementation 'com.commercetools:commercetools-sync-java:2.3.0'","title":"Gradle"},{"location":"#sbt","text":"libraryDependencies += \"com.commercetools\" % \"commercetools-sync-java\" % \"2.3.0\"","title":"SBT"},{"location":"#ivy","text":"<dependency org= \"com.commercetools\" name= \"commercetools-sync-java\" rev= \"2.3.0\" />","title":"Ivy"},{"location":"BENCHMARKS/","text":"Benchmarks \u00b6 Setup \u00b6 Benchmarks are run by JUnit as a separate source set just like main, test and integration-test. The benchmarks can be found here . Every benchmark writes it's results as JSON to benchmarks.json which is saved in the gh-pages branch of the repo. Every time a release is made or the build has a git tag, the benchmarks are run and the results are added to benchmarks.json . The average results in benchmarks.json are used to display the results in the form of this graph . Results \u00b6 Results as json can be found here . Results as a chart can be found here .","title":"Benchmarks"},{"location":"BENCHMARKS/#benchmarks","text":"","title":"Benchmarks"},{"location":"BENCHMARKS/#setup","text":"Benchmarks are run by JUnit as a separate source set just like main, test and integration-test. The benchmarks can be found here . Every benchmark writes it's results as JSON to benchmarks.json which is saved in the gh-pages branch of the repo. Every time a release is made or the build has a git tag, the benchmarks are run and the results are added to benchmarks.json . The average results in benchmarks.json are used to display the results in the form of this graph .","title":"Setup"},{"location":"BENCHMARKS/#results","text":"Results as json can be found here . Results as a chart can be found here .","title":"Results"},{"location":"BUILD/","text":"Table of Contents Release workflow Step 1: Release Step 2: Publish Step 3: Sync Final Step Checklist Release workflow \u00b6 The main goal of the build process is to publish the artifacts to public repositories JCenter and Maven Central . Step 1: Release \u00b6 Create a new PR for the new release: - Increment the release version to the new library version, please follow the semantic versioning for finding the new version. - Make sure all the dependencies are up-to-date everywhere in the documentation files and the project files where needed. - Make sure to add a section for the release in the release notes . - Ask for review for this PR and then \"squash and merge\" to master. For example PR, see: https://github.com/commercetools/commercetools-sync-java/pull/412 To release the library, you need to \"create a new release\" with Github, describe the new release as below and publish it. For example, define the link to the release notes pointing to a released version: #### 1.8.2 - [Release notes](https://github.com/commercetools/commercetools-sync-java/blob/master/docs/RELEASE_NOTES.md#182----april-30-2020) - [Javadoc](https://commercetools.github.io/commercetools-sync-java/v/1.8.2/) Additionally define important changes, breaking changes or important new features into the description. After the release build status is success follow the next steps below. Check here for Travis build status. Step 2: Publish \u00b6 Go to https://bintray.com/commercetools/maven/commercetools-sync-java Click the Publish button as shown below: Step 3: Sync \u00b6 Click to the Maven Central tab. Enter the commercetools Sonatype Maven Central API Key and password (into User token key and User token password fields) Click the Sync button and check the Sync Status . Final Step \u00b6 Ensure the new version is publicly available at JCenter and Maven Central . Checklist \u00b6 Publish and Sync completed without an issue. The new version is available in the bintray: https://dl.bintray.com/commercetools/maven/com/commercetools/commercetools-sync-java/ The new version is available in the maven: https://repo1.maven.org/maven2/com/commercetools/commercetools-sync-java/","title":"BUILD"},{"location":"BUILD/#release-workflow","text":"The main goal of the build process is to publish the artifacts to public repositories JCenter and Maven Central .","title":"Release workflow"},{"location":"BUILD/#step-1-release","text":"Create a new PR for the new release: - Increment the release version to the new library version, please follow the semantic versioning for finding the new version. - Make sure all the dependencies are up-to-date everywhere in the documentation files and the project files where needed. - Make sure to add a section for the release in the release notes . - Ask for review for this PR and then \"squash and merge\" to master. For example PR, see: https://github.com/commercetools/commercetools-sync-java/pull/412 To release the library, you need to \"create a new release\" with Github, describe the new release as below and publish it. For example, define the link to the release notes pointing to a released version: #### 1.8.2 - [Release notes](https://github.com/commercetools/commercetools-sync-java/blob/master/docs/RELEASE_NOTES.md#182----april-30-2020) - [Javadoc](https://commercetools.github.io/commercetools-sync-java/v/1.8.2/) Additionally define important changes, breaking changes or important new features into the description. After the release build status is success follow the next steps below. Check here for Travis build status.","title":"Step 1: Release"},{"location":"BUILD/#step-2-publish","text":"Go to https://bintray.com/commercetools/maven/commercetools-sync-java Click the Publish button as shown below:","title":"Step 2: Publish"},{"location":"BUILD/#step-3-sync","text":"Click to the Maven Central tab. Enter the commercetools Sonatype Maven Central API Key and password (into User token key and User token password fields) Click the Sync button and check the Sync Status .","title":"Step 3: Sync"},{"location":"BUILD/#final-step","text":"Ensure the new version is publicly available at JCenter and Maven Central .","title":"Final Step"},{"location":"BUILD/#checklist","text":"Publish and Sync completed without an issue. The new version is available in the bintray: https://dl.bintray.com/commercetools/maven/com/commercetools/commercetools-sync-java/ The new version is available in the maven: https://repo1.maven.org/maven2/com/commercetools/commercetools-sync-java/","title":"Checklist"},{"location":"CODE_OF_CONDUCT/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at support@commercetools.com . The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/\u00bc","title":"Contributor Covenant Code of Conduct"},{"location":"CODE_OF_CONDUCT/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"CODE_OF_CONDUCT/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"CODE_OF_CONDUCT/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at support@commercetools.com . The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/\u00bc","title":"Attribution"},{"location":"CONTRIBUTING/","text":"Contributing to commercetools-sync-java \u00b6 These are the contribution guidelines for the commercetools-sync-java. Thanks for taking the time to contribute :+1::tada: All contributions are welcome! Contribution process for all committers Typos Features or Bug Fixes Development Build Run unit tests Package JARs Package JARs and run tests Full build with tests, but without install to maven local repo (Recommended) Install to local maven repo Publish JavaDoc Build and publish to Bintray Integration Tests Running Contribution process for all committers \u00b6 Typos \u00b6 If you have push access to the repository you can fix them directly otherwise just make a pull request. Features or Bug Fixes \u00b6 Every PR should address an issue on the repository. If the issue doesn't exist, please create it first. Pull requests should always follow the following naming convention: [issue-number]-[pr-name] . For example, to address issue #65 which refers to a style bug, the PR addressing it should have a name that looks something like 65-fix-style-bug . Commit messages should always be prefixed with the number of the issue that they address. For example, #65: Remove redundant space. After your PR is merged to master: Delete the branch. Mark the issue it addresses with the merged-to-master label. Close the issue only if the change was released. Development \u00b6 Build \u00b6 Run unit tests \u00b6 ./gradlew test Package JARs \u00b6 ./gradlew clean jar Package JARs and run tests \u00b6 ./gradlew clean check Full build with tests, but without install to maven local repo (Recommended) \u00b6 ./gradlew clean build Install to local maven repo \u00b6 ./gradlew clean install Publish JavaDoc \u00b6 ./gradlew clean javadoc gitPublishPush -Dbuild.version ={ version } Note : in current Travis build workflow the command looks different: clean and javadoc are omitted because javadoc is previously created in build task, we just should not clean it now. Build and publish to Bintray \u00b6 ./gradlew clean build bintrayUpload -Dbuild.version ={ version } For more detailed information on the build and the release process, see Build and Release documentation. Integration Tests \u00b6 The integration tests of the library require to have two CTP projects (a source project and a target project) where the data will be tested to be synced on from the source to the target project. Running the tests does the following: Clean all the data in both projects. Create test data in either/both projects depending on the test. Execute the tests. Clean all the data in both projects, leaving them empty. Running \u00b6 To run the integration tests, CTP credentials are required. Credential can be obtained once you create a CTP project. For details, please refer to following link: https://docs.commercetools.com/merchant-center/projects.html#creating-a-project Use credentials Java properties file /src/integration-test/resources/it.properties : source.projectKey = aaaaa source.clientId = bbbbbbb source.clientSecret = ccc target.projectKey = ddddd target.clientId = eeeeeee target.clientSecret = fff Use it.properties.skeleton as a template to setup the credentials. Note : the it.properties file must be ignored by VCS. Set the following environment variables: export SOURCE_PROJECT_KEY = xxxxxxxxxxxxx export SOURCE_CLIENT_ID = xxxxxxxxxxxxxxx export SOURCE_CLIENT_SECRET = xxxxxxxxxxx export TARGET_PROJECT_KEY = xxxxxxxxxxxxx export TARGET_CLIENT_ID = xxxxxxxxxxxxxxx export TARGET_CLIENT_SECRET = xxxxxxxxxxx Note : it.properties file has precedence over environment variables. If the file exists - the environment variables are ignored. If the existing it.properties file is empty or one of the properties is missing - exception will be thrown on the tests execution If one of two options above is set - run the integration tests: ./gradlew integrationTest","title":"Contributing to commercetools-sync-java"},{"location":"CONTRIBUTING/#contributing-to-commercetools-sync-java","text":"These are the contribution guidelines for the commercetools-sync-java. Thanks for taking the time to contribute :+1::tada: All contributions are welcome! Contribution process for all committers Typos Features or Bug Fixes Development Build Run unit tests Package JARs Package JARs and run tests Full build with tests, but without install to maven local repo (Recommended) Install to local maven repo Publish JavaDoc Build and publish to Bintray Integration Tests Running","title":"Contributing to commercetools-sync-java"},{"location":"CONTRIBUTING/#contribution-process-for-all-committers","text":"","title":"Contribution process for all committers"},{"location":"CONTRIBUTING/#typos","text":"If you have push access to the repository you can fix them directly otherwise just make a pull request.","title":"Typos"},{"location":"CONTRIBUTING/#features-or-bug-fixes","text":"Every PR should address an issue on the repository. If the issue doesn't exist, please create it first. Pull requests should always follow the following naming convention: [issue-number]-[pr-name] . For example, to address issue #65 which refers to a style bug, the PR addressing it should have a name that looks something like 65-fix-style-bug . Commit messages should always be prefixed with the number of the issue that they address. For example, #65: Remove redundant space. After your PR is merged to master: Delete the branch. Mark the issue it addresses with the merged-to-master label. Close the issue only if the change was released.","title":"Features or Bug Fixes"},{"location":"CONTRIBUTING/#development","text":"","title":"Development"},{"location":"CONTRIBUTING/#build","text":"","title":"Build"},{"location":"CONTRIBUTING/#run-unit-tests","text":"./gradlew test","title":"Run unit tests"},{"location":"CONTRIBUTING/#package-jars","text":"./gradlew clean jar","title":"Package JARs"},{"location":"CONTRIBUTING/#package-jars-and-run-tests","text":"./gradlew clean check","title":"Package JARs and run tests"},{"location":"CONTRIBUTING/#full-build-with-tests-but-without-install-to-maven-local-repo-recommended","text":"./gradlew clean build","title":"Full build with tests, but without install to maven local repo (Recommended)"},{"location":"CONTRIBUTING/#install-to-local-maven-repo","text":"./gradlew clean install","title":"Install to local maven repo"},{"location":"CONTRIBUTING/#publish-javadoc","text":"./gradlew clean javadoc gitPublishPush -Dbuild.version ={ version } Note : in current Travis build workflow the command looks different: clean and javadoc are omitted because javadoc is previously created in build task, we just should not clean it now.","title":"Publish JavaDoc"},{"location":"CONTRIBUTING/#build-and-publish-to-bintray","text":"./gradlew clean build bintrayUpload -Dbuild.version ={ version } For more detailed information on the build and the release process, see Build and Release documentation.","title":"Build and publish to Bintray"},{"location":"CONTRIBUTING/#integration-tests","text":"The integration tests of the library require to have two CTP projects (a source project and a target project) where the data will be tested to be synced on from the source to the target project. Running the tests does the following: Clean all the data in both projects. Create test data in either/both projects depending on the test. Execute the tests. Clean all the data in both projects, leaving them empty.","title":"Integration Tests"},{"location":"CONTRIBUTING/#running","text":"To run the integration tests, CTP credentials are required. Credential can be obtained once you create a CTP project. For details, please refer to following link: https://docs.commercetools.com/merchant-center/projects.html#creating-a-project Use credentials Java properties file /src/integration-test/resources/it.properties : source.projectKey = aaaaa source.clientId = bbbbbbb source.clientSecret = ccc target.projectKey = ddddd target.clientId = eeeeeee target.clientSecret = fff Use it.properties.skeleton as a template to setup the credentials. Note : the it.properties file must be ignored by VCS. Set the following environment variables: export SOURCE_PROJECT_KEY = xxxxxxxxxxxxx export SOURCE_CLIENT_ID = xxxxxxxxxxxxxxx export SOURCE_CLIENT_SECRET = xxxxxxxxxxx export TARGET_PROJECT_KEY = xxxxxxxxxxxxx export TARGET_CLIENT_ID = xxxxxxxxxxxxxxx export TARGET_CLIENT_SECRET = xxxxxxxxxxx Note : it.properties file has precedence over environment variables. If the file exists - the environment variables are ignored. If the existing it.properties file is empty or one of the properties is missing - exception will be thrown on the tests execution If one of two options above is set - run the integration tests: ./gradlew integrationTest","title":"Running"},{"location":"DOCUMENTATION_PAGES/","text":"Building the Documentation Pages \u00b6 The documentation pages are published here: https://commercetools.github.io/commercetools-sync-java mkdocs documentation . mkdocs-material documentation . Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Gradle tasks \u00b6 mkdocsInit - Create new mkdocs site (like this). mkdocsBuild - Build the documentation site. mkdocsServe - Start the live-reloading docs server. mkdocsPublish - Publish generated site version to github pages. Mkdocs native Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Building the Documentation Pages"},{"location":"DOCUMENTATION_PAGES/#building-the-documentation-pages","text":"The documentation pages are published here: https://commercetools.github.io/commercetools-sync-java mkdocs documentation . mkdocs-material documentation .","title":"Building the Documentation Pages"},{"location":"DOCUMENTATION_PAGES/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"DOCUMENTATION_PAGES/#gradle-tasks","text":"mkdocsInit - Create new mkdocs site (like this). mkdocsBuild - Build the documentation site. mkdocsServe - Start the live-reloading docs server. mkdocsPublish - Publish generated site version to github pages.","title":"Gradle tasks"},{"location":"DOCUMENTATION_PAGES/#mkdocs-native-commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Mkdocs native Commands"},{"location":"RELEASE_NOTES/","text":"Release Notes \u00b6 2.3.0 - Oct 15, 2020 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (1) Customer Sync - Added support for syncing customers between ctp projects. #579 Customer Sync - Introduced CustomerSyncUtils which calculates all needed update actions after comparing a Customer and a CustomerDraft . #579 Customer Sync - Introduced CustomerUpdateActionUtils which contains utils for calculating needed update actions after comparing individual fields of a Customer and a CustomerDraft . #579 Customer Sync - Introduced CustomerReferenceResolutionUtils which resolves CustomerGroup and Type references from a Customer to a CustomerDraft. #579 2.2.1 - Sep 29, 2020 \u00b6 Commits | Javadoc | Jar \ud83d\udc1e Bug Fixes (1) Product Sync - Fixed a bug in the ProductSync related handling of unresolved product references provided in different batches. #580 2.2.0 - Sep 25, 2020 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (2) Product Sync - Added support for resolving key-value-document (custom object) references on attributes of type Reference , Set of Reference , NestedType or Set of NestedType . #564 Introduced new concept for the validation of the drafts in batches for each Sync instance, exposed with BaseBatchValidator implementations (i.e. ProductBatchValidator, CategoryBatchValidator). #233 \u2728 Enhancements (2) Category Sync - Passed category keys in batch to cacheKeysToIds method of CategoryService to avoid fetching all categories for every batch. #235 Populated keyToId caches in services before reference resolution to improve the performance of the library with collecting referenced keys in batches of drafts. #235 \ud83d\udee0\ufe0f Dependency Updates (1) mockito-junit-jupiter 3.5.11 -> 3.5.13 2.1.0 - Sep 21, 2020 \u00b6 Commits | Javadoc | Jar - \ud83c\udf89 New Features (2) - CustomObject Sync - Added support for syncing custom objects between ctp projects. #565 For more info how to use it please refer to CustomObject usage doc . - CustomObject Sync - Exposed CustomObjectSyncUtils#hasIdenticalValue which determines whether update process is required after comparing a CustomObject and a CustomObjectDraft . #565 \ud83d\udee0\ufe0f Dependency Updates (3) org.ajoberstar.git-publish 2.1.3 -> 3.0.0 org.ajoberstar.grgit 4.0.2 -> 4.1.0 mockito-junit-jupiter 3.5.10 -> 3.5.11 2.0.0 - Sept 14, 2020 \u00b6 Commits | Javadoc | Jar \ud83d\udea7 Breaking Changes (2) Sync options: The signatures of the errorCallback and warningCallback changed and their parameter lists are extended. From now on the resource draft of the source project, the resource of the target project and optionally the failed update actions passed to the callbacks. Refer sync options for more details. #107 Reference resolution utilities: Commons - Renamed replaceCustomTypeIdWithKeys to mapToCustomFieldsDraft . #138 Commons - Renamed replaceAssetsReferencesIdsWithKeys to mapToAssetDrafts . #138 Category Sync - Renamed replaceCategoriesReferenceIdsWithKeys to mapToCategoryDrafts . #138 CartDiscount Sync - Renamed replaceCartDiscountsReferenceIdsWithKeys to mapToCartDiscountDrafts . #138 Inventory Sync - Renamed replaceInventoriesReferenceIdsWithKeys to mapToInventoryEntryDrafts . #138 Product Sync - Renamed replaceProductsReferenceIdsWithKeys to mapToProductDrafts . #138 State Sync - Renamed replaceStateReferenceIdsWithKeys to mapToStateDrafts . #138 ProductType Sync - Renamed replaceProductTypesReferenceIdsWithKeys to mapToProductTypeDrafts . #138 \u2728 Enhancements (1) The library will fail fast for the non-existing references that found during the reference resolution. #219 \ud83d\udee0\ufe0f Dependency Updates (4) commercetools-jvm-sdk 1.52.0 -> 1.53.0 org.assertj.assertj-core 3.16.0 -> 3.17.2 junit.jupiterApiVersion 5.6.2 -> 5.7.0 mockito-junit-jupiter 3.4.4 -> 3.5.10 com.github.ben-manes.versions 0.29.0 -> 0.33.0 1.9.1 - Aug 5, 2020 \u00b6 Commits | Javadoc | Jar \ud83d\udc1e Bug Fixes (1) Product Sync - Fixed a bug in the ProductSync related to publish/unpublish of the product update actions, when a new product draft has publish flag set to true and the existing product is published already then no publish action will be created which was not correct #530 1.9.0 - July 27, 2020 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (6) TaxCategory Sync - Added support for syncing tax categories. #417 For more info how to use it please refer to TaxCategory usage doc . TaxCategory Sync - Exposed TaxCategorySyncUtils#buildActions which calculates all needed update actions after comparing a TaxCategory and a TaxCategoryDraft . #417 TaxCategory Sync - Exposed TaxCategoryUpdateActionUtils which contains utils for calculating needed update actions after comparing individual fields of a TaxCategory and a TaxCategoryDraft . #417 State Sync - Added support for syncing states. #409 For more info how to use it please refer to States usage doc . State Sync - Exposed StateSyncUtils#buildActions which calculates all needed update actions after comparing a State and a StateDraft . #409 State Sync - Exposed StateUpdateActionUtils which contains utils for calculating needed update actions after comparing individual fields of a State and a StateDraft . #409 Thanks, @jarzynp for the contributions! \ud83d\udee0\ufe0f Dependency Updates (6) com.adarshr.test-logger 2.0.0 -> 2.1.0 org.assertj.assertj-core 3.15.0 -> 3.16.0 junit.jupiterApiVersion 5.6.1 -> 5.6.2 commercetools-jvm-sdk 1.51.0 -> 1.52.0 mockito-junit-jupiter 3.3.3 -> 3.4.4 com.github.ben-manes.versions 0.28.0 -> 0.29.0 1.8.2 - April 30, 2020 \u00b6 Commits | Javadoc | Jar \ud83d\udc1e Bug Fixes (2) Commons - Fixed a bug in the Sync implementations causing the sync fail with throwing ClassCastException . #466 Product Sync - Fixed a bug in the ProductSync related to the ordering of variant update actions, which was not correct when there is SetAttributeInAllVariants action in update actions. Thanks, @ahmed-ali225, for the contributions! #513 1.8.1 - April 22, 2020 \u00b6 Commits | Javadoc | Jar \u2728 Enhancements (1) Commons - Remove final keyword on interface/abstract method params. #165 \ud83d\udc1e Bug Fixes (3) CartDiscount Sync - Fixed a bug in the CartDiscountSync which generates a changeValue action when there is no change, causing the sync to fail for that cart discount. Thanks, @michaelbannister, for the contributions! #494 Product Sync - Fixed a bug in the ProductSync when ensurePriceChannels is enabled in ProductSyncOptions should not create a missing channel used on product variant price draft. #499 Product/Category Sync - Validate that asset keys are always defined on the supplied drafts and the existing target resources (products/categories). #366 \ud83d\udee0\ufe0f Dependency Updates (5) junit.jupiterApiVersion 5.5.2 -> 5.6.1 commercetools-jvm-sdk 1.48.0 -> 1.51.0 org.assertj.assertj-core 3.14.0 -> 3.15.0 mockito-junit-jupiter 3.2.4 -> 3.3.3 com.github.ben-manes.versions 0.27.0 -> 0.28.0 ru.vyarus.mkdocs 2.0.0 -> 2.0.1 org.ajoberstar.grgit 4.0.1 -> 4.0.2 1.8.0 - Jan 17, 2020 \u00b6 Commits | Javadoc | Jar \u2728 Enhancements (1) Inventory Sync - Only cache the needed keys of Channel references instead of caching all keys of such resources. #198 Note : This might have performance implications on the inventory sync, since now every non cached key-id entry will be individually fetched. However, issue #235 should address this. 1.7.0 - Jan 7, 2020 \u00b6 Commits | Javadoc | Jar \u2728 Enhancements (2) Product Sync - Only cache the needed keys of Category , ProductType and Type references instead of caching all keys of such resources. #418 Note : This might have performance implications on the product sync, since now every non cached key-id entry will be individually fetched. However, issue #235 should address this. Commons - Refactor duplicate implementations in concrete services and generalise it in the BaseService . Thanks, @jarzynp, for the contributions! #418 \ud83d\udc1e Bug Fixes (1) Product Sync - Fixed a bug in the Product Sync where keys with special characters failed to be saved for CustomObject s, as the characters weren't allowed on the commmercetools platform. #474 Note : \ud83d\udea7 This is a breaking change. Previously stored custom objects representing product drafts with unresolved references, won't be synced with this version, since the key is now treated differently. Make sure to sync such drafts again with this version of the library. \ud83d\udee0\ufe0f Dependency Updates (5) org.ajoberstar.grgit 3.1.1 -> 4.0.1 org.ajoberstar.git-publish 2.1.1 -> 2.1.3 mockito-junit-jupiter 3.1.0 -> 3.2.4 commercetools-jvm-sdk 1.47.0 -> 1.48.0 org.assertj.assertj-core 3.13.2 -> 3.14.0 1.6.1 - Oct 17, 2019 \u00b6 Commits | Javadoc | Jar \ud83d\udc1e Bug Fixes (3) Commons - Fixed a bug in the CtpQueryUtils which was overwriting the query input query for every page after the first page is fetched, eventually fetching more than needed. #463 Product Sync - Fixed a potential bug in reference resolution of attribute references in case a null reference is passed in an attribute draft of type Set of Reference . #441 ProductType Sync - Fixed a bug in the productType sync where the statistics failed counter was being counted on failed fetches of missing references. #426 \ud83d\udee0\ufe0f Dependency Updates (4) mockito-junit-jupiter 3.0.0 -> 3.1.0 com.adarshr.test-logger 1.7.1 -> 2.0.0 com.github.ben-manes.versions 0.25.0 -> 0.27.0 commercetools-jvm-sdk 1.46.0 -> 1.47.0 1.6.0 - Oct 10, 2019 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (1) Product Sync - Introduced support for syncing products with other product references as attributes in any order. #447 \ud83d\udee0\ufe0f Dependency Updates (1) com.adarshr.test-logger 1.7.0 -> 1.7.1 #456 1.5.0 - Sept 13, 2019 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (4) Product Sync - Added support for resolving Product references on attributes of type Reference , Set of Reference , NestedType or Set of NestedType . #438 Product Sync - Added support for resolving Category references on attributes of type Reference , Set of Reference , NestedType or Set of NestedType . #440 Product Sync - Added support for resolving ProductType references on attributes of type Reference , Set of Reference , NestedType or Set of NestedType . #440 Commons - Exposed ResourceIdentifierUtils#isReferenceOfType utility which checks if a JSON representation of a CTP Reference object is of a certain typeId or not. #443 \ud83d\udea7 Breaking Changes (1) Product Sync - Unexposed the methods VariantReferenceResolver#resolveAttributeReferences and VariantReferenceResolver#resolveAttributeReference to be private as they are only meant for internal use of the library. #440 \ud83d\udee0\ufe0f Dependency Updates (5) Gradle 5.6.1 -> 5.6.2 org.junit.jupiter:junit-jupiter-api 5.5.1 -> 5.5.2 org.junit.jupiter:junit-jupiter-engine 5.5.1 -> 5.5.2 org.junit.jupiter:junit-jupiter-params 5.5.1 -> 5.5.2 com.github.ben-manes.versions 0.22.0 -> 0.25.0 1.4.1 - Sept 2, 2019 \u00b6 Commits | Javadoc | Jar \ud83d\udc1e Bug Fixes (1) Commons - Fixed a bug in the custom fields update actions builders which generated duplicated unnecessary update actions for null custom field values. This affected any sync module where the resource contained custom fields (i.e. Product Sync, Category Sync, CartDiscount Sync and Inventory Sync). It also affected any update actions building utility in which the resource/sub-resource contained custom fields. #428 \ud83d\udee0\ufe0f Enhancements (1) Commons - Bumped commercetools-jvm-sdk to version 1.46.0 which includes a fix for a serialization bug in the SetCustomField action which was ignoring empty array values. #430 1.4.0 - Aug 8, 2019 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (5) ProductType Sync - Introduced support for syncing product types with NestedType (or set of NestedType) attributes in any order. #372 ProductType Sync - Introduced the new ProductTypeReferenceReplacementUtils#replaceProductTypesReferenceIdsWithKeys which is a util that replaces the reference ids with keys in a list of productTypes. #372 ProductType Sync - Introduced the new ProductTypeReferenceReplacementUtils#buildProductTypeQuery utils to create a product type query with all needed reference expansions to fetch productTypes from a source CTP project for the sync. #372 ProductType Sync - Introduced the new ProductTypeReferenceResolver which resolves productType references on ProductTypeDrafts. #372 ProductType Sync - Introduced the new methods ProductTypeSyncStatistics#getNumberOfProductTypesWithMissingNestedProductTypes and ProductTypeSyncStatistics#getProductTypeKeysWithMissingParents which represents the nested product types which are still not resolved. #372 \ud83d\udee0\ufe0f Enhancements (8) Commons - Bumped commercetools-jvm-sdk to version 1.45.0 . Commons - Bumped gradle to version gradle-5.5.1 Commons - Bumped org.junit.jupiter:junit-jupiter-api to 5.5.1. Commons - Bumped org.junit.jupiter:junit-jupiter-engine to 5.5.1. Commons - Bumped org.junit.jupiter:junit-jupiter-params to 5.5.1. Commons - Bumped mockito-junit-jupiter dependency to 3.0.0. Commons - Bumped assertj to 3.13.2. Commons - Bumped com.github.ben-manes.versions to 0.22.0. 1.3.0 - Jul 3, 2019 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (6) CartDiscount Sync - Added support for syncing cart discounts. #379 For more info how to use it please refer to CartDiscount usage doc . CartDiscount Sync - Introduced the new CartDiscountSyncUtils#buildActions which calculates all needed update actions after comparing a CartDiscount and a CartDiscountDraft . #379 CartDiscount Sync - Introduced the new CartDiscountUpdateActionUtils which contains utils for calculating needed update actions after comparing individual fields of a CartDiscount and a CartDiscountDraft . #379 CartDiscount Sync - Introduced the new CartDiscountReferenceResolver which resolves custom type references on CartDiscountDrafts. #379 CartDiscount Sync - Introduced the new CartDiscountReferenceReplacementUtils#replaceCartDiscountsReferenceIdsWithKeys which is a util that replaces the custom type ids with keys in a list of cartDiscounts. #379 CartDiscount Sync - Introduced the new CartDiscountReferenceReplacementUtils#buildCartDiscountQuery util to create a cart discount query with all needed reference expansions to fetch cart discounts from a source CTP project for the sync. #379 . \ud83d\udc1e Bug Fixes (1) Commons - Fixed a bug in the BaseSyncStatistics which caused a wrong calculation of the latestBatchProcessingTimeInMinutes . #378 \ud83d\udee0\ufe0f Enhancements (6) CartDiscount Sync - Added benchmarks for the cartDiscount sync to be able to compare the performance of the sync with the future releases. #379 Commons - Bumped commercetools-jvm-sdk to version 1.44.0 . Commons - Bumped gradle to version gradle-5.5 Commons - Bumped org.junit.jupiter:junit-jupiter-api to 5.5.0. Commons - Bumped org.junit.jupiter:junit-jupiter-engine to 5.5.0. Commons - Bumped org.junit.jupiter:junit-jupiter-params to 5.5.0. 1.2.0 - Jun 14, 2019 \u00b6 Commits | Javadoc | Jar \ud83d\udea7 Breaking Changes (2) ProductType Sync - Removed the unneeded AttributeDefinitionCustomBuilder which was an exposed but internal helper. #377 . Commons - SyncUtils#replaceReferenceIdWithKey is now renamed to SyncUtils#getReferenceWithKeyReplaced . #394 \ud83c\udf89 New Features (2) Commons - Added the new CommonTypeUpdateActionUtils#buildUpdateActionForReferences which is used for comapring references/resourceIdentifiers and buiding an update action if needed. #394 Commons - Added the new SyncUtils#getResourceIdentifierWithKeyReplaced util. #394 \ud83d\udc1e Bug Fixes (1) Commons - Fixed a bug where references and resource identifiers were not being compared correctly. #394 \ud83d\udee0\ufe0f Enhancements (13) Commons - Bumped commercetools-jvm-sdk to version 1.43.0 . Commons - Bumped mockito to 2.27.0. Commons - Bumped assertj to 3.12.2. Commons - Bumped org.junit.jupiter:junit-jupiter-api to 5.4.2. Commons - Bumped org.junit.jupiter:junit-jupiter-engine to 5.4.2. Commons - Bumped org.junit.jupiter:junit-jupiter-params to 5.4.2. Commons - Bumped org.ajoberstar.git-publish to 2.1.1. Commons - Bumped org.ajoberstar.grgit to 3.1.1. Commons - Bumped com.github.ben-manes.versions to 0.21.0. Commons - Bumped gradle checkstyle plugin to 8.2. Commons - Bumped mockito dependency to 2.28.2. Commons - Bumped JaCoCo dependency to 0.8.4. Commons - Bumped gradle to version gradle-5.4.1 Commons - Bumped com.adarshr.test-logger to 1.7.0. 1.1.1 - Jan 16, 2019 \u00b6 Commits | Javadoc | Jar \ud83d\udc1e Bug Fixes (1) Product Sync - Fixed a bug in the product sync which would fail on syncing attributes of type Set that has an empty set as a value. 1.1.0 - Dec 19, 2018 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (4) Product Sync - Added support for syncing assets of newly added variants. #357 . Product Sync - ProductSyncUtils#buildActions and ProductUpdateActionUtils#buildVariantsUpdateActions now build AddAsset actions for every new asset on every new variant on the new ProductDraft . #357 . ProductType Sync - Added support for syncing changes to an AttributeDefinition with a SetType of a subtype LocalizableEnumType or EnumType #313 Type Sync - Added support for syncing changes to a FieldDefinition with a SetType of a subtype LocalizableEnumType or EnumType #313 \ud83d\udc1e Bug Fixes (3) ProductType Sync - Fixed a bug in the productType sync which would try to unset isSearchable , inputHint and attributeConstraint values to null instead of their default values. #354 ProductType Sync - ProductTypeSyncUtils#buildActions , ProductTypeUpdateActionUtils#buildAttributesUpdateActions now treat the values of the optional fields isSearchable , inputHint and attributeConstraint as ( true , SingleLine and None respectivley) if they are null or not passed. #354 Commons - Fixed a bug in the beforeUpdateCallback which caused the callback to be called even on an empty list of update actions. #359 \ud83d\udee0\ufe0f Enhancements (1) Commons - Benchmarks are now run once on every merge to master with a lower number of resources for faster benchmarking. #246 \ud83d\udccb Documentation (2) Commons - Added link to documentation pages in README of the github repo. Commons - Fixed link of beforeUpdateCallback for keeping other variants example in the Sync Options doc page. #360 1.0.0 - Dec 10, 2018 \u00b6 Commits | Javadoc | Jar The Beta is Over \ud83c\udf89 \u00b6 We're happy to announce that the commercetools-sync-java is finally out of beta! Big thanks to all the users who were using it when it was still in beta. Your feedback was definitely valuable for us to reach the current state of the library. 1.0.0 is here for you to use with all new features, enhancements and bug fixes including: The library now supports importing/syncing types into a CTP project from an external feed or another CTP project. Read more . The library now handles concurrency modification exceptions for the productType sync. All new documentation pages including a quick start guide . Many more improvements and bug fixes. Full Release Notes \u00b6 \ud83c\udf89 New Features (4) Type Sync - Added support for syncing types. #300 For more info how to use it please refer to Type usage doc . Type Sync - Exposed TypeSyncUtils#buildActions which calculates all needed update actions after comparing a Type and a TypeDraft . #300 Type Sync - Exposed TypeUpdateActionUtils which contains utils for calculating needed update actions after comparing individual fields of a Type and a TypeDraft . #300 Commons - Added OptionalUtils#filterEmptyOptionals which are utility methods that filter out the empty optionals in a supplied list (with a varargs variation) returning a list of the contents of the non-empty optionals. #255 \ud83d\udee0\ufe0f Enhancements (17) ProductType Sync - Added concurrency modification exception handling. #325 Commons - ProductSyncUtils#buildActions , CategorySyncUtils#buildActions , InventorySyncUtils#buildActions and ProductTypeSyncUtils#buildActions now don't apply the beforeUpdateCallback implicitly. If you want, you can apply it explicitly on the result of the ..#buildActions method. #302 Product Sync - Reference keys are not validated if they are in UUID format anymore. #166 Category Sync - Reference keys are not validated if they are in UUID format anymore. #166 Inventory Sync - Reference keys are not validated if they are in UUID format anymore. #166 ProductType Sync - Added benchmarks for the productType sync to be able to compare the performance of the sync with the future releases. #301 Commons - Bumped commercetools-jvm-sdk to version 1.37.0 . Commons - Bumped mockito to 2.23.4. Commons - Bumped com.adarshr.test-logger to 1.6.0. Commons - Bumped org.junit.jupiter:junit-jupiter-api to 5.3.2. Commons - Bumped org.junit.jupiter:junit-jupiter-engine to 5.3.2. Commons - Bumped org.junit.jupiter:junit-jupiter-params to 5.3.2. Commons - Bumped org.ajoberstar.git-publish to 2.0.0. Commons - Bumped org.ajoberstar.grgit to 3.0.0. Commons - Bumped gradle to version gradle-5.0 Type Sync - Added benchmarks for the type sync to be able to compare the performance of the sync with the future releases. #300 \ud83d\udea7 Breaking Changes (9) Product Sync - allowUuid option is now removed. #166 Category Sync - allowUuid option is now removed. #166 Inventory Sync - allowUuid option is now removed. #166 ProductType Sync - allowUuid option is now removed. #166 ProductType Sync - Renamed ProductTypeUpdateAttributeDefinitionActionUtils to AttributeDefinitionsUpdateActionUtils . It is also now meant to be only used internally by the library. Its behaviour is not guaranteed if used externally. #302 ProductType Sync - AttributeDefinitionUpdateActionUtils is now meant to be only used internally by the library. Its behaviour is not guaranteed if used externally. #302 ProductType Sync - EnumsUpdateActionUtils is now EnumValuesUpdateActionUtils and is meant to be only used internally by the library. Its behaviour is not guaranteed if used externally. #300 ProductType Sync - Utils that were in ProductTypeUpdateLocalizedEnumActionUtils and LocalizedEnumsUpdateActionUtils. are moved to LocalizedEnumValueUpdateActionUtils . #300 ProductType Sync - Utils that were in ProductTypeUpdatePlainEnumActionUtils and PlainEnumUpdateActionsUtils. are moved to PlainEnumValueUpdateActionUtils . #300 \ud83d\udc1e Bug Fixes (3) Product Sync - Fixed a bug that caused the statistics not to be updated correctly on fetch failure. #331 Category Sync - Fixed a bug that caused the statistics not to be updated correctly on fetch failure. #331 ProductType Sync - Fixed a bug that caused the sync process to continue after failed fetch. #331 \ud83d\udccb Documentation (4) Commons - Added the documentation github pages. https://commercetools.github.io/commercetools-sync-java Commons - Added a Quick Start Guide for a convenient entry into the library. Commons - Moved documentation of sync options to a separate doc . Commons - Added a the earliest compatible version of the commercetools-jvm-sdk]( https://github.com/commercetools/commercetools-jvm-sdk ) as a prerequisite for using the library. v1.0.0-M14 - Oct 5, 2018 \u00b6 Commits | Javadoc | Jar \ud83d\udc1e Bug Fixes (1) Product Sync - Fixed a bug where the removed attributes in the source product variant draft were not being removed from the target variant. #238 \ud83d\udee0 Enhancements (8) Product Sync - Products create and update requests are now issued in parallel. This should lead to a performance improvement. #238 Commons - Bumped com.adarshr.test-logger to 1.5.0. Commons - Bumped mockito to 2.22.0. Commons - Bumped org.junit.jupiter:junit-jupiter-api to 5.3.1. Commons - Bumped org.junit.jupiter:junit-jupiter-engine to 5.3.1. Commons - Bumped org.junit.jupiter:junit-jupiter-params to 5.3.1. Commons - UnorderedCollectionSyncUtils#buildRemoveUpdateActions ensures no null elements in the resulting list and ignores null` keys now. #238 Commons - Bumped gradle to version gradle-4.10.2 . \ud83d\udea7 Breaking Changes (2) Product Sync - AttributeMetaData#isRequired is now removed. #308 Product Sync - ProductVariantAttributeUpdateActionUtils#buildProductVariantAttributeUpdateAction now takes a map of all meta data instead of the specific metadata entry. #308 v1.0.0-M13 - Sept 5, 2018 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (15) ProductType Sync - Support for syncing productTypes. #286 For more info how to use it please refer to ProductType usage doc . Product Sync - Support for syncing product prices. #101 Product Sync - ProductSyncUtils#buildActions now also calculates variants' all price update actions needed. #101 Product Sync - ProductUpdateActionUtils#buildVariantsUpdateActions now also calculates variants' all price update actions needed. #101 Product Sync - Introduced new update action build utility for building all needed update actions between two variants' prices ProductVariantUpdateActionUtils#buildProductVariantPricesUpdateActions . #101 ProductSync - PriceReferenceResolver now resolves prices' CustomerGroup references on prices. #101 InventoryEntry Sync - InventoryReferenceReplacementUtils#replaceInventoriesReferenceIdsWithKeys now supports replacing channel reference ids with keys. #101 ProductType Sync - Exposed ProductTypeSyncUtils#buildActions which calculates all needed update actions after comparing a ProductType and a ProductTypeDraft . #286 ProductType Sync - Exposed ProductTypeUpdateActionUtils which contains utils for calculating needed update actions after comparing individual fields of a ProductType and a ProductTypeDraft . #286 ProductType Sync - Exposed ProductTypeUpdateAttributeDefinitionActionUtils which contains utils for calculating needed update actions after comparing a list of AttributeDefinition s and a list of AttributeDefinitionDraft s. #286 ProductType Sync - Exposed ProductTypeUpdateLocalizedEnumActionUtils which contains utils for calculating needed update actions after comparing two lists of LocalizedEnumValue s. #286 ProductType Sync - Exposed ProductTypeUpdatePlainEnumActionUtils which contains utils for calculating needed update actions after comparing two lists of EnumValue s. #286 ProductType Sync - Exposed AttributeDefinitionUpdateActionUtils which contains utils for calculating needed update actions after comparing an AttributeDefinition and an AttributeDefinitionDraft . #286 ProductType Sync - Exposed LocalizedEnumUpdateActionsUtils which contains utils for calculating needed update actions after comparing two LocalizedEnumValue s. #286 ProductType Sync - Exposed PlainEnumUpdateActionsUtils which contains utils for calculating needed update actions after comparing two EnumValue s. #286 \ud83d\udee0\ufe0f Enhancements (7) Commons - Bumped gradle to version gradle-4.10 . Commons - Bumped com.jfrog.bintray to 1.8.4. Commons - Bumped assertj to 3.11.1. Commons - Bumped mockito to 2.21.0. Commons - Bumped org.ajoberstar.grgit to 2.3.0. Commons - Bumped com.adarshr.test-logger to 1.4.0. Commons - Switched to Junit5 using both junit-jupiter-engine and junit-vintage-engine for backward compatibility. \ud83d\udee0\ufe0f Breaking Changes (3) Product Sync - Removed redundant ProductUpdateActionUtils#buildRemoveVariantUpdateActions . #3 Commons - Moved SyncUtils#replaceCustomTypeIdWithKeys to CustomTypeReferenceReplacementUtils#replaceCustomTypeIdWithKeys . #101 . Commons - Moved SyncUtils#replaceAssetsReferencesIdsWithKeys to AssetReferenceReplacementUtils#replaceAssetsReferencesIdsWithKeys . #101 . v1.0.0-M12 - Jun 05, 2018 \u00b6 Commits | Javadoc | Jar \ud83d\udee0\ufe0f Enhancements (13) Product Sync - Support for syncing price custom fields. #277 Product Sync - VariantReferenceResolver now resolves prices' custom type references on all variants. #277 Product Sync - ProductReferenceReplacementUtils#buildProductQuery now expands custom types on prices. #277 Product Sync - VariantReferenceReplacementUtils#replacePricesReferencesIdsWithKeys now supports replacing price custom reference ids with keys. #277 Commons - Bumped commercetools-jvm-sdk to version 1.32.0 . Commons - Bumped gradle to version gradle-4.8 . Commons - Bumped com.jfrog.bintray to 1.8.0. Commons - Bumped org.ajoberstar.git-publish to 1.0.0. Commons - Bumped com.adarshr.test-logger to 1.2.0. Commons - Bumped org.ajoberstar.grgit to 2.2.1. Commons - Bumped gradle checkstyle plugin to 8.10.1. Commons - Bumped mockito dependency to 2.18.3. Commons - Bumped JaCoCo dependency to 0.8.1. v1.0.0-M11 - Mar 08, 2018 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (19) Category Sync - Support of categories' asset syncing. #3 Product Sync - Support of product variants' asset syncing. #3 Category Sync - CategorySyncUtils#buildActions now also calculates all asset update actions needed. #3 Product Sync - ProductSyncUtils#buildActions now also calculates variants' all asset update actions needed. #3 Product Sync - ProductUpdateActionUtils#buildVariantsUpdateActions now also calculates variants' all asset update actions needed. #3 Product Sync - Introduced the new ActionGroup: ASSETS which can be used in blacklisting/whitelisting assets syncing during the product sync. #3 Category Sync - Introduced new update action build utility for building all needed update actions between two categories' assets ProductVariantUpdateActionUtils#buildProductVariantAssetsUpdateActions . #3 Product Sync - Introduced new update action build utility for building all needed update actions between two variants' assets ProductVariantUpdateActionUtils#buildProductVariantAssetsUpdateActions . #3 Category Sync - Introduced new update action granular build utils for category asset fields in CategoryAssetUpdateActionUtils . #3 Product Sync - Introduced new update action granular build utils for product variant assets fields in ProductVariantAssetUpdateActionUtils . #3 Commons - Introduced AssetReferenceResolver which is a helper that can resolve all the references of an AssetDraft. #3 Commons - VariantReferenceResolver and CategoryReferenceResolver now also resolve all the containing AssetDrafts references. #3 Commons - Support for custom update actions calculation for secondary resources (e.g. prices, product assets and category assets). #3 Product Sync - ProductReferenceReplacementUtils#replaceProductsReferenceIdsWithKeys and VariantReferenceReplacementUtils#replaceVariantsReferenceIdsWithKeys now support replacing asset custom reference ids with keys. #3 Category Sync - CategoryReferenceReplacementUtils#replaceCategoriesReferenceIdsWithKeys now supports replacing asset custom reference ids with keys. #3 Commons - Introduced new SyncUtils#replaceAssetsReferenceIdsWithKeys which is a util that replaces the custom type ids with keys in a list of assets. #3 Product Sync - ProductReferenceReplacementUtils#buildProductQuery now expands custom types on assets. #3 Category Sync - CategoryReferenceReplacementUtils#buildCategoryQuery now expands custom types on assets. #3 Commons - Introduced new ResourceIdentifierUtils#toResourceIdentifierIfNotNull . #262 Changes (5) Commons - CustomUpdateActionUtils#buildCustomUpdateActions is now CustomUpdateActionUtils#buildPrimaryResourceCustomUpdateActions . It now takes a new third parameter customActionBuilder which represents the concrete builder of custom update actions. For a list of concrete builder options check the implementors of the GenericCustomActionBuilder interface. #3 Commons - CustomUpdateActionUtils#buildCustomUpdateActions can now be used to build custom update actions for secondary resources (e.g. assets and prices). #3 Commons - New Custom Type Id is now validated against being empty/null. #3 Product Sync - ProductSyncUtils#buildCoreActions is now removed. ProductSyncUtils#buildActions should be used instead. #3 Category Sync - CategorySyncUtils#buildCoreActions is now removed. CategorySyncUtils#buildActions should be used instead. #3 \ud83d\udee0\ufe0f Enhancements (1) Build Tools - Bumped commercetools-jvm-sdk to version 1.30.0 . #262 \ud83d\udc1e Bug Fixes (1) Build Tools - Fixed bug where jar and Codecov were triggered on benchmark stages of the build when they should only be triggered on the full build. #249 v1.0.0-M10 - Feb 13, 2018 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (1) Commons - Added benchmarking setup for the library on every release. #155 Changes (3) Commons - Statistics counters are now of type AtomicInteger instead of int to support concurrency. #242 Category Sync - categoryKeysWithMissingParents in the CategorySyncStatistics is now of type ConcurrentHashMap<String, Set<String> instead of Map<String, List<String> . #242 Category Sync - CategorySyncStatistics now exposes the methods removeChildCategoryKeyFromMissingParentsMap , getMissingParentKey and putMissingParentCategoryChildKey to support manipulating categoryKeysWithMissingParents map. #242 v1.0.0-M9 - Jan 22, 2018 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (1) Commons - Added getSyncOptions to the ProductSync , CategorySync and InventorySync . #230 Changes (1) Product Sync - Added validation for product drafts' SKUs as a required field on the input product drafts since SKUs will be used for product matching in the future. #230 \ud83d\udee0\ufe0f Enhancements (1) Product Sync - Changed the product sync to cache product ids per batch as opposed to caching the entire products ids before syncing products. #230 \ud83d\udc1e Bug Fixes (1) Commons - Fixed library version in User-Agent headers of JVM SDK clients using the library. Now it is not fetched from the JAR manifest but injected by gradle-scripts/set-release-version.gradle. #227 v1.0.0-M8 - Dec 29, 2017 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (1) Category Sync - Exposed new method CategorySyncStatistics#getNumberOfCategoriesWithMissingParents which gets the total number of categories with missing parents from the statistics instance. #186 Changes (2) Product Sync - Changed product sync statistics report message wording. #186 Product Sync - Exposed new methods ProductReferenceResolver#resolveStateReference , ProductReferenceResolver#resolveTaxCategoryReference , ProductReferenceResolver#resolveCategoryReferences and ProductReferenceResolver#resolveProductTypeReference . #218 \ud83d\udee0 Enhancements (1) Build Tools - Bumped Gradle to version 4.4. #205 v1.0.0-M7 - Dec 15, 2017 \u00b6 Commits | Javadoc | Jar \ud83d\udc1e Bug Fixes (1) Commons - Changed offset-based pagination of querying all elements to a limit-based with sorted ids approach to mitigate problems of previous approach. #210 v1.0.0-M6 - Dec 5, 2017 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (3) Category Sync - Introduced beforeCreateCallback option which is callback applied on a category draft before a request to create it on CTP is issued. #183 Product Sync - Introduced beforeCreateCallback option which is callback applied on a product draft before a request to create it on CTP is issued. #183 Inventory Sync - Introduced beforeCreateCallback option which is callback applied on a inventoryEntry draft before a request to create it on CTP is issued. #183 \u2728 Major Enhancements (2) Category Sync - Introduced batching on update action requests to allow for requesting updates of more than 500 actions. #21 Product Sync - Introduced batching on update action requests to allow for requesting updates of more than 500 actions. #21 \ud83d\udc1e Bug Fixes (1) Commons - Fixed library version in User-Agent headers of JVM SDK clients using the library. #191 \ud83d\udccb Documentation (1) Commons - Added Code of Conduct doc. \ud83d\udea7 Migration guide (6) Product Sync - Removed removeOtherVariants option which is already done by the sync by default. Removal of variants can be prevented through the beforeUpdateCallback. Please check here an example of how this can be done. #26 Commons - Removed removeOtherSetEntries , removeOtherCollectionEntries and removeOtherProperties options which are already done by the sync by default. The aforementioned options (and even more use cases) can now be covered with help of the beforeCreateCallback and beforeUpdateCallback. Please check here an example of how removal of variants can be disabled. #26 Commons - Removed website and emergency contact e-mail appened in User-Agent headers of JVM SDK clients using the library. #191 Category Sync - beforeUpdateCallback now treats a null return as an empty list of update actions. #183 Product Sync - beforeUpdateCallback now treats a null return as an empty list of update actions. #183 Inventory Sync - beforeUpdateCallback now treats a null return as an empty list of update actions. #183 v1.0.0-M5 - Nov 16, 2017 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (3) Inventory Sync - Introduced beforeUpdateCallback which is applied after generation of update actions and before actual InventoryEntry update. #169 Build Tools - Added Add Release Notes entry checkbox in PR template on Github repo. #161 Commons - Appended library name and version to User-Agent headers of JVM SDK clients using the library. #142 \ud83d\udee0\ufe0f Enhancements (3) Commons - setUpdateActionsCallback has been renamed to beforeUpdateCallback and now takes a TriFunction instead of Function, which adds more information about the generated list of update actions, namely, the old resource being updated and the new resource draft. #169 Build Tools - Explicitly specified gradle tasks execution order in execution-order.gradle. #161 Build Tools - Set PMD to run before Integration tests. #161 Commons - Appended library name and version to User-Agent headers of JVM SDK clients using the library. #142 \ud83d\udccb Documentation (1) Build Tools - Added Snyk vulnerabilities badge to repo README. #188 \ud83d\udea7 Migration guide (8) Commons - Renamed setUpdateActionsCallback to beforeUpdateCallback . #169 Commons - Renamed setAllowUuid to allowUuid . #169 Commons - Renamed setWarningCallBack to warningCallback . #169 Commons - Renamed setErrorCallBack to errorCallback . #169 Commons - Renamed setBatchSize to batchSize . #169 Commons - Removed setRemoveOtherLocales option. #169 Commons - Renamed setRemoveOtherSetEntries , setRemoveOtherCollectionEntries and setRemoveOtherProperties to removeOtherSetEntries , removeOtherCollectionEntries and removeOtherProperties . #169 Product Sync - Renamed setSyncFilter to syncFilter . #169 v1.0.0-M4 - Nov 7, 2017 \u00b6 Commits | Javadoc | Jar \ud83d\udd25 Hotfix (1) Product Sync - Fixed an issue with replaceAttributesReferencesIdsWithKeys which nullifies localized text attributes due to JSON parsing not throwing exception on parsing it to reference set. #179 v1.0.0-M3 - Nov 3, 2017 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (7) ProductSync - Introduced Product TaxCategory reference resolution and syncing. #120 . ProductSync - Introduced Product State reference resolution and syncing. #120 . ProductSync - Exposed ProductReferenceReplacementUtils#buildProductQuery util to create a product query with all needed reference expansions to fetch products from a source CTP project for the sync. #120 . ProductSync - Exposed VariantReferenceReplacementUtils#replaceVariantsReferenceIdsWithKeys which provides utils to replace reference ids with keys on variants (price and attriute references) coming from a source CTP project to make it ready for reference resolution. #160 . ProductSync - Exposed VariantReferenceResolver which is a helper that resolves the price and attribute references on a ProductVariantDraft. (Note: This is used now by the already existing ProductReferenceResolver) #160 . CategorySync - Exposed CategoryReferenceReplacementUtils#buildCategoryQuery util to create a category query with all needed reference expansions to fetch categories from a source CTP project for the sync. #120 . Commons - Exposed replaceCustomTypeIdWithKeys and replaceReferenceIdWithKey . #120 . \ud83d\udc1e Bug Fixes (1) Category Sync - Fixes an issue where retrying on concurrent modification exception wasn't re-fetching the latest Category and rebuilding build update actions. #94 \ud83d\udccb Documentation (6) Product Sync - Documented the reason behind having the latest batch processing time. #119 Category Sync - Documented the reason behind having the latest batch processing time. #119 Category Sync - Fixed the statistics summary string used in the documentation. #119 Inventory Sync - Documented the reason behind having the latest batch processing time. #119 Product Sync - Fixed some typos. #172 Commons - Provided inline example of how to use logging in callbacks. #172 \ud83d\udea7 Migration guide (9) Product Sync - Moved replaceProductsReferenceIdsWithKeys from SyncUtils to ProductReferenceReplacementUtils . #120 Product Sync - Removed replaceProductDraftsCategoryReferenceIdsWithKeys which is not needed anymore. #120 Product Sync - Removed replaceProductDraftCategoryReferenceIdsWithKeys which is not needed anymore. #120 Product Sync - Removed replaceCategoryOrderHintCategoryIdsWithKeys which is not needed anymore. #120 Product Sync - Moved getDraftBuilderFromStagedProduct from SyncUtils to ProductReferenceReplacementUtils . #120 Category Sync - Moved replaceCategoriesReferenceIdsWithKeys from SyncUtils to CategoryReferenceReplacementUtils . #120 Inventory Sync - Moved replaceInventoriesReferenceIdsWithKeys from SyncUtils to InventoryReferenceReplacementUtils . #120 Commons - Removed slf4j-simple dependency. #172 Commons - Used implementation instead of compile configuration for dependencies. #172 v1.0.0-M2 - Oct 12, 2017 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (3) Product Sync - Supported syncing entire product variant images, putting order into consideration. #114 Product Sync - Exposed ProductVariantUpdateActionUtils#buildProductVariantImagesUpdateActions and ProductVariantUpdateActionUtils#buildMoveImageToPositionUpdateActions action build util. #114 Product Sync - Supported Blacklisting/Whitelisting update action groups on sync. #122 \ud83d\udc1e Bug Fixes (4) Build Tools - Fixed issue were JavaDoc jar was not built. #117 Build Tools - Fixed issue were JavaDoc was not published on github. #118 Product Sync - Fixed a potential bug where an exisitng master variant key could be blank. #122 Product Sync - Fixed a potential bug where a product draft could be provided with no master variant set. #122 \ud83d\udee0 Enhancements (2)\ufe0f Build Tools - Integration tests project credentials can now be set on a properties file not only as environment variables and give error messages if not set. #105 Product Sync - Validated the SKU before making a ChangeMasterVariant request by SKU. #122 \ud83d\udccb Documentation (5) Build Tools - Added bintray badge to repo. #126 Product Sync - Added usage documentation. #121 Commons - Separated contributing README into own README not in the main one. #121 Commons - Added release notes doc. #125 Build Tools - Added JavaDoc badge to repo. #145 v1.0.0-M2-beta - Sep 28, 2017 \u00b6 Commits | Jar Beta Features (11) Product Sync - Introduced syncing products name, categories, categoryOrderHints, description, slug, metaTitle, metaDescription, metaKeywords, masterVariant and searchKeywords. #57 Product Sync - Exposed update action build utils for products name, categories, categoryOrderHints, description, slug, metaTitle, metaDescription, metaKeywords, masterVariant and searchKeywords. #57 Product Sync - Introduced reference resolution support for product categories, productType and prices. #95 #96 Product Sync - Introduced syncing products publish state. #97 Product Sync - Exposed update action build utils for products publish state. #97 Product Sync - Introduced syncing products variant attributes. #98 Product Sync - Exposed update action build utils for products variant attributes. #98 Product Sync - Introduced syncing products variant prices without update action calculation. #99 Product Sync - Introduced syncing products variant images. #100 Product Sync - Exposed update action build utils for products variant images. #100 Product Sync - Introduced syncing products against staged projection. #93 v1.0.0-M1 - Sep 06, 2017 \u00b6 Commits | Javadoc | Jar \ud83c\udf89 New Features (16) Category Sync - Introduced syncing category name, description, orderHint, metaDescription, metaTitle, customFields and parent category. #2 Category Sync - Exposed update action build utils for category name, description, orderHint, metaDescription, metaTitle, customFields and parent category. #2 Category Sync - Introduced sync options builders. #5 Category Sync - Introduced support of syncing categories in any order. #28 Category Sync - Added concurrency modification exception repeater. #30 Category Sync - Used category keys for matching. #45 Category Sync - Introduced reference resolution support. #47 Category Sync - Introduced Batch processing support. #73 Category Sync - Added info about missing parent categories in statistics. #73 Commons - Introduced sync statistics support. #6 Commons - Sync ITs should now use client that repeats on 5xx errors. #31 Commons - Sync only accepts drafts. #46 Build Tools - Travis setup as CI tool. #1 Build Tools - Setup Bintray release and publising process. #24 Build Tools - Setup CheckStyle, PMD, FindBugs, Jacoco and CodeCov. #25 Build Tools - Setup repo PR and issue templates. #29 Beta Features (5) Inventory Sync - Introduced syncing inventory supplyChannel, quantityOnStock, restockableInDays, expectedDelivery and customFields. #17 Inventory Sync - Exposed update action build utils for inventory supplyChannel, quantityOnStock, restockableInDays, expectedDelivery and customFields. #17 Inventory Sync - Introduced sync options builder support. #15 Inventory Sync - Introduced reference resolution support. #47 Inventory Sync - Introduced batch processing support. #73","title":"Release notes"},{"location":"RELEASE_NOTES/#release-notes","text":"","title":"Release Notes"},{"location":"RELEASE_NOTES/#230-oct-15-2020","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (1) Customer Sync - Added support for syncing customers between ctp projects. #579 Customer Sync - Introduced CustomerSyncUtils which calculates all needed update actions after comparing a Customer and a CustomerDraft . #579 Customer Sync - Introduced CustomerUpdateActionUtils which contains utils for calculating needed update actions after comparing individual fields of a Customer and a CustomerDraft . #579 Customer Sync - Introduced CustomerReferenceResolutionUtils which resolves CustomerGroup and Type references from a Customer to a CustomerDraft. #579","title":"2.3.0 - Oct 15, 2020"},{"location":"RELEASE_NOTES/#221-sep-29-2020","text":"Commits | Javadoc | Jar \ud83d\udc1e Bug Fixes (1) Product Sync - Fixed a bug in the ProductSync related handling of unresolved product references provided in different batches. #580","title":"2.2.1 - Sep 29, 2020"},{"location":"RELEASE_NOTES/#220-sep-25-2020","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (2) Product Sync - Added support for resolving key-value-document (custom object) references on attributes of type Reference , Set of Reference , NestedType or Set of NestedType . #564 Introduced new concept for the validation of the drafts in batches for each Sync instance, exposed with BaseBatchValidator implementations (i.e. ProductBatchValidator, CategoryBatchValidator). #233 \u2728 Enhancements (2) Category Sync - Passed category keys in batch to cacheKeysToIds method of CategoryService to avoid fetching all categories for every batch. #235 Populated keyToId caches in services before reference resolution to improve the performance of the library with collecting referenced keys in batches of drafts. #235 \ud83d\udee0\ufe0f Dependency Updates (1) mockito-junit-jupiter 3.5.11 -> 3.5.13","title":"2.2.0 - Sep 25, 2020"},{"location":"RELEASE_NOTES/#210-sep-21-2020","text":"Commits | Javadoc | Jar - \ud83c\udf89 New Features (2) - CustomObject Sync - Added support for syncing custom objects between ctp projects. #565 For more info how to use it please refer to CustomObject usage doc . - CustomObject Sync - Exposed CustomObjectSyncUtils#hasIdenticalValue which determines whether update process is required after comparing a CustomObject and a CustomObjectDraft . #565 \ud83d\udee0\ufe0f Dependency Updates (3) org.ajoberstar.git-publish 2.1.3 -> 3.0.0 org.ajoberstar.grgit 4.0.2 -> 4.1.0 mockito-junit-jupiter 3.5.10 -> 3.5.11","title":"2.1.0 - Sep 21, 2020"},{"location":"RELEASE_NOTES/#200-sept-14-2020","text":"Commits | Javadoc | Jar \ud83d\udea7 Breaking Changes (2) Sync options: The signatures of the errorCallback and warningCallback changed and their parameter lists are extended. From now on the resource draft of the source project, the resource of the target project and optionally the failed update actions passed to the callbacks. Refer sync options for more details. #107 Reference resolution utilities: Commons - Renamed replaceCustomTypeIdWithKeys to mapToCustomFieldsDraft . #138 Commons - Renamed replaceAssetsReferencesIdsWithKeys to mapToAssetDrafts . #138 Category Sync - Renamed replaceCategoriesReferenceIdsWithKeys to mapToCategoryDrafts . #138 CartDiscount Sync - Renamed replaceCartDiscountsReferenceIdsWithKeys to mapToCartDiscountDrafts . #138 Inventory Sync - Renamed replaceInventoriesReferenceIdsWithKeys to mapToInventoryEntryDrafts . #138 Product Sync - Renamed replaceProductsReferenceIdsWithKeys to mapToProductDrafts . #138 State Sync - Renamed replaceStateReferenceIdsWithKeys to mapToStateDrafts . #138 ProductType Sync - Renamed replaceProductTypesReferenceIdsWithKeys to mapToProductTypeDrafts . #138 \u2728 Enhancements (1) The library will fail fast for the non-existing references that found during the reference resolution. #219 \ud83d\udee0\ufe0f Dependency Updates (4) commercetools-jvm-sdk 1.52.0 -> 1.53.0 org.assertj.assertj-core 3.16.0 -> 3.17.2 junit.jupiterApiVersion 5.6.2 -> 5.7.0 mockito-junit-jupiter 3.4.4 -> 3.5.10 com.github.ben-manes.versions 0.29.0 -> 0.33.0","title":"2.0.0 - Sept 14, 2020"},{"location":"RELEASE_NOTES/#191-aug-5-2020","text":"Commits | Javadoc | Jar \ud83d\udc1e Bug Fixes (1) Product Sync - Fixed a bug in the ProductSync related to publish/unpublish of the product update actions, when a new product draft has publish flag set to true and the existing product is published already then no publish action will be created which was not correct #530","title":"1.9.1 -  Aug 5, 2020"},{"location":"RELEASE_NOTES/#190-july-27-2020","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (6) TaxCategory Sync - Added support for syncing tax categories. #417 For more info how to use it please refer to TaxCategory usage doc . TaxCategory Sync - Exposed TaxCategorySyncUtils#buildActions which calculates all needed update actions after comparing a TaxCategory and a TaxCategoryDraft . #417 TaxCategory Sync - Exposed TaxCategoryUpdateActionUtils which contains utils for calculating needed update actions after comparing individual fields of a TaxCategory and a TaxCategoryDraft . #417 State Sync - Added support for syncing states. #409 For more info how to use it please refer to States usage doc . State Sync - Exposed StateSyncUtils#buildActions which calculates all needed update actions after comparing a State and a StateDraft . #409 State Sync - Exposed StateUpdateActionUtils which contains utils for calculating needed update actions after comparing individual fields of a State and a StateDraft . #409 Thanks, @jarzynp for the contributions! \ud83d\udee0\ufe0f Dependency Updates (6) com.adarshr.test-logger 2.0.0 -> 2.1.0 org.assertj.assertj-core 3.15.0 -> 3.16.0 junit.jupiterApiVersion 5.6.1 -> 5.6.2 commercetools-jvm-sdk 1.51.0 -> 1.52.0 mockito-junit-jupiter 3.3.3 -> 3.4.4 com.github.ben-manes.versions 0.28.0 -> 0.29.0","title":"1.9.0 -  July 27, 2020"},{"location":"RELEASE_NOTES/#182-april-30-2020","text":"Commits | Javadoc | Jar \ud83d\udc1e Bug Fixes (2) Commons - Fixed a bug in the Sync implementations causing the sync fail with throwing ClassCastException . #466 Product Sync - Fixed a bug in the ProductSync related to the ordering of variant update actions, which was not correct when there is SetAttributeInAllVariants action in update actions. Thanks, @ahmed-ali225, for the contributions! #513","title":"1.8.2 -  April 30, 2020"},{"location":"RELEASE_NOTES/#181-april-22-2020","text":"Commits | Javadoc | Jar \u2728 Enhancements (1) Commons - Remove final keyword on interface/abstract method params. #165 \ud83d\udc1e Bug Fixes (3) CartDiscount Sync - Fixed a bug in the CartDiscountSync which generates a changeValue action when there is no change, causing the sync to fail for that cart discount. Thanks, @michaelbannister, for the contributions! #494 Product Sync - Fixed a bug in the ProductSync when ensurePriceChannels is enabled in ProductSyncOptions should not create a missing channel used on product variant price draft. #499 Product/Category Sync - Validate that asset keys are always defined on the supplied drafts and the existing target resources (products/categories). #366 \ud83d\udee0\ufe0f Dependency Updates (5) junit.jupiterApiVersion 5.5.2 -> 5.6.1 commercetools-jvm-sdk 1.48.0 -> 1.51.0 org.assertj.assertj-core 3.14.0 -> 3.15.0 mockito-junit-jupiter 3.2.4 -> 3.3.3 com.github.ben-manes.versions 0.27.0 -> 0.28.0 ru.vyarus.mkdocs 2.0.0 -> 2.0.1 org.ajoberstar.grgit 4.0.1 -> 4.0.2","title":"1.8.1 -  April 22, 2020"},{"location":"RELEASE_NOTES/#180-jan-17-2020","text":"Commits | Javadoc | Jar \u2728 Enhancements (1) Inventory Sync - Only cache the needed keys of Channel references instead of caching all keys of such resources. #198 Note : This might have performance implications on the inventory sync, since now every non cached key-id entry will be individually fetched. However, issue #235 should address this.","title":"1.8.0 -  Jan 17, 2020"},{"location":"RELEASE_NOTES/#170-jan-7-2020","text":"Commits | Javadoc | Jar \u2728 Enhancements (2) Product Sync - Only cache the needed keys of Category , ProductType and Type references instead of caching all keys of such resources. #418 Note : This might have performance implications on the product sync, since now every non cached key-id entry will be individually fetched. However, issue #235 should address this. Commons - Refactor duplicate implementations in concrete services and generalise it in the BaseService . Thanks, @jarzynp, for the contributions! #418 \ud83d\udc1e Bug Fixes (1) Product Sync - Fixed a bug in the Product Sync where keys with special characters failed to be saved for CustomObject s, as the characters weren't allowed on the commmercetools platform. #474 Note : \ud83d\udea7 This is a breaking change. Previously stored custom objects representing product drafts with unresolved references, won't be synced with this version, since the key is now treated differently. Make sure to sync such drafts again with this version of the library. \ud83d\udee0\ufe0f Dependency Updates (5) org.ajoberstar.grgit 3.1.1 -> 4.0.1 org.ajoberstar.git-publish 2.1.1 -> 2.1.3 mockito-junit-jupiter 3.1.0 -> 3.2.4 commercetools-jvm-sdk 1.47.0 -> 1.48.0 org.assertj.assertj-core 3.13.2 -> 3.14.0","title":"1.7.0 -  Jan 7, 2020"},{"location":"RELEASE_NOTES/#161-oct-17-2019","text":"Commits | Javadoc | Jar \ud83d\udc1e Bug Fixes (3) Commons - Fixed a bug in the CtpQueryUtils which was overwriting the query input query for every page after the first page is fetched, eventually fetching more than needed. #463 Product Sync - Fixed a potential bug in reference resolution of attribute references in case a null reference is passed in an attribute draft of type Set of Reference . #441 ProductType Sync - Fixed a bug in the productType sync where the statistics failed counter was being counted on failed fetches of missing references. #426 \ud83d\udee0\ufe0f Dependency Updates (4) mockito-junit-jupiter 3.0.0 -> 3.1.0 com.adarshr.test-logger 1.7.1 -> 2.0.0 com.github.ben-manes.versions 0.25.0 -> 0.27.0 commercetools-jvm-sdk 1.46.0 -> 1.47.0","title":"1.6.1 -  Oct 17, 2019"},{"location":"RELEASE_NOTES/#160-oct-10-2019","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (1) Product Sync - Introduced support for syncing products with other product references as attributes in any order. #447 \ud83d\udee0\ufe0f Dependency Updates (1) com.adarshr.test-logger 1.7.0 -> 1.7.1 #456","title":"1.6.0 -  Oct 10, 2019"},{"location":"RELEASE_NOTES/#150-sept-13-2019","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (4) Product Sync - Added support for resolving Product references on attributes of type Reference , Set of Reference , NestedType or Set of NestedType . #438 Product Sync - Added support for resolving Category references on attributes of type Reference , Set of Reference , NestedType or Set of NestedType . #440 Product Sync - Added support for resolving ProductType references on attributes of type Reference , Set of Reference , NestedType or Set of NestedType . #440 Commons - Exposed ResourceIdentifierUtils#isReferenceOfType utility which checks if a JSON representation of a CTP Reference object is of a certain typeId or not. #443 \ud83d\udea7 Breaking Changes (1) Product Sync - Unexposed the methods VariantReferenceResolver#resolveAttributeReferences and VariantReferenceResolver#resolveAttributeReference to be private as they are only meant for internal use of the library. #440 \ud83d\udee0\ufe0f Dependency Updates (5) Gradle 5.6.1 -> 5.6.2 org.junit.jupiter:junit-jupiter-api 5.5.1 -> 5.5.2 org.junit.jupiter:junit-jupiter-engine 5.5.1 -> 5.5.2 org.junit.jupiter:junit-jupiter-params 5.5.1 -> 5.5.2 com.github.ben-manes.versions 0.22.0 -> 0.25.0","title":"1.5.0 -  Sept 13, 2019"},{"location":"RELEASE_NOTES/#141-sept-2-2019","text":"Commits | Javadoc | Jar \ud83d\udc1e Bug Fixes (1) Commons - Fixed a bug in the custom fields update actions builders which generated duplicated unnecessary update actions for null custom field values. This affected any sync module where the resource contained custom fields (i.e. Product Sync, Category Sync, CartDiscount Sync and Inventory Sync). It also affected any update actions building utility in which the resource/sub-resource contained custom fields. #428 \ud83d\udee0\ufe0f Enhancements (1) Commons - Bumped commercetools-jvm-sdk to version 1.46.0 which includes a fix for a serialization bug in the SetCustomField action which was ignoring empty array values. #430","title":"1.4.1 -  Sept 2, 2019"},{"location":"RELEASE_NOTES/#140-aug-8-2019","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (5) ProductType Sync - Introduced support for syncing product types with NestedType (or set of NestedType) attributes in any order. #372 ProductType Sync - Introduced the new ProductTypeReferenceReplacementUtils#replaceProductTypesReferenceIdsWithKeys which is a util that replaces the reference ids with keys in a list of productTypes. #372 ProductType Sync - Introduced the new ProductTypeReferenceReplacementUtils#buildProductTypeQuery utils to create a product type query with all needed reference expansions to fetch productTypes from a source CTP project for the sync. #372 ProductType Sync - Introduced the new ProductTypeReferenceResolver which resolves productType references on ProductTypeDrafts. #372 ProductType Sync - Introduced the new methods ProductTypeSyncStatistics#getNumberOfProductTypesWithMissingNestedProductTypes and ProductTypeSyncStatistics#getProductTypeKeysWithMissingParents which represents the nested product types which are still not resolved. #372 \ud83d\udee0\ufe0f Enhancements (8) Commons - Bumped commercetools-jvm-sdk to version 1.45.0 . Commons - Bumped gradle to version gradle-5.5.1 Commons - Bumped org.junit.jupiter:junit-jupiter-api to 5.5.1. Commons - Bumped org.junit.jupiter:junit-jupiter-engine to 5.5.1. Commons - Bumped org.junit.jupiter:junit-jupiter-params to 5.5.1. Commons - Bumped mockito-junit-jupiter dependency to 3.0.0. Commons - Bumped assertj to 3.13.2. Commons - Bumped com.github.ben-manes.versions to 0.22.0.","title":"1.4.0 -  Aug 8, 2019"},{"location":"RELEASE_NOTES/#130-jul-3-2019","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (6) CartDiscount Sync - Added support for syncing cart discounts. #379 For more info how to use it please refer to CartDiscount usage doc . CartDiscount Sync - Introduced the new CartDiscountSyncUtils#buildActions which calculates all needed update actions after comparing a CartDiscount and a CartDiscountDraft . #379 CartDiscount Sync - Introduced the new CartDiscountUpdateActionUtils which contains utils for calculating needed update actions after comparing individual fields of a CartDiscount and a CartDiscountDraft . #379 CartDiscount Sync - Introduced the new CartDiscountReferenceResolver which resolves custom type references on CartDiscountDrafts. #379 CartDiscount Sync - Introduced the new CartDiscountReferenceReplacementUtils#replaceCartDiscountsReferenceIdsWithKeys which is a util that replaces the custom type ids with keys in a list of cartDiscounts. #379 CartDiscount Sync - Introduced the new CartDiscountReferenceReplacementUtils#buildCartDiscountQuery util to create a cart discount query with all needed reference expansions to fetch cart discounts from a source CTP project for the sync. #379 . \ud83d\udc1e Bug Fixes (1) Commons - Fixed a bug in the BaseSyncStatistics which caused a wrong calculation of the latestBatchProcessingTimeInMinutes . #378 \ud83d\udee0\ufe0f Enhancements (6) CartDiscount Sync - Added benchmarks for the cartDiscount sync to be able to compare the performance of the sync with the future releases. #379 Commons - Bumped commercetools-jvm-sdk to version 1.44.0 . Commons - Bumped gradle to version gradle-5.5 Commons - Bumped org.junit.jupiter:junit-jupiter-api to 5.5.0. Commons - Bumped org.junit.jupiter:junit-jupiter-engine to 5.5.0. Commons - Bumped org.junit.jupiter:junit-jupiter-params to 5.5.0.","title":"1.3.0 -  Jul 3, 2019"},{"location":"RELEASE_NOTES/#120-jun-14-2019","text":"Commits | Javadoc | Jar \ud83d\udea7 Breaking Changes (2) ProductType Sync - Removed the unneeded AttributeDefinitionCustomBuilder which was an exposed but internal helper. #377 . Commons - SyncUtils#replaceReferenceIdWithKey is now renamed to SyncUtils#getReferenceWithKeyReplaced . #394 \ud83c\udf89 New Features (2) Commons - Added the new CommonTypeUpdateActionUtils#buildUpdateActionForReferences which is used for comapring references/resourceIdentifiers and buiding an update action if needed. #394 Commons - Added the new SyncUtils#getResourceIdentifierWithKeyReplaced util. #394 \ud83d\udc1e Bug Fixes (1) Commons - Fixed a bug where references and resource identifiers were not being compared correctly. #394 \ud83d\udee0\ufe0f Enhancements (13) Commons - Bumped commercetools-jvm-sdk to version 1.43.0 . Commons - Bumped mockito to 2.27.0. Commons - Bumped assertj to 3.12.2. Commons - Bumped org.junit.jupiter:junit-jupiter-api to 5.4.2. Commons - Bumped org.junit.jupiter:junit-jupiter-engine to 5.4.2. Commons - Bumped org.junit.jupiter:junit-jupiter-params to 5.4.2. Commons - Bumped org.ajoberstar.git-publish to 2.1.1. Commons - Bumped org.ajoberstar.grgit to 3.1.1. Commons - Bumped com.github.ben-manes.versions to 0.21.0. Commons - Bumped gradle checkstyle plugin to 8.2. Commons - Bumped mockito dependency to 2.28.2. Commons - Bumped JaCoCo dependency to 0.8.4. Commons - Bumped gradle to version gradle-5.4.1 Commons - Bumped com.adarshr.test-logger to 1.7.0.","title":"1.2.0 -  Jun 14, 2019"},{"location":"RELEASE_NOTES/#111-jan-16-2019","text":"Commits | Javadoc | Jar \ud83d\udc1e Bug Fixes (1) Product Sync - Fixed a bug in the product sync which would fail on syncing attributes of type Set that has an empty set as a value.","title":"1.1.1 -  Jan 16, 2019"},{"location":"RELEASE_NOTES/#110-dec-19-2018","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (4) Product Sync - Added support for syncing assets of newly added variants. #357 . Product Sync - ProductSyncUtils#buildActions and ProductUpdateActionUtils#buildVariantsUpdateActions now build AddAsset actions for every new asset on every new variant on the new ProductDraft . #357 . ProductType Sync - Added support for syncing changes to an AttributeDefinition with a SetType of a subtype LocalizableEnumType or EnumType #313 Type Sync - Added support for syncing changes to a FieldDefinition with a SetType of a subtype LocalizableEnumType or EnumType #313 \ud83d\udc1e Bug Fixes (3) ProductType Sync - Fixed a bug in the productType sync which would try to unset isSearchable , inputHint and attributeConstraint values to null instead of their default values. #354 ProductType Sync - ProductTypeSyncUtils#buildActions , ProductTypeUpdateActionUtils#buildAttributesUpdateActions now treat the values of the optional fields isSearchable , inputHint and attributeConstraint as ( true , SingleLine and None respectivley) if they are null or not passed. #354 Commons - Fixed a bug in the beforeUpdateCallback which caused the callback to be called even on an empty list of update actions. #359 \ud83d\udee0\ufe0f Enhancements (1) Commons - Benchmarks are now run once on every merge to master with a lower number of resources for faster benchmarking. #246 \ud83d\udccb Documentation (2) Commons - Added link to documentation pages in README of the github repo. Commons - Fixed link of beforeUpdateCallback for keeping other variants example in the Sync Options doc page. #360","title":"1.1.0 -  Dec 19, 2018"},{"location":"RELEASE_NOTES/#100-dec-10-2018","text":"Commits | Javadoc | Jar","title":"1.0.0 -  Dec 10, 2018"},{"location":"RELEASE_NOTES/#the-beta-is-over","text":"We're happy to announce that the commercetools-sync-java is finally out of beta! Big thanks to all the users who were using it when it was still in beta. Your feedback was definitely valuable for us to reach the current state of the library. 1.0.0 is here for you to use with all new features, enhancements and bug fixes including: The library now supports importing/syncing types into a CTP project from an external feed or another CTP project. Read more . The library now handles concurrency modification exceptions for the productType sync. All new documentation pages including a quick start guide . Many more improvements and bug fixes.","title":"The Beta is Over \ud83c\udf89"},{"location":"RELEASE_NOTES/#full-release-notes","text":"\ud83c\udf89 New Features (4) Type Sync - Added support for syncing types. #300 For more info how to use it please refer to Type usage doc . Type Sync - Exposed TypeSyncUtils#buildActions which calculates all needed update actions after comparing a Type and a TypeDraft . #300 Type Sync - Exposed TypeUpdateActionUtils which contains utils for calculating needed update actions after comparing individual fields of a Type and a TypeDraft . #300 Commons - Added OptionalUtils#filterEmptyOptionals which are utility methods that filter out the empty optionals in a supplied list (with a varargs variation) returning a list of the contents of the non-empty optionals. #255 \ud83d\udee0\ufe0f Enhancements (17) ProductType Sync - Added concurrency modification exception handling. #325 Commons - ProductSyncUtils#buildActions , CategorySyncUtils#buildActions , InventorySyncUtils#buildActions and ProductTypeSyncUtils#buildActions now don't apply the beforeUpdateCallback implicitly. If you want, you can apply it explicitly on the result of the ..#buildActions method. #302 Product Sync - Reference keys are not validated if they are in UUID format anymore. #166 Category Sync - Reference keys are not validated if they are in UUID format anymore. #166 Inventory Sync - Reference keys are not validated if they are in UUID format anymore. #166 ProductType Sync - Added benchmarks for the productType sync to be able to compare the performance of the sync with the future releases. #301 Commons - Bumped commercetools-jvm-sdk to version 1.37.0 . Commons - Bumped mockito to 2.23.4. Commons - Bumped com.adarshr.test-logger to 1.6.0. Commons - Bumped org.junit.jupiter:junit-jupiter-api to 5.3.2. Commons - Bumped org.junit.jupiter:junit-jupiter-engine to 5.3.2. Commons - Bumped org.junit.jupiter:junit-jupiter-params to 5.3.2. Commons - Bumped org.ajoberstar.git-publish to 2.0.0. Commons - Bumped org.ajoberstar.grgit to 3.0.0. Commons - Bumped gradle to version gradle-5.0 Type Sync - Added benchmarks for the type sync to be able to compare the performance of the sync with the future releases. #300 \ud83d\udea7 Breaking Changes (9) Product Sync - allowUuid option is now removed. #166 Category Sync - allowUuid option is now removed. #166 Inventory Sync - allowUuid option is now removed. #166 ProductType Sync - allowUuid option is now removed. #166 ProductType Sync - Renamed ProductTypeUpdateAttributeDefinitionActionUtils to AttributeDefinitionsUpdateActionUtils . It is also now meant to be only used internally by the library. Its behaviour is not guaranteed if used externally. #302 ProductType Sync - AttributeDefinitionUpdateActionUtils is now meant to be only used internally by the library. Its behaviour is not guaranteed if used externally. #302 ProductType Sync - EnumsUpdateActionUtils is now EnumValuesUpdateActionUtils and is meant to be only used internally by the library. Its behaviour is not guaranteed if used externally. #300 ProductType Sync - Utils that were in ProductTypeUpdateLocalizedEnumActionUtils and LocalizedEnumsUpdateActionUtils. are moved to LocalizedEnumValueUpdateActionUtils . #300 ProductType Sync - Utils that were in ProductTypeUpdatePlainEnumActionUtils and PlainEnumUpdateActionsUtils. are moved to PlainEnumValueUpdateActionUtils . #300 \ud83d\udc1e Bug Fixes (3) Product Sync - Fixed a bug that caused the statistics not to be updated correctly on fetch failure. #331 Category Sync - Fixed a bug that caused the statistics not to be updated correctly on fetch failure. #331 ProductType Sync - Fixed a bug that caused the sync process to continue after failed fetch. #331 \ud83d\udccb Documentation (4) Commons - Added the documentation github pages. https://commercetools.github.io/commercetools-sync-java Commons - Added a Quick Start Guide for a convenient entry into the library. Commons - Moved documentation of sync options to a separate doc . Commons - Added a the earliest compatible version of the commercetools-jvm-sdk]( https://github.com/commercetools/commercetools-jvm-sdk ) as a prerequisite for using the library.","title":"Full Release Notes"},{"location":"RELEASE_NOTES/#v100-m14-oct-5-2018","text":"Commits | Javadoc | Jar \ud83d\udc1e Bug Fixes (1) Product Sync - Fixed a bug where the removed attributes in the source product variant draft were not being removed from the target variant. #238 \ud83d\udee0 Enhancements (8) Product Sync - Products create and update requests are now issued in parallel. This should lead to a performance improvement. #238 Commons - Bumped com.adarshr.test-logger to 1.5.0. Commons - Bumped mockito to 2.22.0. Commons - Bumped org.junit.jupiter:junit-jupiter-api to 5.3.1. Commons - Bumped org.junit.jupiter:junit-jupiter-engine to 5.3.1. Commons - Bumped org.junit.jupiter:junit-jupiter-params to 5.3.1. Commons - UnorderedCollectionSyncUtils#buildRemoveUpdateActions ensures no null elements in the resulting list and ignores null` keys now. #238 Commons - Bumped gradle to version gradle-4.10.2 . \ud83d\udea7 Breaking Changes (2) Product Sync - AttributeMetaData#isRequired is now removed. #308 Product Sync - ProductVariantAttributeUpdateActionUtils#buildProductVariantAttributeUpdateAction now takes a map of all meta data instead of the specific metadata entry. #308","title":"v1.0.0-M14 -  Oct 5, 2018"},{"location":"RELEASE_NOTES/#v100-m13-sept-5-2018","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (15) ProductType Sync - Support for syncing productTypes. #286 For more info how to use it please refer to ProductType usage doc . Product Sync - Support for syncing product prices. #101 Product Sync - ProductSyncUtils#buildActions now also calculates variants' all price update actions needed. #101 Product Sync - ProductUpdateActionUtils#buildVariantsUpdateActions now also calculates variants' all price update actions needed. #101 Product Sync - Introduced new update action build utility for building all needed update actions between two variants' prices ProductVariantUpdateActionUtils#buildProductVariantPricesUpdateActions . #101 ProductSync - PriceReferenceResolver now resolves prices' CustomerGroup references on prices. #101 InventoryEntry Sync - InventoryReferenceReplacementUtils#replaceInventoriesReferenceIdsWithKeys now supports replacing channel reference ids with keys. #101 ProductType Sync - Exposed ProductTypeSyncUtils#buildActions which calculates all needed update actions after comparing a ProductType and a ProductTypeDraft . #286 ProductType Sync - Exposed ProductTypeUpdateActionUtils which contains utils for calculating needed update actions after comparing individual fields of a ProductType and a ProductTypeDraft . #286 ProductType Sync - Exposed ProductTypeUpdateAttributeDefinitionActionUtils which contains utils for calculating needed update actions after comparing a list of AttributeDefinition s and a list of AttributeDefinitionDraft s. #286 ProductType Sync - Exposed ProductTypeUpdateLocalizedEnumActionUtils which contains utils for calculating needed update actions after comparing two lists of LocalizedEnumValue s. #286 ProductType Sync - Exposed ProductTypeUpdatePlainEnumActionUtils which contains utils for calculating needed update actions after comparing two lists of EnumValue s. #286 ProductType Sync - Exposed AttributeDefinitionUpdateActionUtils which contains utils for calculating needed update actions after comparing an AttributeDefinition and an AttributeDefinitionDraft . #286 ProductType Sync - Exposed LocalizedEnumUpdateActionsUtils which contains utils for calculating needed update actions after comparing two LocalizedEnumValue s. #286 ProductType Sync - Exposed PlainEnumUpdateActionsUtils which contains utils for calculating needed update actions after comparing two EnumValue s. #286 \ud83d\udee0\ufe0f Enhancements (7) Commons - Bumped gradle to version gradle-4.10 . Commons - Bumped com.jfrog.bintray to 1.8.4. Commons - Bumped assertj to 3.11.1. Commons - Bumped mockito to 2.21.0. Commons - Bumped org.ajoberstar.grgit to 2.3.0. Commons - Bumped com.adarshr.test-logger to 1.4.0. Commons - Switched to Junit5 using both junit-jupiter-engine and junit-vintage-engine for backward compatibility. \ud83d\udee0\ufe0f Breaking Changes (3) Product Sync - Removed redundant ProductUpdateActionUtils#buildRemoveVariantUpdateActions . #3 Commons - Moved SyncUtils#replaceCustomTypeIdWithKeys to CustomTypeReferenceReplacementUtils#replaceCustomTypeIdWithKeys . #101 . Commons - Moved SyncUtils#replaceAssetsReferencesIdsWithKeys to AssetReferenceReplacementUtils#replaceAssetsReferencesIdsWithKeys . #101 .","title":"v1.0.0-M13 -  Sept 5, 2018"},{"location":"RELEASE_NOTES/#v100-m12-jun-05-2018","text":"Commits | Javadoc | Jar \ud83d\udee0\ufe0f Enhancements (13) Product Sync - Support for syncing price custom fields. #277 Product Sync - VariantReferenceResolver now resolves prices' custom type references on all variants. #277 Product Sync - ProductReferenceReplacementUtils#buildProductQuery now expands custom types on prices. #277 Product Sync - VariantReferenceReplacementUtils#replacePricesReferencesIdsWithKeys now supports replacing price custom reference ids with keys. #277 Commons - Bumped commercetools-jvm-sdk to version 1.32.0 . Commons - Bumped gradle to version gradle-4.8 . Commons - Bumped com.jfrog.bintray to 1.8.0. Commons - Bumped org.ajoberstar.git-publish to 1.0.0. Commons - Bumped com.adarshr.test-logger to 1.2.0. Commons - Bumped org.ajoberstar.grgit to 2.2.1. Commons - Bumped gradle checkstyle plugin to 8.10.1. Commons - Bumped mockito dependency to 2.18.3. Commons - Bumped JaCoCo dependency to 0.8.1.","title":"v1.0.0-M12 -  Jun 05, 2018"},{"location":"RELEASE_NOTES/#v100-m11-mar-08-2018","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (19) Category Sync - Support of categories' asset syncing. #3 Product Sync - Support of product variants' asset syncing. #3 Category Sync - CategorySyncUtils#buildActions now also calculates all asset update actions needed. #3 Product Sync - ProductSyncUtils#buildActions now also calculates variants' all asset update actions needed. #3 Product Sync - ProductUpdateActionUtils#buildVariantsUpdateActions now also calculates variants' all asset update actions needed. #3 Product Sync - Introduced the new ActionGroup: ASSETS which can be used in blacklisting/whitelisting assets syncing during the product sync. #3 Category Sync - Introduced new update action build utility for building all needed update actions between two categories' assets ProductVariantUpdateActionUtils#buildProductVariantAssetsUpdateActions . #3 Product Sync - Introduced new update action build utility for building all needed update actions between two variants' assets ProductVariantUpdateActionUtils#buildProductVariantAssetsUpdateActions . #3 Category Sync - Introduced new update action granular build utils for category asset fields in CategoryAssetUpdateActionUtils . #3 Product Sync - Introduced new update action granular build utils for product variant assets fields in ProductVariantAssetUpdateActionUtils . #3 Commons - Introduced AssetReferenceResolver which is a helper that can resolve all the references of an AssetDraft. #3 Commons - VariantReferenceResolver and CategoryReferenceResolver now also resolve all the containing AssetDrafts references. #3 Commons - Support for custom update actions calculation for secondary resources (e.g. prices, product assets and category assets). #3 Product Sync - ProductReferenceReplacementUtils#replaceProductsReferenceIdsWithKeys and VariantReferenceReplacementUtils#replaceVariantsReferenceIdsWithKeys now support replacing asset custom reference ids with keys. #3 Category Sync - CategoryReferenceReplacementUtils#replaceCategoriesReferenceIdsWithKeys now supports replacing asset custom reference ids with keys. #3 Commons - Introduced new SyncUtils#replaceAssetsReferenceIdsWithKeys which is a util that replaces the custom type ids with keys in a list of assets. #3 Product Sync - ProductReferenceReplacementUtils#buildProductQuery now expands custom types on assets. #3 Category Sync - CategoryReferenceReplacementUtils#buildCategoryQuery now expands custom types on assets. #3 Commons - Introduced new ResourceIdentifierUtils#toResourceIdentifierIfNotNull . #262 Changes (5) Commons - CustomUpdateActionUtils#buildCustomUpdateActions is now CustomUpdateActionUtils#buildPrimaryResourceCustomUpdateActions . It now takes a new third parameter customActionBuilder which represents the concrete builder of custom update actions. For a list of concrete builder options check the implementors of the GenericCustomActionBuilder interface. #3 Commons - CustomUpdateActionUtils#buildCustomUpdateActions can now be used to build custom update actions for secondary resources (e.g. assets and prices). #3 Commons - New Custom Type Id is now validated against being empty/null. #3 Product Sync - ProductSyncUtils#buildCoreActions is now removed. ProductSyncUtils#buildActions should be used instead. #3 Category Sync - CategorySyncUtils#buildCoreActions is now removed. CategorySyncUtils#buildActions should be used instead. #3 \ud83d\udee0\ufe0f Enhancements (1) Build Tools - Bumped commercetools-jvm-sdk to version 1.30.0 . #262 \ud83d\udc1e Bug Fixes (1) Build Tools - Fixed bug where jar and Codecov were triggered on benchmark stages of the build when they should only be triggered on the full build. #249","title":"v1.0.0-M11 -  Mar 08, 2018"},{"location":"RELEASE_NOTES/#v100-m10-feb-13-2018","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (1) Commons - Added benchmarking setup for the library on every release. #155 Changes (3) Commons - Statistics counters are now of type AtomicInteger instead of int to support concurrency. #242 Category Sync - categoryKeysWithMissingParents in the CategorySyncStatistics is now of type ConcurrentHashMap<String, Set<String> instead of Map<String, List<String> . #242 Category Sync - CategorySyncStatistics now exposes the methods removeChildCategoryKeyFromMissingParentsMap , getMissingParentKey and putMissingParentCategoryChildKey to support manipulating categoryKeysWithMissingParents map. #242","title":"v1.0.0-M10 -  Feb 13, 2018"},{"location":"RELEASE_NOTES/#v100-m9-jan-22-2018","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (1) Commons - Added getSyncOptions to the ProductSync , CategorySync and InventorySync . #230 Changes (1) Product Sync - Added validation for product drafts' SKUs as a required field on the input product drafts since SKUs will be used for product matching in the future. #230 \ud83d\udee0\ufe0f Enhancements (1) Product Sync - Changed the product sync to cache product ids per batch as opposed to caching the entire products ids before syncing products. #230 \ud83d\udc1e Bug Fixes (1) Commons - Fixed library version in User-Agent headers of JVM SDK clients using the library. Now it is not fetched from the JAR manifest but injected by gradle-scripts/set-release-version.gradle. #227","title":"v1.0.0-M9 -  Jan 22, 2018"},{"location":"RELEASE_NOTES/#v100-m8-dec-29-2017","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (1) Category Sync - Exposed new method CategorySyncStatistics#getNumberOfCategoriesWithMissingParents which gets the total number of categories with missing parents from the statistics instance. #186 Changes (2) Product Sync - Changed product sync statistics report message wording. #186 Product Sync - Exposed new methods ProductReferenceResolver#resolveStateReference , ProductReferenceResolver#resolveTaxCategoryReference , ProductReferenceResolver#resolveCategoryReferences and ProductReferenceResolver#resolveProductTypeReference . #218 \ud83d\udee0 Enhancements (1) Build Tools - Bumped Gradle to version 4.4. #205","title":"v1.0.0-M8 -  Dec 29, 2017"},{"location":"RELEASE_NOTES/#v100-m7-dec-15-2017","text":"Commits | Javadoc | Jar \ud83d\udc1e Bug Fixes (1) Commons - Changed offset-based pagination of querying all elements to a limit-based with sorted ids approach to mitigate problems of previous approach. #210","title":"v1.0.0-M7 -  Dec 15, 2017"},{"location":"RELEASE_NOTES/#v100-m6-dec-5-2017","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (3) Category Sync - Introduced beforeCreateCallback option which is callback applied on a category draft before a request to create it on CTP is issued. #183 Product Sync - Introduced beforeCreateCallback option which is callback applied on a product draft before a request to create it on CTP is issued. #183 Inventory Sync - Introduced beforeCreateCallback option which is callback applied on a inventoryEntry draft before a request to create it on CTP is issued. #183 \u2728 Major Enhancements (2) Category Sync - Introduced batching on update action requests to allow for requesting updates of more than 500 actions. #21 Product Sync - Introduced batching on update action requests to allow for requesting updates of more than 500 actions. #21 \ud83d\udc1e Bug Fixes (1) Commons - Fixed library version in User-Agent headers of JVM SDK clients using the library. #191 \ud83d\udccb Documentation (1) Commons - Added Code of Conduct doc. \ud83d\udea7 Migration guide (6) Product Sync - Removed removeOtherVariants option which is already done by the sync by default. Removal of variants can be prevented through the beforeUpdateCallback. Please check here an example of how this can be done. #26 Commons - Removed removeOtherSetEntries , removeOtherCollectionEntries and removeOtherProperties options which are already done by the sync by default. The aforementioned options (and even more use cases) can now be covered with help of the beforeCreateCallback and beforeUpdateCallback. Please check here an example of how removal of variants can be disabled. #26 Commons - Removed website and emergency contact e-mail appened in User-Agent headers of JVM SDK clients using the library. #191 Category Sync - beforeUpdateCallback now treats a null return as an empty list of update actions. #183 Product Sync - beforeUpdateCallback now treats a null return as an empty list of update actions. #183 Inventory Sync - beforeUpdateCallback now treats a null return as an empty list of update actions. #183","title":"v1.0.0-M6 -  Dec 5, 2017"},{"location":"RELEASE_NOTES/#v100-m5-nov-16-2017","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (3) Inventory Sync - Introduced beforeUpdateCallback which is applied after generation of update actions and before actual InventoryEntry update. #169 Build Tools - Added Add Release Notes entry checkbox in PR template on Github repo. #161 Commons - Appended library name and version to User-Agent headers of JVM SDK clients using the library. #142 \ud83d\udee0\ufe0f Enhancements (3) Commons - setUpdateActionsCallback has been renamed to beforeUpdateCallback and now takes a TriFunction instead of Function, which adds more information about the generated list of update actions, namely, the old resource being updated and the new resource draft. #169 Build Tools - Explicitly specified gradle tasks execution order in execution-order.gradle. #161 Build Tools - Set PMD to run before Integration tests. #161 Commons - Appended library name and version to User-Agent headers of JVM SDK clients using the library. #142 \ud83d\udccb Documentation (1) Build Tools - Added Snyk vulnerabilities badge to repo README. #188 \ud83d\udea7 Migration guide (8) Commons - Renamed setUpdateActionsCallback to beforeUpdateCallback . #169 Commons - Renamed setAllowUuid to allowUuid . #169 Commons - Renamed setWarningCallBack to warningCallback . #169 Commons - Renamed setErrorCallBack to errorCallback . #169 Commons - Renamed setBatchSize to batchSize . #169 Commons - Removed setRemoveOtherLocales option. #169 Commons - Renamed setRemoveOtherSetEntries , setRemoveOtherCollectionEntries and setRemoveOtherProperties to removeOtherSetEntries , removeOtherCollectionEntries and removeOtherProperties . #169 Product Sync - Renamed setSyncFilter to syncFilter . #169","title":"v1.0.0-M5 -  Nov 16, 2017"},{"location":"RELEASE_NOTES/#v100-m4-nov-7-2017","text":"Commits | Javadoc | Jar \ud83d\udd25 Hotfix (1) Product Sync - Fixed an issue with replaceAttributesReferencesIdsWithKeys which nullifies localized text attributes due to JSON parsing not throwing exception on parsing it to reference set. #179","title":"v1.0.0-M4 -  Nov 7, 2017"},{"location":"RELEASE_NOTES/#v100-m3-nov-3-2017","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (7) ProductSync - Introduced Product TaxCategory reference resolution and syncing. #120 . ProductSync - Introduced Product State reference resolution and syncing. #120 . ProductSync - Exposed ProductReferenceReplacementUtils#buildProductQuery util to create a product query with all needed reference expansions to fetch products from a source CTP project for the sync. #120 . ProductSync - Exposed VariantReferenceReplacementUtils#replaceVariantsReferenceIdsWithKeys which provides utils to replace reference ids with keys on variants (price and attriute references) coming from a source CTP project to make it ready for reference resolution. #160 . ProductSync - Exposed VariantReferenceResolver which is a helper that resolves the price and attribute references on a ProductVariantDraft. (Note: This is used now by the already existing ProductReferenceResolver) #160 . CategorySync - Exposed CategoryReferenceReplacementUtils#buildCategoryQuery util to create a category query with all needed reference expansions to fetch categories from a source CTP project for the sync. #120 . Commons - Exposed replaceCustomTypeIdWithKeys and replaceReferenceIdWithKey . #120 . \ud83d\udc1e Bug Fixes (1) Category Sync - Fixes an issue where retrying on concurrent modification exception wasn't re-fetching the latest Category and rebuilding build update actions. #94 \ud83d\udccb Documentation (6) Product Sync - Documented the reason behind having the latest batch processing time. #119 Category Sync - Documented the reason behind having the latest batch processing time. #119 Category Sync - Fixed the statistics summary string used in the documentation. #119 Inventory Sync - Documented the reason behind having the latest batch processing time. #119 Product Sync - Fixed some typos. #172 Commons - Provided inline example of how to use logging in callbacks. #172 \ud83d\udea7 Migration guide (9) Product Sync - Moved replaceProductsReferenceIdsWithKeys from SyncUtils to ProductReferenceReplacementUtils . #120 Product Sync - Removed replaceProductDraftsCategoryReferenceIdsWithKeys which is not needed anymore. #120 Product Sync - Removed replaceProductDraftCategoryReferenceIdsWithKeys which is not needed anymore. #120 Product Sync - Removed replaceCategoryOrderHintCategoryIdsWithKeys which is not needed anymore. #120 Product Sync - Moved getDraftBuilderFromStagedProduct from SyncUtils to ProductReferenceReplacementUtils . #120 Category Sync - Moved replaceCategoriesReferenceIdsWithKeys from SyncUtils to CategoryReferenceReplacementUtils . #120 Inventory Sync - Moved replaceInventoriesReferenceIdsWithKeys from SyncUtils to InventoryReferenceReplacementUtils . #120 Commons - Removed slf4j-simple dependency. #172 Commons - Used implementation instead of compile configuration for dependencies. #172","title":"v1.0.0-M3 -  Nov 3, 2017"},{"location":"RELEASE_NOTES/#v100-m2-oct-12-2017","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (3) Product Sync - Supported syncing entire product variant images, putting order into consideration. #114 Product Sync - Exposed ProductVariantUpdateActionUtils#buildProductVariantImagesUpdateActions and ProductVariantUpdateActionUtils#buildMoveImageToPositionUpdateActions action build util. #114 Product Sync - Supported Blacklisting/Whitelisting update action groups on sync. #122 \ud83d\udc1e Bug Fixes (4) Build Tools - Fixed issue were JavaDoc jar was not built. #117 Build Tools - Fixed issue were JavaDoc was not published on github. #118 Product Sync - Fixed a potential bug where an exisitng master variant key could be blank. #122 Product Sync - Fixed a potential bug where a product draft could be provided with no master variant set. #122 \ud83d\udee0 Enhancements (2)\ufe0f Build Tools - Integration tests project credentials can now be set on a properties file not only as environment variables and give error messages if not set. #105 Product Sync - Validated the SKU before making a ChangeMasterVariant request by SKU. #122 \ud83d\udccb Documentation (5) Build Tools - Added bintray badge to repo. #126 Product Sync - Added usage documentation. #121 Commons - Separated contributing README into own README not in the main one. #121 Commons - Added release notes doc. #125 Build Tools - Added JavaDoc badge to repo. #145","title":"v1.0.0-M2 -  Oct 12, 2017"},{"location":"RELEASE_NOTES/#v100-m2-beta-sep-28-2017","text":"Commits | Jar Beta Features (11) Product Sync - Introduced syncing products name, categories, categoryOrderHints, description, slug, metaTitle, metaDescription, metaKeywords, masterVariant and searchKeywords. #57 Product Sync - Exposed update action build utils for products name, categories, categoryOrderHints, description, slug, metaTitle, metaDescription, metaKeywords, masterVariant and searchKeywords. #57 Product Sync - Introduced reference resolution support for product categories, productType and prices. #95 #96 Product Sync - Introduced syncing products publish state. #97 Product Sync - Exposed update action build utils for products publish state. #97 Product Sync - Introduced syncing products variant attributes. #98 Product Sync - Exposed update action build utils for products variant attributes. #98 Product Sync - Introduced syncing products variant prices without update action calculation. #99 Product Sync - Introduced syncing products variant images. #100 Product Sync - Exposed update action build utils for products variant images. #100 Product Sync - Introduced syncing products against staged projection. #93","title":"v1.0.0-M2-beta -  Sep 28, 2017"},{"location":"RELEASE_NOTES/#v100-m1-sep-06-2017","text":"Commits | Javadoc | Jar \ud83c\udf89 New Features (16) Category Sync - Introduced syncing category name, description, orderHint, metaDescription, metaTitle, customFields and parent category. #2 Category Sync - Exposed update action build utils for category name, description, orderHint, metaDescription, metaTitle, customFields and parent category. #2 Category Sync - Introduced sync options builders. #5 Category Sync - Introduced support of syncing categories in any order. #28 Category Sync - Added concurrency modification exception repeater. #30 Category Sync - Used category keys for matching. #45 Category Sync - Introduced reference resolution support. #47 Category Sync - Introduced Batch processing support. #73 Category Sync - Added info about missing parent categories in statistics. #73 Commons - Introduced sync statistics support. #6 Commons - Sync ITs should now use client that repeats on 5xx errors. #31 Commons - Sync only accepts drafts. #46 Build Tools - Travis setup as CI tool. #1 Build Tools - Setup Bintray release and publising process. #24 Build Tools - Setup CheckStyle, PMD, FindBugs, Jacoco and CodeCov. #25 Build Tools - Setup repo PR and issue templates. #29 Beta Features (5) Inventory Sync - Introduced syncing inventory supplyChannel, quantityOnStock, restockableInDays, expectedDelivery and customFields. #17 Inventory Sync - Exposed update action build utils for inventory supplyChannel, quantityOnStock, restockableInDays, expectedDelivery and customFields. #17 Inventory Sync - Introduced sync options builder support. #15 Inventory Sync - Introduced reference resolution support. #47 Inventory Sync - Introduced batch processing support. #73","title":"v1.0.0-M1 -  Sep 06, 2017"},{"location":"usage/CART_DISCOUNT_SYNC/","text":"CartDiscount Sync \u00b6 Module used for importing/syncing CartDiscounts into a commercetools project. It also provides utilities for generating update actions based on the comparison of a CartDiscount against a CartDiscountDraft . Usage Sync list of cart discount drafts Prerequisites About SyncOptions Running the sync More examples of how to use the sync Build all update actions Build particular update action(s) Caveats Usage \u00b6 Sync list of cart discount drafts \u00b6 Prerequisites \u00b6 The sync expects a list of CartDiscountDraft s that have their key fields set to be matched with cart discounts in the target CTP project. Also, the cart discounts in the target project are expected to have the key fields set, otherwise they won't be matched. Every cartDiscount may have a reference to the Type of its custom fields. Types are matched by their key s. Therefore, in order for the sync to resolve the actual ids of the type reference, the key of the Type has to be supplied. When syncing from a source commercetools project, you can use mapToCartDiscountDrafts method that maps from a CartDiscount to CartDiscountDraft in order to make them ready for reference resolution by the sync: final List < CartDiscountDraft > cartDiscountDrafts = CartDiscountReferenceResolutionUtils . mapToCartDiscountDrafts ( cartDiscounts ); Create a sphereClient as described here . After the sphereClient is set up, a CartDiscountSyncOptions should be built as follows: // instantiating a CartDiscountSyncOptions final CartDiscountSyncOptions cartDiscountSyncOptions = CartDiscountSyncOptionsBuilder . of ( sphereClient ). build (); About SyncOptions \u00b6 SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations: 1. errorCallback \u00b6 A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception cart discount draft from the source cart discount of the target project (only provided if an existing cart discount could be found) the update-actions, which failed (only provided if an existing cart discount could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( CartDiscountSync . class ); final CartDiscountSyncOptions cartDiscountSyncOptions = CartDiscountSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , cartDiscount , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build (); 2. warningCallback \u00b6 A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception cart discount draft from the source cart discount of the target project (only provided if an existing cart discount could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( CartDiscountSync . class ); final CartDiscountSyncOptions cartDiscountSyncOptions = CartDiscountSyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , cartDiscount , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build (); 3. beforeUpdateCallback \u00b6 During the sync process if a target cart discount and a cart discount draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : cart discount draft from the source cart discount from the target project update actions that were calculated after comparing both Example \u00b6 final TriFunction < List < UpdateAction < CartDiscount >> , CartDiscountDraft , CartDiscount , List < UpdateAction < CartDiscount >>> beforeUpdateCartDiscountCallback = ( updateActions , newCartDiscountDraft , oldCartDiscount ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof ChangeCartPredicate )) . collect ( Collectors . toList ()); final CartDiscountSyncOptions cartDiscountSyncOptions = CartDiscountSyncOptionsBuilder . of ( sphereClient ). beforeUpdateCallback ( beforeUpdateCartDiscountCallback ). build (); 4. beforeCreateCallback \u00b6 During the sync process if a cart discount draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : cart discount draft that should be created Please refer to example in product sync document . 5. batchSize \u00b6 A number that could be used to set the batch size with which cart discounts are fetched and processed, as cart discounts are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding cart discounts from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for cart discount sync. Example \u00b6 final CartDiscountSyncOptions cartDiscountSyncOptions = CartDiscountSyncOptionsBuilder . of ( sphereClient ). batchSize ( 30 ). build (); Running the sync \u00b6 After all the aforementioned points in the previous section have been fulfilled, to run the sync: // instantiating a cart discount sync final CartDiscountSync cartDiscountSync = new CartDiscountSync ( cartDiscountSyncOptions ); // execute the sync on your list of cart discounts CompletionStage < CartDiscountSyncStatistics > syncStatisticsStage = cartDiscountSync . sync ( cartDiscountDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a CartDiscountSyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed cart discounts and the processing time of the last sync batch in different time units and in a human-readable format. final CartDiscountSyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*\"Summary: 100 cart discounts were processed in total (11 created, 87 updated, 2 failed to sync).\"*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied. More examples of how to use the sync \u00b6 Sync from another CTP project as a source . Sync from an external source . Make sure to read the Important Usage Tips for optimal performance. Build all update actions \u00b6 A utility method provided by the library to compare a CartDiscount with a new CartDiscountDraft and results in a list of cart discount update actions. List < UpdateAction < CartDiscount >> updateActions = CartDiscountSyncUtils . buildActions ( cartDiscount , cartDiscountDraft , cartDiscountSyncOptions ); Build particular update action(s) \u00b6 Utility methods provided by the library to compare the specific fields of a CartDiscount and a new CartDiscountDraft , and in turn builds the update action. One example is the buildChangeNameUpdateAction which compares names: Optional < UpdateAction < CartDiscount >> updateAction = CartDiscountUpdateActionUtils . buildChangeNameAction ( oldCartDiscount , cartDiscountDraft ); More examples of those utils for different cart discounts can be found here . Caveats \u00b6 Syncing cart discounts with a CartDiscountValue of type giftLineItem is not supported yet. #411 .","title":"CartDiscount Sync"},{"location":"usage/CART_DISCOUNT_SYNC/#cartdiscount-sync","text":"Module used for importing/syncing CartDiscounts into a commercetools project. It also provides utilities for generating update actions based on the comparison of a CartDiscount against a CartDiscountDraft . Usage Sync list of cart discount drafts Prerequisites About SyncOptions Running the sync More examples of how to use the sync Build all update actions Build particular update action(s) Caveats","title":"CartDiscount Sync"},{"location":"usage/CART_DISCOUNT_SYNC/#usage","text":"","title":"Usage"},{"location":"usage/CART_DISCOUNT_SYNC/#sync-list-of-cart-discount-drafts","text":"","title":"Sync list of cart discount drafts"},{"location":"usage/CART_DISCOUNT_SYNC/#prerequisites","text":"The sync expects a list of CartDiscountDraft s that have their key fields set to be matched with cart discounts in the target CTP project. Also, the cart discounts in the target project are expected to have the key fields set, otherwise they won't be matched. Every cartDiscount may have a reference to the Type of its custom fields. Types are matched by their key s. Therefore, in order for the sync to resolve the actual ids of the type reference, the key of the Type has to be supplied. When syncing from a source commercetools project, you can use mapToCartDiscountDrafts method that maps from a CartDiscount to CartDiscountDraft in order to make them ready for reference resolution by the sync: final List < CartDiscountDraft > cartDiscountDrafts = CartDiscountReferenceResolutionUtils . mapToCartDiscountDrafts ( cartDiscounts ); Create a sphereClient as described here . After the sphereClient is set up, a CartDiscountSyncOptions should be built as follows: // instantiating a CartDiscountSyncOptions final CartDiscountSyncOptions cartDiscountSyncOptions = CartDiscountSyncOptionsBuilder . of ( sphereClient ). build ();","title":"Prerequisites"},{"location":"usage/CART_DISCOUNT_SYNC/#about-syncoptions","text":"SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:","title":"About SyncOptions"},{"location":"usage/CART_DISCOUNT_SYNC/#1-errorcallback","text":"A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception cart discount draft from the source cart discount of the target project (only provided if an existing cart discount could be found) the update-actions, which failed (only provided if an existing cart discount could be found)","title":"1. errorCallback"},{"location":"usage/CART_DISCOUNT_SYNC/#example","text":"final Logger logger = LoggerFactory . getLogger ( CartDiscountSync . class ); final CartDiscountSyncOptions cartDiscountSyncOptions = CartDiscountSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , cartDiscount , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/CART_DISCOUNT_SYNC/#2-warningcallback","text":"A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception cart discount draft from the source cart discount of the target project (only provided if an existing cart discount could be found)","title":"2. warningCallback"},{"location":"usage/CART_DISCOUNT_SYNC/#example_1","text":"final Logger logger = LoggerFactory . getLogger ( CartDiscountSync . class ); final CartDiscountSyncOptions cartDiscountSyncOptions = CartDiscountSyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , cartDiscount , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/CART_DISCOUNT_SYNC/#3-beforeupdatecallback","text":"During the sync process if a target cart discount and a cart discount draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : cart discount draft from the source cart discount from the target project update actions that were calculated after comparing both","title":"3. beforeUpdateCallback"},{"location":"usage/CART_DISCOUNT_SYNC/#example_2","text":"final TriFunction < List < UpdateAction < CartDiscount >> , CartDiscountDraft , CartDiscount , List < UpdateAction < CartDiscount >>> beforeUpdateCartDiscountCallback = ( updateActions , newCartDiscountDraft , oldCartDiscount ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof ChangeCartPredicate )) . collect ( Collectors . toList ()); final CartDiscountSyncOptions cartDiscountSyncOptions = CartDiscountSyncOptionsBuilder . of ( sphereClient ). beforeUpdateCallback ( beforeUpdateCartDiscountCallback ). build ();","title":"Example"},{"location":"usage/CART_DISCOUNT_SYNC/#4-beforecreatecallback","text":"During the sync process if a cart discount draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : cart discount draft that should be created Please refer to example in product sync document .","title":"4. beforeCreateCallback"},{"location":"usage/CART_DISCOUNT_SYNC/#5-batchsize","text":"A number that could be used to set the batch size with which cart discounts are fetched and processed, as cart discounts are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding cart discounts from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for cart discount sync.","title":"5. batchSize"},{"location":"usage/CART_DISCOUNT_SYNC/#example_3","text":"final CartDiscountSyncOptions cartDiscountSyncOptions = CartDiscountSyncOptionsBuilder . of ( sphereClient ). batchSize ( 30 ). build ();","title":"Example"},{"location":"usage/CART_DISCOUNT_SYNC/#running-the-sync","text":"After all the aforementioned points in the previous section have been fulfilled, to run the sync: // instantiating a cart discount sync final CartDiscountSync cartDiscountSync = new CartDiscountSync ( cartDiscountSyncOptions ); // execute the sync on your list of cart discounts CompletionStage < CartDiscountSyncStatistics > syncStatisticsStage = cartDiscountSync . sync ( cartDiscountDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a CartDiscountSyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed cart discounts and the processing time of the last sync batch in different time units and in a human-readable format. final CartDiscountSyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*\"Summary: 100 cart discounts were processed in total (11 created, 87 updated, 2 failed to sync).\"*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied.","title":"Running the sync"},{"location":"usage/CART_DISCOUNT_SYNC/#more-examples-of-how-to-use-the-sync","text":"Sync from another CTP project as a source . Sync from an external source . Make sure to read the Important Usage Tips for optimal performance.","title":"More examples of how to use the sync"},{"location":"usage/CART_DISCOUNT_SYNC/#build-all-update-actions","text":"A utility method provided by the library to compare a CartDiscount with a new CartDiscountDraft and results in a list of cart discount update actions. List < UpdateAction < CartDiscount >> updateActions = CartDiscountSyncUtils . buildActions ( cartDiscount , cartDiscountDraft , cartDiscountSyncOptions );","title":"Build all update actions"},{"location":"usage/CART_DISCOUNT_SYNC/#build-particular-update-actions","text":"Utility methods provided by the library to compare the specific fields of a CartDiscount and a new CartDiscountDraft , and in turn builds the update action. One example is the buildChangeNameUpdateAction which compares names: Optional < UpdateAction < CartDiscount >> updateAction = CartDiscountUpdateActionUtils . buildChangeNameAction ( oldCartDiscount , cartDiscountDraft ); More examples of those utils for different cart discounts can be found here .","title":"Build particular update action(s)"},{"location":"usage/CART_DISCOUNT_SYNC/#caveats","text":"Syncing cart discounts with a CartDiscountValue of type giftLineItem is not supported yet. #411 .","title":"Caveats"},{"location":"usage/CATEGORY_SYNC/","text":"Category Sync \u00b6 Module used for importing/syncing Categories into a commercetools project. It also provides utilities for generating update actions based on the comparison of a Category against a CategoryDraft . Usage Sync list of category drafts Prerequisites About SyncOptions Running the sync Build all update actions Build particular update action(s) Caveats Usage \u00b6 Sync list of category drafts \u00b6 Prerequisites \u00b6 The sync expects a list of CategoryDraft s that have their key fields set to be matched with categories in the target CTP project. Also, the categories in the target project are expected to have the key fields set, otherwise they won't be matched. Every category may have a reference to a parent category and a reference to the Type of its custom fields. These references are matched by their key s. Therefore, in order for the sync to resolve the actual ids of the references, their key s has to be supplied. When syncing from a source commercetools project, you can use mapToCategoryDrafts method that maps from a Category to CategoryDraft in order to make them ready for reference resolution by the sync: final List < CategoryDraft > categoryDrafts = CategoryReferenceResolutionUtils . mapToCategoryDrafts ( categories ); Create a sphereClient as described here . After the sphereClient is set up, a CategorySyncOptions should be built as follows: // instantiating a CategorySyncOptions final CategorySyncOptions categorySyncOptions = CategorySyncOptionsBuilder . of ( sphereClient ). build (); About SyncOptions \u00b6 SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations: 1. errorCallback \u00b6 A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception category draft from the source category of the target project (only provided if an existing category could be found) the update-actions, which failed (only provided if an existing category could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( CategorySync . class ); final CategorySyncOptions categorySyncOptions = CategorySyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , category , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build (); 2. warningCallback \u00b6 A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception category draft from the source category of the target project (only provided if an existing category could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( CategorySync . class ); final CategorySyncOptions categorySyncOptions = CategorySyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , category , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build (); 3. beforeUpdateCallback \u00b6 During the sync process if a target category and a category draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : category draft from the source category from the target project update actions that were calculated after comparing both Example \u00b6 final TriFunction < List < UpdateAction < Category >> , CategoryDraft , Category , List < UpdateAction < Category >>> beforeUpdateCategoryCallback = ( updateActions , newCategoryDraft , oldCategory ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof RemoveAsset )) . collect ( Collectors . toList ()); final CategorySyncOptions categorySyncOptions = CategorySyncOptionsBuilder . of ( sphereClient ). beforeUpdateCallback ( beforeUpdateCategoryCallback ). build (); 4. beforeCreateCallback \u00b6 During the sync process if a category draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : category draft that should be created Please refer to example in product sync document . 5. batchSize \u00b6 A number that could be used to set the batch size with which categories are fetched and processed, as categories are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding categories from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for category sync. Example \u00b6 final CategorySyncOptions categorySyncOptions = CategorySyncOptionsBuilder . of ( sphereClient ). batchSize ( 30 ). build (); Running the sync \u00b6 After all the aforementioned points in the previous section have been fulfilled, to run the sync: // instantiating a category sync final CategorySync categorySync = new CategorySync ( categorySyncOptions ); // execute the sync on your list of categories CompletionStage < CategorySyncStatistics > syncStatisticsStage = categorySync . sync ( categoryDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a CategorySyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed categories and the processing time of the last sync batch in different time units and in a human-readable format. final CategorySyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*\"Summary: 2000 categories were processed in total (1000 created, 995 updated, 5 failed to sync and 0 categories with a missing parent).\"*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied. More examples of how to use the sync \u00b6 Sync from another CTP project as a source . Sync from an external source . Make sure to read the Important Usage Tips for optimal performance. Build all update actions \u00b6 A utility method provided by the library to compare a Category with a new CategoryDraft and results in a list of category update actions. List < UpdateAction < Category >> updateActions = CategorySyncUtils . buildActions ( category , categoryDraft , categorySyncOptions ); Examples of its usage can be found in the tests here . Build particular update action(s) \u00b6 Utility methods provided by the library to compare the specific fields of a Category and a new CategoryDraft, and in turn, build the update action. One example is the buildChangeNameUpdateAction which compares names: Optional < UpdateAction < Category >> updateAction = buildChangeNameUpdateAction ( oldCategory , categoryDraft ); More examples of those utils for different fields can be found here . Caveats \u00b6 The library will sync all field types of custom fields, except ReferenceType . #87 .","title":"Category Sync"},{"location":"usage/CATEGORY_SYNC/#category-sync","text":"Module used for importing/syncing Categories into a commercetools project. It also provides utilities for generating update actions based on the comparison of a Category against a CategoryDraft . Usage Sync list of category drafts Prerequisites About SyncOptions Running the sync Build all update actions Build particular update action(s) Caveats","title":"Category Sync"},{"location":"usage/CATEGORY_SYNC/#usage","text":"","title":"Usage"},{"location":"usage/CATEGORY_SYNC/#sync-list-of-category-drafts","text":"","title":"Sync list of category drafts"},{"location":"usage/CATEGORY_SYNC/#prerequisites","text":"The sync expects a list of CategoryDraft s that have their key fields set to be matched with categories in the target CTP project. Also, the categories in the target project are expected to have the key fields set, otherwise they won't be matched. Every category may have a reference to a parent category and a reference to the Type of its custom fields. These references are matched by their key s. Therefore, in order for the sync to resolve the actual ids of the references, their key s has to be supplied. When syncing from a source commercetools project, you can use mapToCategoryDrafts method that maps from a Category to CategoryDraft in order to make them ready for reference resolution by the sync: final List < CategoryDraft > categoryDrafts = CategoryReferenceResolutionUtils . mapToCategoryDrafts ( categories ); Create a sphereClient as described here . After the sphereClient is set up, a CategorySyncOptions should be built as follows: // instantiating a CategorySyncOptions final CategorySyncOptions categorySyncOptions = CategorySyncOptionsBuilder . of ( sphereClient ). build ();","title":"Prerequisites"},{"location":"usage/CATEGORY_SYNC/#about-syncoptions","text":"SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:","title":"About SyncOptions"},{"location":"usage/CATEGORY_SYNC/#1-errorcallback","text":"A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception category draft from the source category of the target project (only provided if an existing category could be found) the update-actions, which failed (only provided if an existing category could be found)","title":"1. errorCallback"},{"location":"usage/CATEGORY_SYNC/#example","text":"final Logger logger = LoggerFactory . getLogger ( CategorySync . class ); final CategorySyncOptions categorySyncOptions = CategorySyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , category , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/CATEGORY_SYNC/#2-warningcallback","text":"A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception category draft from the source category of the target project (only provided if an existing category could be found)","title":"2. warningCallback"},{"location":"usage/CATEGORY_SYNC/#example_1","text":"final Logger logger = LoggerFactory . getLogger ( CategorySync . class ); final CategorySyncOptions categorySyncOptions = CategorySyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , category , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/CATEGORY_SYNC/#3-beforeupdatecallback","text":"During the sync process if a target category and a category draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : category draft from the source category from the target project update actions that were calculated after comparing both","title":"3. beforeUpdateCallback"},{"location":"usage/CATEGORY_SYNC/#example_2","text":"final TriFunction < List < UpdateAction < Category >> , CategoryDraft , Category , List < UpdateAction < Category >>> beforeUpdateCategoryCallback = ( updateActions , newCategoryDraft , oldCategory ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof RemoveAsset )) . collect ( Collectors . toList ()); final CategorySyncOptions categorySyncOptions = CategorySyncOptionsBuilder . of ( sphereClient ). beforeUpdateCallback ( beforeUpdateCategoryCallback ). build ();","title":"Example"},{"location":"usage/CATEGORY_SYNC/#4-beforecreatecallback","text":"During the sync process if a category draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : category draft that should be created Please refer to example in product sync document .","title":"4. beforeCreateCallback"},{"location":"usage/CATEGORY_SYNC/#5-batchsize","text":"A number that could be used to set the batch size with which categories are fetched and processed, as categories are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding categories from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for category sync.","title":"5. batchSize"},{"location":"usage/CATEGORY_SYNC/#example_3","text":"final CategorySyncOptions categorySyncOptions = CategorySyncOptionsBuilder . of ( sphereClient ). batchSize ( 30 ). build ();","title":"Example"},{"location":"usage/CATEGORY_SYNC/#running-the-sync","text":"After all the aforementioned points in the previous section have been fulfilled, to run the sync: // instantiating a category sync final CategorySync categorySync = new CategorySync ( categorySyncOptions ); // execute the sync on your list of categories CompletionStage < CategorySyncStatistics > syncStatisticsStage = categorySync . sync ( categoryDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a CategorySyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed categories and the processing time of the last sync batch in different time units and in a human-readable format. final CategorySyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*\"Summary: 2000 categories were processed in total (1000 created, 995 updated, 5 failed to sync and 0 categories with a missing parent).\"*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied.","title":"Running the sync"},{"location":"usage/CATEGORY_SYNC/#more-examples-of-how-to-use-the-sync","text":"Sync from another CTP project as a source . Sync from an external source . Make sure to read the Important Usage Tips for optimal performance.","title":"More examples of how to use the sync"},{"location":"usage/CATEGORY_SYNC/#build-all-update-actions","text":"A utility method provided by the library to compare a Category with a new CategoryDraft and results in a list of category update actions. List < UpdateAction < Category >> updateActions = CategorySyncUtils . buildActions ( category , categoryDraft , categorySyncOptions ); Examples of its usage can be found in the tests here .","title":"Build all update actions"},{"location":"usage/CATEGORY_SYNC/#build-particular-update-actions","text":"Utility methods provided by the library to compare the specific fields of a Category and a new CategoryDraft, and in turn, build the update action. One example is the buildChangeNameUpdateAction which compares names: Optional < UpdateAction < Category >> updateAction = buildChangeNameUpdateAction ( oldCategory , categoryDraft ); More examples of those utils for different fields can be found here .","title":"Build particular update action(s)"},{"location":"usage/CATEGORY_SYNC/#caveats","text":"The library will sync all field types of custom fields, except ReferenceType . #87 .","title":"Caveats"},{"location":"usage/CUSTOMER_SYNC/","text":"Customer Sync \u00b6 Module used for importing/syncing Customers into a commercetools project. It also provides utilities for generating update actions based on the comparison of a Customer against a CustomerDraft . Usage Sync list of cart discount drafts Prerequisites Running the sync More examples of how to use the sync Build all update actions Build particular update action(s) Caveats Usage \u00b6 Sync list of customer drafts \u00b6 Prerequisites \u00b6 The sync expects a list of CustomerDraft s that have their key fields set to be matched with customers in the target CTP project. The customers in the target project need to have the key fields set, otherwise they won't be matched. To sync customer address data, every customer Address needs a unique key to match the existing Address with the new Address. Every customer may have a reference to their CustomerGroup and/or the Type of their custom fields. The CustomerGroup and Type references should be expanded with a key. Any reference that is not expanded will have its id in place and not replaced by the key will be considered as existing resources on the target commercetools project and the library will issue an update/create an API request without reference resolution. When syncing from a source commercetools project, you can use mapToCustomerDrafts method that maps from a Customer to CustomerDraft to make them ready for reference resolution by the sync: final List < CustomerDraft > customerDrafts = CustomerReferenceResolutionUtils . mapToCustomertDrafts ( customerDrafts ); Create a sphereClient as described here . After the sphereClient is set up, a CustomerSyncOptions should be built as follows: // instantiating a CustomerSyncOptions final CustomerSyncOptions customerSyncOptions = CustomerSyncOptionsBuilder . of ( sphereClient ). build (); More information about Sync Options . About SyncOptions \u00b6 SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations: 1. errorCallback \u00b6 A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception customer draft from the source customer of the target project (only provided if an existing customer could be found) the update-actions, which failed (only provided if an existing customer could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( CustomerSync . class ); final CustomerSyncOptions customerSyncOptions = CustomerSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , customer , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build (); 2. warningCallback \u00b6 A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception customer draft from the source customer of the target project (only provided if an existing cart discount could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( CustomerSync . class ); final CustomerSyncOptions customerSyncOptions = CustomerSyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , customer , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build (); 3. beforeUpdateCallback \u00b6 During the sync process if a target customer and a customer draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : customer draft from the source customer from the target project update actions that were calculated after comparing both Example \u00b6 final TriFunction < List < UpdateAction < Customer >> , CustomerDraft , Customer , List < UpdateAction < Customer >>> beforeUpdateCallback , = ( updateActions , newCustomerDraft , oldCustomer ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof SetLastName )) . collect ( Collectors . toList ()); final CustomerSyncOptions customerSyncOptions = CustomerSyncOptionsBuilder . of ( CTP_CLIENT ) . beforeUpdateCallback ( beforeUpdateCallback ) . build (); 4. beforeCreateCallback \u00b6 During the sync process if a cart discount draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : customer draft that should be created ##### Example Please refer to the example in the product sync document . 5. batchSize \u00b6 A number that could be used to set the batch size with which customers are fetched and processed, as customers are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding customers from the target project on commercetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for customer sync. Example \u00b6 final CustomerSyncOptions customerSyncOptions = CustomerSyncOptionsBuilder . of ( sphereClient ). batchSize ( 30 ). build (); Running the sync \u00b6 When all prerequisites are fulfilled, follow those steps to run the sync: // instantiating a cart discount sync final CustomerSync customerSync = new CustomerSync ( customerSyncOptions ); // execute the sync on your list of customers CompletionStage < CustomerSyncStatistics > syncStatisticsStage = customerSync . sync ( customerDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a CustomerSyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed cart discounts, and the processing time of the last sync batch in different time units and in a human-readable format. final CustomerSyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*\"Summary: 100 customers were processed in total (11 created, 87 updated, 2 failed to sync).\"*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied. More examples of how to use the sync \u00b6 Sync from an external source . Make sure to read the Important Usage Tips for optimal performance. Build all update actions \u00b6 A utility method provided by the library to compare a Customer to a new CustomerDraft . The results are collected in a list of customer update actions. List < UpdateAction < Customer >> updateActions = CustomerSyncUtils . buildActions ( customer , customerDraft , customerSyncOptions ); Build particular update action(s) \u00b6 The library provides utility methods to compare specific fields of a Customer and a new CustomerDraft , and builds the update action(s) as a result. One example is the buildChangeEmailUpdateAction which compare email addresses: Optional < UpdateAction < Customer >> updateAction = CustomerUpdateActionUtils . buildChangeEmailAction ( oldCustomer , customerDraft ); More examples for particular update actions can be found in the test scenarios for CustomerUpdateActionUtils and AddressUpdateActionUtils . Caveats \u00b6 The library does not support the synchronization of the password field of existing customers. For customers that do not exist in the project, a password will be created with the given customer draft\u2019s password.","title":"Customer Sync"},{"location":"usage/CUSTOMER_SYNC/#customer-sync","text":"Module used for importing/syncing Customers into a commercetools project. It also provides utilities for generating update actions based on the comparison of a Customer against a CustomerDraft . Usage Sync list of cart discount drafts Prerequisites Running the sync More examples of how to use the sync Build all update actions Build particular update action(s) Caveats","title":"Customer Sync"},{"location":"usage/CUSTOMER_SYNC/#usage","text":"","title":"Usage"},{"location":"usage/CUSTOMER_SYNC/#sync-list-of-customer-drafts","text":"","title":"Sync list of customer drafts"},{"location":"usage/CUSTOMER_SYNC/#prerequisites","text":"The sync expects a list of CustomerDraft s that have their key fields set to be matched with customers in the target CTP project. The customers in the target project need to have the key fields set, otherwise they won't be matched. To sync customer address data, every customer Address needs a unique key to match the existing Address with the new Address. Every customer may have a reference to their CustomerGroup and/or the Type of their custom fields. The CustomerGroup and Type references should be expanded with a key. Any reference that is not expanded will have its id in place and not replaced by the key will be considered as existing resources on the target commercetools project and the library will issue an update/create an API request without reference resolution. When syncing from a source commercetools project, you can use mapToCustomerDrafts method that maps from a Customer to CustomerDraft to make them ready for reference resolution by the sync: final List < CustomerDraft > customerDrafts = CustomerReferenceResolutionUtils . mapToCustomertDrafts ( customerDrafts ); Create a sphereClient as described here . After the sphereClient is set up, a CustomerSyncOptions should be built as follows: // instantiating a CustomerSyncOptions final CustomerSyncOptions customerSyncOptions = CustomerSyncOptionsBuilder . of ( sphereClient ). build (); More information about Sync Options .","title":"Prerequisites"},{"location":"usage/CUSTOMER_SYNC/#about-syncoptions","text":"SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:","title":"About SyncOptions"},{"location":"usage/CUSTOMER_SYNC/#1-errorcallback","text":"A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception customer draft from the source customer of the target project (only provided if an existing customer could be found) the update-actions, which failed (only provided if an existing customer could be found)","title":"1. errorCallback"},{"location":"usage/CUSTOMER_SYNC/#example","text":"final Logger logger = LoggerFactory . getLogger ( CustomerSync . class ); final CustomerSyncOptions customerSyncOptions = CustomerSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , customer , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/CUSTOMER_SYNC/#2-warningcallback","text":"A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception customer draft from the source customer of the target project (only provided if an existing cart discount could be found)","title":"2. warningCallback"},{"location":"usage/CUSTOMER_SYNC/#example_1","text":"final Logger logger = LoggerFactory . getLogger ( CustomerSync . class ); final CustomerSyncOptions customerSyncOptions = CustomerSyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , customer , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/CUSTOMER_SYNC/#3-beforeupdatecallback","text":"During the sync process if a target customer and a customer draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : customer draft from the source customer from the target project update actions that were calculated after comparing both","title":"3. beforeUpdateCallback"},{"location":"usage/CUSTOMER_SYNC/#example_2","text":"final TriFunction < List < UpdateAction < Customer >> , CustomerDraft , Customer , List < UpdateAction < Customer >>> beforeUpdateCallback , = ( updateActions , newCustomerDraft , oldCustomer ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof SetLastName )) . collect ( Collectors . toList ()); final CustomerSyncOptions customerSyncOptions = CustomerSyncOptionsBuilder . of ( CTP_CLIENT ) . beforeUpdateCallback ( beforeUpdateCallback ) . build ();","title":"Example"},{"location":"usage/CUSTOMER_SYNC/#4-beforecreatecallback","text":"During the sync process if a cart discount draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : customer draft that should be created ##### Example Please refer to the example in the product sync document .","title":"4. beforeCreateCallback"},{"location":"usage/CUSTOMER_SYNC/#5-batchsize","text":"A number that could be used to set the batch size with which customers are fetched and processed, as customers are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding customers from the target project on commercetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for customer sync.","title":"5. batchSize"},{"location":"usage/CUSTOMER_SYNC/#example_3","text":"final CustomerSyncOptions customerSyncOptions = CustomerSyncOptionsBuilder . of ( sphereClient ). batchSize ( 30 ). build ();","title":"Example"},{"location":"usage/CUSTOMER_SYNC/#running-the-sync","text":"When all prerequisites are fulfilled, follow those steps to run the sync: // instantiating a cart discount sync final CustomerSync customerSync = new CustomerSync ( customerSyncOptions ); // execute the sync on your list of customers CompletionStage < CustomerSyncStatistics > syncStatisticsStage = customerSync . sync ( customerDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a CustomerSyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed cart discounts, and the processing time of the last sync batch in different time units and in a human-readable format. final CustomerSyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*\"Summary: 100 customers were processed in total (11 created, 87 updated, 2 failed to sync).\"*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied.","title":"Running the sync"},{"location":"usage/CUSTOMER_SYNC/#more-examples-of-how-to-use-the-sync","text":"Sync from an external source . Make sure to read the Important Usage Tips for optimal performance.","title":"More examples of how to use the sync"},{"location":"usage/CUSTOMER_SYNC/#build-all-update-actions","text":"A utility method provided by the library to compare a Customer to a new CustomerDraft . The results are collected in a list of customer update actions. List < UpdateAction < Customer >> updateActions = CustomerSyncUtils . buildActions ( customer , customerDraft , customerSyncOptions );","title":"Build all update actions"},{"location":"usage/CUSTOMER_SYNC/#build-particular-update-actions","text":"The library provides utility methods to compare specific fields of a Customer and a new CustomerDraft , and builds the update action(s) as a result. One example is the buildChangeEmailUpdateAction which compare email addresses: Optional < UpdateAction < Customer >> updateAction = CustomerUpdateActionUtils . buildChangeEmailAction ( oldCustomer , customerDraft ); More examples for particular update actions can be found in the test scenarios for CustomerUpdateActionUtils and AddressUpdateActionUtils .","title":"Build particular update action(s)"},{"location":"usage/CUSTOMER_SYNC/#caveats","text":"The library does not support the synchronization of the password field of existing customers. For customers that do not exist in the project, a password will be created with the given customer draft\u2019s password.","title":"Caveats"},{"location":"usage/CUSTOM_OBJECT_SYNC/","text":"Custom Object Sync \u00b6 Module used for importing/syncing CustomObject into a commercetools project. It also provides utilities for correlating a custom object to a given custom object draft based on the comparison of a CustomObject against a CustomObjectDraft . Usage Sync list of CustomObjectDrafts Prerequisites About SyncOptions Running the sync More examples of how to use the sync Usage \u00b6 Sync list of CustomObjectDrafts \u00b6 Prerequisites \u00b6 The sync expects a list of CustomObjectDraft s that have their key and container fields set to be matched with custom objects in the target CTP project. Therefore, the custom objects in the target project are expected to have the same key and container fields set, otherwise they won't be matched. Create a sphereClient as described here . After the sphereClient is set up, a CustomObjectSyncOptions should be be built as follows: // instantiating a CustomObjectSyncOptions final CustomObjectSyncOptions customObjectSyncOptions = CustomObjectSyncOptionsBuilder . of ( sphereClient ). build (); About SyncOptions \u00b6 SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations: 1. errorCallback \u00b6 A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception custom object draft from the source custom object of the target project (only provided if an existing custom object could be found) the update-actions, which failed (only provided if an existing custom object could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( CustomObjectSync . class ); final CustomObjectSyncOptions customObjectSyncOptions = CustomObjectSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , customObject , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build (); 2. warningCallback \u00b6 A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception custom object draft from the source custom object of the target project (only provided if an existing custom object could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( CustomObjectSync . class ); final CustomObjectSyncOptions customObjectSyncOptions = CustomObjectSyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , customObject , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build (); 3. beforeUpdateCallback \u00b6 In theory, CustomObjectSyncOptions provides callback before update operation. User can customize own callback and inject into sync options. However, in actual case, beforeUpdateCallback is not triggered in custom object sync process. When new custom object draft has the same key and container as existing custom object but different in custom object values, sync process automatically perform update operation. The value of corresponding custom object in target project is overwritten. This approach is different from other resources and no update action is involved. No example is applicable. 4. beforeCreateCallback \u00b6 During the sync process if a custom object draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : custom object draft that should be created Please refer to example in product sync document . 5. batchSize \u00b6 A number that could be used to set the batch size with which custom objects are fetched and processed, as custom objects are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding custom objects from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for custom object sync. Example \u00b6 final CustomObjectSyncOptions customObjectSyncOptions = CustomObjectSyncOptionsBuilder . of ( sphereClient ). batchSize ( 30 ). build (); Running the sync \u00b6 After all the aforementioned points in the previous section have been fulfilled, to run the sync: // instantiating a CustomObjectSync final CustomObjectSync customObjectSync = new CustomObjectSync ( customObjectSyncOptions ); // execute the sync on your list of custom object drafts CompletionStage < CustomObjectSyncStatistics > syncStatisticsStage = customObjectSync . sync ( customObjectDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a CustomObjectSyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed custom objects and the processing time of the last sync batch in different time units and in a human-readable format. final CustomObjectSyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*\"Summary: 2000 custom objects were processed in total (1000 created, 995 updated, 5 failed to sync).\"*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied. More examples of how to use the sync \u00b6 Sync from an external source . Make sure to read the Important Usage Tips for optimal performance. More examples of those utils for different custom objects can be found here .","title":"CustomObject Sync"},{"location":"usage/CUSTOM_OBJECT_SYNC/#custom-object-sync","text":"Module used for importing/syncing CustomObject into a commercetools project. It also provides utilities for correlating a custom object to a given custom object draft based on the comparison of a CustomObject against a CustomObjectDraft . Usage Sync list of CustomObjectDrafts Prerequisites About SyncOptions Running the sync More examples of how to use the sync","title":"Custom Object Sync"},{"location":"usage/CUSTOM_OBJECT_SYNC/#usage","text":"","title":"Usage"},{"location":"usage/CUSTOM_OBJECT_SYNC/#sync-list-of-customobjectdrafts","text":"","title":"Sync list of CustomObjectDrafts"},{"location":"usage/CUSTOM_OBJECT_SYNC/#prerequisites","text":"The sync expects a list of CustomObjectDraft s that have their key and container fields set to be matched with custom objects in the target CTP project. Therefore, the custom objects in the target project are expected to have the same key and container fields set, otherwise they won't be matched. Create a sphereClient as described here . After the sphereClient is set up, a CustomObjectSyncOptions should be be built as follows: // instantiating a CustomObjectSyncOptions final CustomObjectSyncOptions customObjectSyncOptions = CustomObjectSyncOptionsBuilder . of ( sphereClient ). build ();","title":"Prerequisites"},{"location":"usage/CUSTOM_OBJECT_SYNC/#about-syncoptions","text":"SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:","title":"About SyncOptions"},{"location":"usage/CUSTOM_OBJECT_SYNC/#1-errorcallback","text":"A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception custom object draft from the source custom object of the target project (only provided if an existing custom object could be found) the update-actions, which failed (only provided if an existing custom object could be found)","title":"1. errorCallback"},{"location":"usage/CUSTOM_OBJECT_SYNC/#example","text":"final Logger logger = LoggerFactory . getLogger ( CustomObjectSync . class ); final CustomObjectSyncOptions customObjectSyncOptions = CustomObjectSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , customObject , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/CUSTOM_OBJECT_SYNC/#2-warningcallback","text":"A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception custom object draft from the source custom object of the target project (only provided if an existing custom object could be found)","title":"2. warningCallback"},{"location":"usage/CUSTOM_OBJECT_SYNC/#example_1","text":"final Logger logger = LoggerFactory . getLogger ( CustomObjectSync . class ); final CustomObjectSyncOptions customObjectSyncOptions = CustomObjectSyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , customObject , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/CUSTOM_OBJECT_SYNC/#3-beforeupdatecallback","text":"In theory, CustomObjectSyncOptions provides callback before update operation. User can customize own callback and inject into sync options. However, in actual case, beforeUpdateCallback is not triggered in custom object sync process. When new custom object draft has the same key and container as existing custom object but different in custom object values, sync process automatically perform update operation. The value of corresponding custom object in target project is overwritten. This approach is different from other resources and no update action is involved. No example is applicable.","title":"3. beforeUpdateCallback"},{"location":"usage/CUSTOM_OBJECT_SYNC/#4-beforecreatecallback","text":"During the sync process if a custom object draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : custom object draft that should be created Please refer to example in product sync document .","title":"4. beforeCreateCallback"},{"location":"usage/CUSTOM_OBJECT_SYNC/#5-batchsize","text":"A number that could be used to set the batch size with which custom objects are fetched and processed, as custom objects are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding custom objects from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for custom object sync.","title":"5. batchSize"},{"location":"usage/CUSTOM_OBJECT_SYNC/#example_2","text":"final CustomObjectSyncOptions customObjectSyncOptions = CustomObjectSyncOptionsBuilder . of ( sphereClient ). batchSize ( 30 ). build ();","title":"Example"},{"location":"usage/CUSTOM_OBJECT_SYNC/#running-the-sync","text":"After all the aforementioned points in the previous section have been fulfilled, to run the sync: // instantiating a CustomObjectSync final CustomObjectSync customObjectSync = new CustomObjectSync ( customObjectSyncOptions ); // execute the sync on your list of custom object drafts CompletionStage < CustomObjectSyncStatistics > syncStatisticsStage = customObjectSync . sync ( customObjectDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a CustomObjectSyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed custom objects and the processing time of the last sync batch in different time units and in a human-readable format. final CustomObjectSyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*\"Summary: 2000 custom objects were processed in total (1000 created, 995 updated, 5 failed to sync).\"*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied.","title":"Running the sync"},{"location":"usage/CUSTOM_OBJECT_SYNC/#more-examples-of-how-to-use-the-sync","text":"Sync from an external source . Make sure to read the Important Usage Tips for optimal performance. More examples of those utils for different custom objects can be found here .","title":"More examples of how to use the sync"},{"location":"usage/IMPORTANT_USAGE_TIPS/","text":"Important Usage Tips \u00b6 SphereClient Creation \u00b6 It is an important responsibility of the user of the library to instantiate a sphereClient that does the following: Limits the number of concurrent requests done to CTP. This can be done by decorating the sphereClient with QueueSphereClientDecorator Retries on 5xx errors with a retry strategy. This can be achieved by decorating the sphereClient with the RetrySphereClientDecorator If you have no special requirements on the sphere client creation, then you can use the ClientConfigurationUtils#createClient util which applies the best practices for SphereClient creation. Tuning the Sync Process \u00b6 The sync library is not meant to be executed in a parallel fashion. For example: final ProductSync productSync = new ProductSync ( syncOptions ); final CompletableFuture < ProductSyncStatistics > syncFuture1 = productSync . sync ( batch1 ). toCompletableFuture (); final CompletableFuture < ProductSyncStatistics > syncFuture2 = productSync . sync ( batch2 ). toCompletableFuture (); CompletableFuture . allOf ( syncFuture1 , syncFuture2 ). join ; The aforementioned example demonstrates how the library should NOT be used. The library, however, should be instead used in a sequential fashion: final ProductSync productSync = new ProductSync ( syncOptions ); productSync . sync ( batch1 ) . thenCompose ( result -> productSync . sync ( batch2 )) . toCompletableFuture () . join (); By design, scaling the sync process should not be done by executing the batches themselves in parallel. However, it can be done either by: Changing the number of max parallel requests within the sphereClient configuration. It defines how many requests the client can execute in parallel. or changing the draft batch size . It defines how many drafts can one batch contain. The current overridable default configuration of the sphereClient is the recommended good balance for stability and performance for the sync process. In order to exploit the number of max parallel requests , the batch size should have a value set which is equal or higher.","title":"Usage Tips"},{"location":"usage/IMPORTANT_USAGE_TIPS/#important-usage-tips","text":"","title":"Important Usage Tips"},{"location":"usage/IMPORTANT_USAGE_TIPS/#sphereclient-creation","text":"It is an important responsibility of the user of the library to instantiate a sphereClient that does the following: Limits the number of concurrent requests done to CTP. This can be done by decorating the sphereClient with QueueSphereClientDecorator Retries on 5xx errors with a retry strategy. This can be achieved by decorating the sphereClient with the RetrySphereClientDecorator If you have no special requirements on the sphere client creation, then you can use the ClientConfigurationUtils#createClient util which applies the best practices for SphereClient creation.","title":"SphereClient Creation"},{"location":"usage/IMPORTANT_USAGE_TIPS/#tuning-the-sync-process","text":"The sync library is not meant to be executed in a parallel fashion. For example: final ProductSync productSync = new ProductSync ( syncOptions ); final CompletableFuture < ProductSyncStatistics > syncFuture1 = productSync . sync ( batch1 ). toCompletableFuture (); final CompletableFuture < ProductSyncStatistics > syncFuture2 = productSync . sync ( batch2 ). toCompletableFuture (); CompletableFuture . allOf ( syncFuture1 , syncFuture2 ). join ; The aforementioned example demonstrates how the library should NOT be used. The library, however, should be instead used in a sequential fashion: final ProductSync productSync = new ProductSync ( syncOptions ); productSync . sync ( batch1 ) . thenCompose ( result -> productSync . sync ( batch2 )) . toCompletableFuture () . join (); By design, scaling the sync process should not be done by executing the batches themselves in parallel. However, it can be done either by: Changing the number of max parallel requests within the sphereClient configuration. It defines how many requests the client can execute in parallel. or changing the draft batch size . It defines how many drafts can one batch contain. The current overridable default configuration of the sphereClient is the recommended good balance for stability and performance for the sync process. In order to exploit the number of max parallel requests , the batch size should have a value set which is equal or higher.","title":"Tuning the Sync Process"},{"location":"usage/INVENTORY_SYNC/","text":"InventoryEntry Sync \u00b6 Module used for importing/syncing InventoryEntries into a commercetools project. It also provides utilities for generating update actions based on the comparison of a InventoryEntry against a InventoryEntryDraft . Usage Sync list of inventory entry drafts Prerequisites About SyncOptions Running the sync Build all update actions Build particular update action(s) Caveats Usage \u00b6 Sync list of inventory entry drafts \u00b6 Prerequisites \u00b6 The sync expects a list of InventoryEntryDraft s that have their sku fields set, otherwise the sync will trigger an errorCallback function set by the user (more on it can be found down below in the options explanations). Every inventory entry may have a reference to a supply Channel and a reference to the Type of its custom fields. These references are matched by their key s. Therefore, in order for the sync to resolve the actual ids of those references, their key s has to be supplied. When syncing from a source commercetools project, you can use mapToInventoryEntryDrafts method that that maps from a InventoryEntry to InventoryEntryDraft in order to make them ready for reference resolution by the sync: final List < InventoryEntryDraft > inventoryEntryDrafts = InventoryReferenceResolutionUtils . mapToInventoryEntryDrafts ( inventoryEntries ); Create a sphereClient as described here . After the sphereClient is setup, a InventorySyncOptions should be built as follows: // instantiating a InventorySyncOptions final InventorySyncOptions inventorySyncOptions = InventorySyncOptionsBuilder . of ( sphereClient ). build (); About SyncOptions \u00b6 SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations: 1. errorCallback \u00b6 A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception inventory entry draft from the source inventory entry of the target project (only provided if an existing inventory entry could be found) the update-actions, which failed (only provided if an existing inventory entry could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( InventorySync . class ); final InventorySyncOptions inventorySyncOptions = InventorySyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , inventoryEntry , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build (); 2. warningCallback \u00b6 A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception inventory entry draft from the source inventory entry of the target project (only provided if an existing inventory entry could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( InventorySync . class ); final InventorySyncOptions inventorySyncOptions = InventorySyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , inventoryEntry , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build (); 3. beforeUpdateCallback \u00b6 During the sync process if a target inventory entry and a inventory entry draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : inventory entry draft from the source inventory from the target project update actions that were calculated after comparing both Example \u00b6 final TriFunction < List < UpdateAction < InventoryEntry >> , InventoryEntryDraft , InventoryEntry , List < UpdateAction < InventoryEntry >>> beforeUpdateInventoryCallback = ( updateActions , newInventoryEntryDraft , oldInventoryEntry ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof RemoveQuantity )) . collect ( Collectors . toList ()); final InventorySyncOptions inventorySyncOptions = InventorySyncOptionsBuilder . of ( sphereClient ). beforeUpdateCallback ( beforeUpdateInventoryCallback ). build (); 4. beforeCreateCallback \u00b6 During the sync process if a inventory entry draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : inventory entry draft that should be created Please refer to example in product sync document . 5. batchSize \u00b6 A number that could be used to set the batch size with which inventories are fetched and processed, as inventories are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding inventories from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 150 for inventory sync. Example \u00b6 final InventorySyncOptions inventorySyncOptions = InventorySyncOptionsBuilder . of ( sphereClient ). batchSize ( 100 ). build (); 6. ensureChannels \u00b6 A flag to indicate whether the sync process should create supply channel of the given key when it doesn't exist in a target project yet. - If ensureChannels is set to false this inventory won't be synced and the errorCallback will be triggered. - If ensureChannels is set to true the sync will attempt to create the missing supply channel with the given key. If it fails to create the supply channel, the inventory won't sync and errorCallback will be triggered. - If not provided, it is set to false by default. Example \u00b6 final InventorySyncOptions inventorySyncOptions = InventorySyncOptionsBuilder . of ( sphereClient ). ensureChannels ( true ). build (); Running the sync \u00b6 After all the aforementioned points in the previous section have been fulfilled, to run the sync: // instantiating an inventory sync final InventorySync inventorySync = new InventorySync ( inventorySyncOptions ); // execute the sync on your list of inventories CompletionStage < InventorySyncStatistics > syncStatisticsStage = inventorySync . sync ( inventoryEntryDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a InventorySyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed inventories and the processing time of the sync in different time units and in a human readable format. final InventorySyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*\"Summary: 25 inventory entries were processed in total (9 created, 5 updated, 2 failed to sync).\"*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied. More examples of how to use the sync here . Make sure to read the Important Usage Tips for optimal performance. Build all update actions \u00b6 A utility method provided by the library to compare an InventoryEntry with a new InventoryEntryDraft and results in a list of InventoryEntry update actions. List < UpdateAction < InventoryEntry >> updateActions = InventorySyncUtils . buildActions ( oldEntry , newEntry , inventorySyncOptions ); Examples of its usage can be found in the tests here . Build particular update action(s) \u00b6 Utility methods provided by the library to compare the specific fields of an InventoryEntry and a new InventoryEntryDraft, and in turn builds the update action. One example is the buildChangeQuantityAction which compares quantities: Optional < UpdateAction < InventoryEntry >> updateAction = buildChangeQuantityAction ( oldEntry , newEntry ); Caveats \u00b6 The library will sync all field types of custom fields, except ReferenceType . #87 .","title":"InventoryEntry Sync"},{"location":"usage/INVENTORY_SYNC/#inventoryentry-sync","text":"Module used for importing/syncing InventoryEntries into a commercetools project. It also provides utilities for generating update actions based on the comparison of a InventoryEntry against a InventoryEntryDraft . Usage Sync list of inventory entry drafts Prerequisites About SyncOptions Running the sync Build all update actions Build particular update action(s) Caveats","title":"InventoryEntry Sync"},{"location":"usage/INVENTORY_SYNC/#usage","text":"","title":"Usage"},{"location":"usage/INVENTORY_SYNC/#sync-list-of-inventory-entry-drafts","text":"","title":"Sync list of inventory entry drafts"},{"location":"usage/INVENTORY_SYNC/#prerequisites","text":"The sync expects a list of InventoryEntryDraft s that have their sku fields set, otherwise the sync will trigger an errorCallback function set by the user (more on it can be found down below in the options explanations). Every inventory entry may have a reference to a supply Channel and a reference to the Type of its custom fields. These references are matched by their key s. Therefore, in order for the sync to resolve the actual ids of those references, their key s has to be supplied. When syncing from a source commercetools project, you can use mapToInventoryEntryDrafts method that that maps from a InventoryEntry to InventoryEntryDraft in order to make them ready for reference resolution by the sync: final List < InventoryEntryDraft > inventoryEntryDrafts = InventoryReferenceResolutionUtils . mapToInventoryEntryDrafts ( inventoryEntries ); Create a sphereClient as described here . After the sphereClient is setup, a InventorySyncOptions should be built as follows: // instantiating a InventorySyncOptions final InventorySyncOptions inventorySyncOptions = InventorySyncOptionsBuilder . of ( sphereClient ). build ();","title":"Prerequisites"},{"location":"usage/INVENTORY_SYNC/#about-syncoptions","text":"SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:","title":"About SyncOptions"},{"location":"usage/INVENTORY_SYNC/#1-errorcallback","text":"A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception inventory entry draft from the source inventory entry of the target project (only provided if an existing inventory entry could be found) the update-actions, which failed (only provided if an existing inventory entry could be found)","title":"1. errorCallback"},{"location":"usage/INVENTORY_SYNC/#example","text":"final Logger logger = LoggerFactory . getLogger ( InventorySync . class ); final InventorySyncOptions inventorySyncOptions = InventorySyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , inventoryEntry , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/INVENTORY_SYNC/#2-warningcallback","text":"A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception inventory entry draft from the source inventory entry of the target project (only provided if an existing inventory entry could be found)","title":"2. warningCallback"},{"location":"usage/INVENTORY_SYNC/#example_1","text":"final Logger logger = LoggerFactory . getLogger ( InventorySync . class ); final InventorySyncOptions inventorySyncOptions = InventorySyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , inventoryEntry , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/INVENTORY_SYNC/#3-beforeupdatecallback","text":"During the sync process if a target inventory entry and a inventory entry draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : inventory entry draft from the source inventory from the target project update actions that were calculated after comparing both","title":"3. beforeUpdateCallback"},{"location":"usage/INVENTORY_SYNC/#example_2","text":"final TriFunction < List < UpdateAction < InventoryEntry >> , InventoryEntryDraft , InventoryEntry , List < UpdateAction < InventoryEntry >>> beforeUpdateInventoryCallback = ( updateActions , newInventoryEntryDraft , oldInventoryEntry ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof RemoveQuantity )) . collect ( Collectors . toList ()); final InventorySyncOptions inventorySyncOptions = InventorySyncOptionsBuilder . of ( sphereClient ). beforeUpdateCallback ( beforeUpdateInventoryCallback ). build ();","title":"Example"},{"location":"usage/INVENTORY_SYNC/#4-beforecreatecallback","text":"During the sync process if a inventory entry draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : inventory entry draft that should be created Please refer to example in product sync document .","title":"4. beforeCreateCallback"},{"location":"usage/INVENTORY_SYNC/#5-batchsize","text":"A number that could be used to set the batch size with which inventories are fetched and processed, as inventories are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding inventories from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 150 for inventory sync.","title":"5. batchSize"},{"location":"usage/INVENTORY_SYNC/#example_3","text":"final InventorySyncOptions inventorySyncOptions = InventorySyncOptionsBuilder . of ( sphereClient ). batchSize ( 100 ). build ();","title":"Example"},{"location":"usage/INVENTORY_SYNC/#6-ensurechannels","text":"A flag to indicate whether the sync process should create supply channel of the given key when it doesn't exist in a target project yet. - If ensureChannels is set to false this inventory won't be synced and the errorCallback will be triggered. - If ensureChannels is set to true the sync will attempt to create the missing supply channel with the given key. If it fails to create the supply channel, the inventory won't sync and errorCallback will be triggered. - If not provided, it is set to false by default.","title":"6. ensureChannels"},{"location":"usage/INVENTORY_SYNC/#example_4","text":"final InventorySyncOptions inventorySyncOptions = InventorySyncOptionsBuilder . of ( sphereClient ). ensureChannels ( true ). build ();","title":"Example"},{"location":"usage/INVENTORY_SYNC/#running-the-sync","text":"After all the aforementioned points in the previous section have been fulfilled, to run the sync: // instantiating an inventory sync final InventorySync inventorySync = new InventorySync ( inventorySyncOptions ); // execute the sync on your list of inventories CompletionStage < InventorySyncStatistics > syncStatisticsStage = inventorySync . sync ( inventoryEntryDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a InventorySyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed inventories and the processing time of the sync in different time units and in a human readable format. final InventorySyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*\"Summary: 25 inventory entries were processed in total (9 created, 5 updated, 2 failed to sync).\"*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied. More examples of how to use the sync here . Make sure to read the Important Usage Tips for optimal performance.","title":"Running the sync"},{"location":"usage/INVENTORY_SYNC/#build-all-update-actions","text":"A utility method provided by the library to compare an InventoryEntry with a new InventoryEntryDraft and results in a list of InventoryEntry update actions. List < UpdateAction < InventoryEntry >> updateActions = InventorySyncUtils . buildActions ( oldEntry , newEntry , inventorySyncOptions ); Examples of its usage can be found in the tests here .","title":"Build all update actions"},{"location":"usage/INVENTORY_SYNC/#build-particular-update-actions","text":"Utility methods provided by the library to compare the specific fields of an InventoryEntry and a new InventoryEntryDraft, and in turn builds the update action. One example is the buildChangeQuantityAction which compares quantities: Optional < UpdateAction < InventoryEntry >> updateAction = buildChangeQuantityAction ( oldEntry , newEntry );","title":"Build particular update action(s)"},{"location":"usage/INVENTORY_SYNC/#caveats","text":"The library will sync all field types of custom fields, except ReferenceType . #87 .","title":"Caveats"},{"location":"usage/PRODUCT_SYNC/","text":"Product Sync \u00b6 Module used for importing/syncing Products into a commercetools project. It also provides utilities for generating update actions based on the comparison of a Product against a ProductDraft . Usage Sync list of product drafts Prerequisites About SyncOptions Running the sync Persistence of ProductDrafts with Irresolvable References More examples of how to use the sync Build all update actions Build particular update action(s) Caveats Usage \u00b6 Sync list of product drafts \u00b6 Prerequisites \u00b6 The sync expects a list of ProductDraft s that have their key fields set to be matched with products in the target commercetools project. Also, the products in the target project are expected to have the key fields set, otherwise they won't be matched. The sync expects all variants of the supplied list of ProductDraft s to have their sku fields set. Also, all the variants in the target project are expected to have the sku fields set. Every product may have several references including product type , categories , taxCategory , etc. Variants of the product also have prices, where each price also has some references including a reference to the Type of its custom fields and a reference to a channel . All these referenced resources are matched by their key s. Therefore, in order for the sync to resolve the actual ids of those references, those key s have to be supplied in the following way: When syncing from a source commercetools project, you can use mapToProductDrafts method that maps from a Product to ProductDraft in order to make them ready for reference resolution by the sync: final List < ProductDraft > productDrafts = ProductReferenceResolutionUtils . mapToProductDrafts ( products ); Note: Some references in the product like state , customerGroup of prices, and variant attributes with type reference do not support the ResourceIdentifier yet, for those references you need to provide the key value on the id field of the reference. This means that calling getId() on the reference would return its key . For resolving key-value-document (custom object) references on attributes of type Reference , Set of Reference , NestedType or Set of NestedType , The id field of the reference in the attribute draft should be defined in the correct format. The correct format must have a vertical bar | character between the values of the container and key. For example, if the custom object has a container value container and key value key , the id field should be container|key\" , also, the key and container value should match the pattern [-_~.a-zA-Z0-9]+ . Create a sphereClient as described here . After the sphereClient is set up, a ProductSyncOptions should be built as follows: // instantiating a ProductSyncOptions final ProductSyncOptions productSyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ). build (); About SyncOptions \u00b6 SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations: 1. errorCallback \u00b6 A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception product draft from the source product of the target project (only provided if an existing product could be found) the update-actions, which failed (only provided if an existing product could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( ProductSync . class ); final ProductSyncOptions productSyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , product , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build (); 2. warningCallback \u00b6 A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception product draft from the source product of the target project (only provided if an existing product could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( ProductSync . class ); final ProductSyncOptions productSyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , product , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build (); 3. beforeUpdateCallback \u00b6 During the sync process if a target product and a product draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : product draft from the source product from the target project update actions that were calculated after comparing both Example \u00b6 final TriFunction < List < UpdateAction < Product >> , ProductDraft , Product , List < UpdateAction < Product >>> beforeUpdateProductCallback = ( updateActions , newProductDraft , oldProduct ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof RemoveVariant )) . collect ( Collectors . toList ()); final ProductSyncOptions productSyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ). beforeUpdateCallback ( beforeUpdateProductCallback ). build (); 4. beforeCreateCallback \u00b6 During the sync process if a product draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : product draft that should be created Example (Set publish stage if category references of given product draft exists) \u00b6 final Function < ProductDraft , ProductDraft > beforeCreateProductCallback = ( callbackDraft ) -> { Set < ResourceIdentifier < Category >> categoryResourceIdentifier = callbackDraft . getCategories (); if ( categoryResourceIdentifier != null && ! categoryResourceIdentifier . isEmpty ()) { return ProductDraftBuilder . of ( callbackDraft ). isPublish ( true ). build (); } return callbackDraft ; }; final ProductSyncOptions productSyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ). beforeCreateCallback ( beforeCreateProductCallback ). build (); 5. batchSize \u00b6 A number that could be used to set the batch size with which products are fetched and processed, as products are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding products from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 30 for product sync. Example \u00b6 final ProductSyncOptions productSyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ). batchSize ( 50 ). build (); 6. syncFilter \u00b6 It represents either a blacklist or a whitelist for filtering certain update action groups. Blacklisting an update action group means that everything in products will be synced except for any group in the blacklist. A typical use case is to blacklist prices when syncing products. In other words, syncing everything in products except prices. final ProductSyncOptions syncOptions = syncOptionsBuilder . syncFilter ( ofBlackList ( ActionGroup . PRICES )). build (); Whitelisting an update action group means that the groups in this whitelist will be the only group synced in products. One use case could be to whitelist prices when syncing products. In other words, syncing prices only in products and nothing else. final ProductSyncOptions syncOptions = syncOptionsBuilder . syncFilter ( ofWhiteList ( ActionGroup . PRICES )). build (); The list of action groups allowed to be blacklisted or whitelisted on products can be found here . 7. ensureChannels \u00b6 A flag to indicate whether the sync process should create price channel of the given key when it doesn't exist in a target project yet. - If ensureChannels is set to false this product won't be synced and the errorCallback will be triggered. - If ensureChannels is set to true the sync will attempt to create the missing channel with the given key. If it fails to create the price channel, the product won't sync and errorCallback will be triggered. - If not provided, it is set to false by default. Example \u00b6 final ProductSyncOptions productSyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ). ensureChannels ( true ). build (); Running the sync \u00b6 After all the aforementioned points in the previous section have been fulfilled, to run the sync: // instantiating a product sync final ProductSync productSync = new ProductSync ( productSyncOptions ); // execute the sync on your list of products CompletionStage < ProductSyncStatistics > syncStatisticsStage = productSync . sync ( productDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a ProductSyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed products and the processing time of the sync in different time units and in a human-readable format. final ProductSyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*Summary: 2000 product(s) were processed in total (1000 created, 995 updated, 5 failed to sync and 0 product(s) with missing reference(s)).*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied. Persistence of ProductDrafts with Irresolvable References \u00b6 A productDraft X could be supplied in with an attribute referencing productDraft Y. It could be that Y is not supplied before X, which means the sync could fail creating/updating X. It could also be that Y is not supplied at all in this batch but at a later batch. The library keep tracks of such \"referencing\" drafts like X and persists them in storage ( Commercetools platform customObjects in the target project , in this case) to keep them and create/update them accordingly whenever the referenced drafts exist in the target project. The customObject will have a container: \"commercetools-sync-java.UnresolvedReferencesService.productDrafts\" and a key representing the key of the productDraft that is waiting to be created/updated. Here is an example of a CustomObject in the target project that represents a productDraft with productKey1 . It being persisted as CustomObject means that the referenced productDrafts with keys foo and bar do not exist yet. { \"id\" : \"d0fbb69e-76e7-4ec0-893e-3aaab6f4f6b6\" , \"version\" : 1 , \"container\" : \"commercetools-sync-java.UnresolvedReferencesService.productDrafts\" , \"key\" : \"productKey1\" , \"value\" : { \"dependantProductKeys\" : [ \"foo\" , \"bar\" ], \"productDraft\" : { \"productType\" : { \"typeId\" : \"product-type\" , \"id\" : \"main-product-type\" }, \"masterVariant\" : { \"id\" : 1 , \"sku\" : \"white-shirt-1\" , \"key\" : \"white-shirt-1\" , \"prices\" : [], \"images\" : [], \"attributes\" : [ { \"name\" : \"product-reference-set\" , \"value\" : [ { \"typeId\" : \"product\" , \"id\" : \"foo\" }, { \"typeId\" : \"product\" , \"id\" : \"bar\" } ] } ] }, \"key\" : \"productKey1\" } }, \"createdAt\" : \"2019-09-27T13:45:35.495Z\" , \"lastModifiedAt\" : \"2019-09-27T13:45:35.495Z\" , \"lastModifiedBy\" : { \"clientId\" : \"8bV3XSW-taCpi873-GQTa8lf\" , \"isPlatformClient\" : false }, \"createdBy\" : { \"clientId\" : \"8bV3XSW-taCpi873-GQTa8lf\" , \"isPlatformClient\" : false } } As soon, as the referenced productDrafts are supplied to the sync, the draft will be created/updated and the CustomObject will be removed from the target project. More examples of how to use the sync \u00b6 Sync from another commercetools project as a source . Sync from an external source . Sync with blacklisting/whitelisting . Make sure to read the Important Usage Tips for optimal performance. Build all update actions \u00b6 A utility method provided by the library to compare a Product with a new ProductDraft and results in a list of product update actions. List < UpdateAction < Product >> updateActions = ProductSyncUtils . buildActions ( product , productDraft , productSyncOptions , attributesMetaData ); Examples of its usage can be found in the tests here . Build particular update action(s) \u00b6 Utility methods provided by the library to compare the specific fields of a Product and a new ProductDraft, and in turn, build the update action. One example is the buildChangeNameUpdateAction which compares names: Optional < UpdateAction < Product >> updateAction = buildChangeNameUpdateAction ( oldProduct , productDraft ); More examples of those utils for different fields can be found here . Caveats \u00b6 The commercetools-java-sync library has some exceptions to the data it can sync, particularly around product variant attributes. List of supported variant attributes, with a AttributeType : ReferenceType , that can be synced (See more: #87 ): referenceTypeId supported \u201ccart\u201d \u274c \u201ccategory\u201d \u2705 \u201cchannel\u201d \u274c \u201ccustomer\u201d \u274c \u201ckey-value-document\u201d \u2705 \u201corder\u201d \u274c \u201cproduct\u201d \u2705 \u201cproduct-type\u201d \u2705 \u201creview\u201d \u274c \u201cstate\u201d \u274c \u201cshipping-method\u201d \u274c \u201czone\u201d \u274c Support for syncing variant attributes with an AttributeType of SetType of ReferenceType (of elementType: ReferenceType ) with any of the aforementioned referenceTypeId , accordingly applies. Support for syncing variant attributes with an AttributeType of NestedType which has an attribute inside of it of ReferenceType with any of the aforementioned referenceTypeId , accordingly applies. Syncing products with cyclic dependencies is not supported yet. An example of a cyclic dependency is a product a which references a product b and at the same time product b references product a . Cycles can contain more than 2 products. For example: a -> b -> c -> a . If there are such cycles, the sync will consider all the products in the cycle as products with missing parents. They will be persisted as custom objects in the target project.","title":"Product Sync"},{"location":"usage/PRODUCT_SYNC/#product-sync","text":"Module used for importing/syncing Products into a commercetools project. It also provides utilities for generating update actions based on the comparison of a Product against a ProductDraft . Usage Sync list of product drafts Prerequisites About SyncOptions Running the sync Persistence of ProductDrafts with Irresolvable References More examples of how to use the sync Build all update actions Build particular update action(s) Caveats","title":"Product Sync"},{"location":"usage/PRODUCT_SYNC/#usage","text":"","title":"Usage"},{"location":"usage/PRODUCT_SYNC/#sync-list-of-product-drafts","text":"","title":"Sync list of product drafts"},{"location":"usage/PRODUCT_SYNC/#prerequisites","text":"The sync expects a list of ProductDraft s that have their key fields set to be matched with products in the target commercetools project. Also, the products in the target project are expected to have the key fields set, otherwise they won't be matched. The sync expects all variants of the supplied list of ProductDraft s to have their sku fields set. Also, all the variants in the target project are expected to have the sku fields set. Every product may have several references including product type , categories , taxCategory , etc. Variants of the product also have prices, where each price also has some references including a reference to the Type of its custom fields and a reference to a channel . All these referenced resources are matched by their key s. Therefore, in order for the sync to resolve the actual ids of those references, those key s have to be supplied in the following way: When syncing from a source commercetools project, you can use mapToProductDrafts method that maps from a Product to ProductDraft in order to make them ready for reference resolution by the sync: final List < ProductDraft > productDrafts = ProductReferenceResolutionUtils . mapToProductDrafts ( products ); Note: Some references in the product like state , customerGroup of prices, and variant attributes with type reference do not support the ResourceIdentifier yet, for those references you need to provide the key value on the id field of the reference. This means that calling getId() on the reference would return its key . For resolving key-value-document (custom object) references on attributes of type Reference , Set of Reference , NestedType or Set of NestedType , The id field of the reference in the attribute draft should be defined in the correct format. The correct format must have a vertical bar | character between the values of the container and key. For example, if the custom object has a container value container and key value key , the id field should be container|key\" , also, the key and container value should match the pattern [-_~.a-zA-Z0-9]+ . Create a sphereClient as described here . After the sphereClient is set up, a ProductSyncOptions should be built as follows: // instantiating a ProductSyncOptions final ProductSyncOptions productSyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ). build ();","title":"Prerequisites"},{"location":"usage/PRODUCT_SYNC/#about-syncoptions","text":"SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:","title":"About SyncOptions"},{"location":"usage/PRODUCT_SYNC/#1-errorcallback","text":"A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception product draft from the source product of the target project (only provided if an existing product could be found) the update-actions, which failed (only provided if an existing product could be found)","title":"1. errorCallback"},{"location":"usage/PRODUCT_SYNC/#example","text":"final Logger logger = LoggerFactory . getLogger ( ProductSync . class ); final ProductSyncOptions productSyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , product , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/PRODUCT_SYNC/#2-warningcallback","text":"A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception product draft from the source product of the target project (only provided if an existing product could be found)","title":"2. warningCallback"},{"location":"usage/PRODUCT_SYNC/#example_1","text":"final Logger logger = LoggerFactory . getLogger ( ProductSync . class ); final ProductSyncOptions productSyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , product , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/PRODUCT_SYNC/#3-beforeupdatecallback","text":"During the sync process if a target product and a product draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : product draft from the source product from the target project update actions that were calculated after comparing both","title":"3. beforeUpdateCallback"},{"location":"usage/PRODUCT_SYNC/#example_2","text":"final TriFunction < List < UpdateAction < Product >> , ProductDraft , Product , List < UpdateAction < Product >>> beforeUpdateProductCallback = ( updateActions , newProductDraft , oldProduct ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof RemoveVariant )) . collect ( Collectors . toList ()); final ProductSyncOptions productSyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ). beforeUpdateCallback ( beforeUpdateProductCallback ). build ();","title":"Example"},{"location":"usage/PRODUCT_SYNC/#4-beforecreatecallback","text":"During the sync process if a product draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : product draft that should be created","title":"4. beforeCreateCallback"},{"location":"usage/PRODUCT_SYNC/#example-set-publish-stage-if-category-references-of-given-product-draft-exists","text":"final Function < ProductDraft , ProductDraft > beforeCreateProductCallback = ( callbackDraft ) -> { Set < ResourceIdentifier < Category >> categoryResourceIdentifier = callbackDraft . getCategories (); if ( categoryResourceIdentifier != null && ! categoryResourceIdentifier . isEmpty ()) { return ProductDraftBuilder . of ( callbackDraft ). isPublish ( true ). build (); } return callbackDraft ; }; final ProductSyncOptions productSyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ). beforeCreateCallback ( beforeCreateProductCallback ). build ();","title":"Example (Set publish stage if category references of given product draft exists)"},{"location":"usage/PRODUCT_SYNC/#5-batchsize","text":"A number that could be used to set the batch size with which products are fetched and processed, as products are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding products from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 30 for product sync.","title":"5. batchSize"},{"location":"usage/PRODUCT_SYNC/#example_3","text":"final ProductSyncOptions productSyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ). batchSize ( 50 ). build ();","title":"Example"},{"location":"usage/PRODUCT_SYNC/#6-syncfilter","text":"It represents either a blacklist or a whitelist for filtering certain update action groups. Blacklisting an update action group means that everything in products will be synced except for any group in the blacklist. A typical use case is to blacklist prices when syncing products. In other words, syncing everything in products except prices. final ProductSyncOptions syncOptions = syncOptionsBuilder . syncFilter ( ofBlackList ( ActionGroup . PRICES )). build (); Whitelisting an update action group means that the groups in this whitelist will be the only group synced in products. One use case could be to whitelist prices when syncing products. In other words, syncing prices only in products and nothing else. final ProductSyncOptions syncOptions = syncOptionsBuilder . syncFilter ( ofWhiteList ( ActionGroup . PRICES )). build (); The list of action groups allowed to be blacklisted or whitelisted on products can be found here .","title":"6. syncFilter"},{"location":"usage/PRODUCT_SYNC/#7-ensurechannels","text":"A flag to indicate whether the sync process should create price channel of the given key when it doesn't exist in a target project yet. - If ensureChannels is set to false this product won't be synced and the errorCallback will be triggered. - If ensureChannels is set to true the sync will attempt to create the missing channel with the given key. If it fails to create the price channel, the product won't sync and errorCallback will be triggered. - If not provided, it is set to false by default.","title":"7. ensureChannels"},{"location":"usage/PRODUCT_SYNC/#example_4","text":"final ProductSyncOptions productSyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ). ensureChannels ( true ). build ();","title":"Example"},{"location":"usage/PRODUCT_SYNC/#running-the-sync","text":"After all the aforementioned points in the previous section have been fulfilled, to run the sync: // instantiating a product sync final ProductSync productSync = new ProductSync ( productSyncOptions ); // execute the sync on your list of products CompletionStage < ProductSyncStatistics > syncStatisticsStage = productSync . sync ( productDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a ProductSyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed products and the processing time of the sync in different time units and in a human-readable format. final ProductSyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*Summary: 2000 product(s) were processed in total (1000 created, 995 updated, 5 failed to sync and 0 product(s) with missing reference(s)).*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied.","title":"Running the sync"},{"location":"usage/PRODUCT_SYNC/#persistence-of-productdrafts-with-irresolvable-references","text":"A productDraft X could be supplied in with an attribute referencing productDraft Y. It could be that Y is not supplied before X, which means the sync could fail creating/updating X. It could also be that Y is not supplied at all in this batch but at a later batch. The library keep tracks of such \"referencing\" drafts like X and persists them in storage ( Commercetools platform customObjects in the target project , in this case) to keep them and create/update them accordingly whenever the referenced drafts exist in the target project. The customObject will have a container: \"commercetools-sync-java.UnresolvedReferencesService.productDrafts\" and a key representing the key of the productDraft that is waiting to be created/updated. Here is an example of a CustomObject in the target project that represents a productDraft with productKey1 . It being persisted as CustomObject means that the referenced productDrafts with keys foo and bar do not exist yet. { \"id\" : \"d0fbb69e-76e7-4ec0-893e-3aaab6f4f6b6\" , \"version\" : 1 , \"container\" : \"commercetools-sync-java.UnresolvedReferencesService.productDrafts\" , \"key\" : \"productKey1\" , \"value\" : { \"dependantProductKeys\" : [ \"foo\" , \"bar\" ], \"productDraft\" : { \"productType\" : { \"typeId\" : \"product-type\" , \"id\" : \"main-product-type\" }, \"masterVariant\" : { \"id\" : 1 , \"sku\" : \"white-shirt-1\" , \"key\" : \"white-shirt-1\" , \"prices\" : [], \"images\" : [], \"attributes\" : [ { \"name\" : \"product-reference-set\" , \"value\" : [ { \"typeId\" : \"product\" , \"id\" : \"foo\" }, { \"typeId\" : \"product\" , \"id\" : \"bar\" } ] } ] }, \"key\" : \"productKey1\" } }, \"createdAt\" : \"2019-09-27T13:45:35.495Z\" , \"lastModifiedAt\" : \"2019-09-27T13:45:35.495Z\" , \"lastModifiedBy\" : { \"clientId\" : \"8bV3XSW-taCpi873-GQTa8lf\" , \"isPlatformClient\" : false }, \"createdBy\" : { \"clientId\" : \"8bV3XSW-taCpi873-GQTa8lf\" , \"isPlatformClient\" : false } } As soon, as the referenced productDrafts are supplied to the sync, the draft will be created/updated and the CustomObject will be removed from the target project.","title":"Persistence of ProductDrafts with Irresolvable References"},{"location":"usage/PRODUCT_SYNC/#more-examples-of-how-to-use-the-sync","text":"Sync from another commercetools project as a source . Sync from an external source . Sync with blacklisting/whitelisting . Make sure to read the Important Usage Tips for optimal performance.","title":"More examples of how to use the sync"},{"location":"usage/PRODUCT_SYNC/#build-all-update-actions","text":"A utility method provided by the library to compare a Product with a new ProductDraft and results in a list of product update actions. List < UpdateAction < Product >> updateActions = ProductSyncUtils . buildActions ( product , productDraft , productSyncOptions , attributesMetaData ); Examples of its usage can be found in the tests here .","title":"Build all update actions"},{"location":"usage/PRODUCT_SYNC/#build-particular-update-actions","text":"Utility methods provided by the library to compare the specific fields of a Product and a new ProductDraft, and in turn, build the update action. One example is the buildChangeNameUpdateAction which compares names: Optional < UpdateAction < Product >> updateAction = buildChangeNameUpdateAction ( oldProduct , productDraft ); More examples of those utils for different fields can be found here .","title":"Build particular update action(s)"},{"location":"usage/PRODUCT_SYNC/#caveats","text":"The commercetools-java-sync library has some exceptions to the data it can sync, particularly around product variant attributes. List of supported variant attributes, with a AttributeType : ReferenceType , that can be synced (See more: #87 ): referenceTypeId supported \u201ccart\u201d \u274c \u201ccategory\u201d \u2705 \u201cchannel\u201d \u274c \u201ccustomer\u201d \u274c \u201ckey-value-document\u201d \u2705 \u201corder\u201d \u274c \u201cproduct\u201d \u2705 \u201cproduct-type\u201d \u2705 \u201creview\u201d \u274c \u201cstate\u201d \u274c \u201cshipping-method\u201d \u274c \u201czone\u201d \u274c Support for syncing variant attributes with an AttributeType of SetType of ReferenceType (of elementType: ReferenceType ) with any of the aforementioned referenceTypeId , accordingly applies. Support for syncing variant attributes with an AttributeType of NestedType which has an attribute inside of it of ReferenceType with any of the aforementioned referenceTypeId , accordingly applies. Syncing products with cyclic dependencies is not supported yet. An example of a cyclic dependency is a product a which references a product b and at the same time product b references product a . Cycles can contain more than 2 products. For example: a -> b -> c -> a . If there are such cycles, the sync will consider all the products in the cycle as products with missing parents. They will be persisted as custom objects in the target project.","title":"Caveats"},{"location":"usage/PRODUCT_TYPE_SYNC/","text":"ProductType Sync \u00b6 Module used for importing/syncing ProductTypes into a commercetools project. It also provides utilities for generating update actions based on the comparison of a ProductType against a ProductTypeDraft . Usage Sync list of product type drafts Prerequisites About SyncOptions Running the sync Important to Note More examples of how to use the sync Build all update actions Build particular update action(s) Caveats Usage \u00b6 Sync list of product type drafts \u00b6 Prerequisites \u00b6 The sync expects a list of ProductTypeDraft s that have their key fields set to be matched with product types in the target CTP project. Also, the product types in the target project are expected to have the key fields set, otherwise they won't be matched. Every productType may have product type references if it contains attributeDrafts of type NestedType . These referenced are matched by their key s. Therefore, in order for the sync to resolve the actual ids of those references, those key s have to be supplied in the following way: Provide the key value on the id field of the reference. This means that calling getId() on the reference would return its key . Note : When syncing from a source commercetools project, you can use mapToProductTypeDrafts that replaces the references id fields with keys, in order to make them ready for reference resolution by the sync: // Puts the keys in the reference id fields to prepare for reference resolution final List < ProductTypeDraft > productTypeDrafts = ProductTypeReferenceResolutionUtils . mapToProductTypeDrafts ( productTypes ); Create a sphereClient as described here . After the sphereClient is setup, a ProductTypeSyncOptions should be built as follows: // instantiating a ProductTypeSyncOptions final ProductTypeSyncOptions productTypeSyncOptions = ProductTypeSyncOptionsBuilder . of ( sphereClient ). build (); About SyncOptions \u00b6 SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations: 1. errorCallback \u00b6 A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception product type draft from the source product type of the target project (only provided if an existing product type could be found) the update-actions, which failed (only provided if an existing product type could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( ProductTypeSync . class ); final ProductTypeSyncOptions productTypeSyncOptions = ProductTypeSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , productType , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build (); 2. warningCallback \u00b6 A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception product type draft from the source product type of the target project (only provided if an existing product type could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( ProductTypeSync . class ); final ProductTypeSyncOptions productTypeSyncOptions = ProductTypeSyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , productType , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build (); 3. beforeUpdateCallback \u00b6 During the sync process if a target product type and a product type draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : product type draft from the source product type from the target project update actions that were calculated after comparing both Example \u00b6 final TriFunction < List < UpdateAction < ProductType >> , ProductTypeDraft , ProductType , List < UpdateAction < ProductType >>> beforeUpdateProductTypeCallback = ( updateActions , newProductTypeDraft , oldProductType ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof RemoveAttributeDefinition )) . collect ( Collectors . toList ()); final ProductTypeSyncOptions productTypeSyncOptions = ProductTypeSyncOptionsBuilder . of ( sphereClient ). beforeUpdateCallback ( beforeUpdateProductTypeCallback ). build (); 4. beforeCreateCallback \u00b6 During the sync process if a product type draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : product type draft that should be created Please refer to example in product sync document . 5. batchSize \u00b6 A number that could be used to set the batch size with which product types are fetched and processed, as product types are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding product types from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for product type sync. Example \u00b6 final ProductTypeSyncOptions productTypeSyncOptions = ProductTypeSyncOptionsBuilder . of ( sphereClient ). batchSize ( 30 ). build (); Running the sync \u00b6 After all the aforementioned points in the previous section have been fulfilled, to run the sync: // instantiating a product type sync final ProductTypeSync productTypeSync = new ProductTypeSync ( productTypeSyncOptions ); // execute the sync on your list of product types CompletionStage < ProductTypeSyncStatistics > syncStatisticsStage = productTypeSync . sync ( productTypeDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a ProductTypeSyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed product types and the processing time of the last sync batch in different time units and in a human-readable format. final ProductTypeSyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*\"Summary: 2000 products types were processed in total (1000 created, 995 updated, 5 failed to sync).\"*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied. Important to Note \u00b6 If two matching attributeDefinition s (old and new) on the matching productType s (old and new) have a different AttributeType , the sync will remove the existing attributeDefinition and then add a new attributeDefinition with the new AttributeType . The attributeDefinition for which the AttributeType is not defined ( null ) will not be synced. More examples of how to use the sync \u00b6 Sync from another CTP project as a source . Sync from an external source . Make sure to read the Important Usage Tips for optimal performance. Build all update actions \u00b6 A utility method provided by the library to compare a ProductType with a new ProductTypeDraft and results in a list of product type update actions. List < UpdateAction < ProductType >> updateActions = ProductTypeSyncUtils . buildActions ( productType , productTypeDraft , productTypeSyncOptions ); Build particular update action(s) \u00b6 Utility methods provided by the library to compare the specific fields of a ProductType and a new ProductTypeDraft, and in turn, build the update action. One example is the buildChangeNameUpdateAction which compares names: Optional < UpdateAction < ProductType >> updateAction = ProductTypeUpdateActionUtils . buildChangeNameAction ( oldProductType , productTypeDraft ); More examples of those utils for different fields can be found here . Caveats \u00b6 The order of attribute definitions in the synced product types is not guaranteed. Syncing product types with an attribute of type Set of NestedType attribute is supported. However, Set of ( Set of Set of..) of NestedType is not yet supported.","title":"ProductType Sync"},{"location":"usage/PRODUCT_TYPE_SYNC/#producttype-sync","text":"Module used for importing/syncing ProductTypes into a commercetools project. It also provides utilities for generating update actions based on the comparison of a ProductType against a ProductTypeDraft . Usage Sync list of product type drafts Prerequisites About SyncOptions Running the sync Important to Note More examples of how to use the sync Build all update actions Build particular update action(s) Caveats","title":"ProductType Sync"},{"location":"usage/PRODUCT_TYPE_SYNC/#usage","text":"","title":"Usage"},{"location":"usage/PRODUCT_TYPE_SYNC/#sync-list-of-product-type-drafts","text":"","title":"Sync list of product type drafts"},{"location":"usage/PRODUCT_TYPE_SYNC/#prerequisites","text":"The sync expects a list of ProductTypeDraft s that have their key fields set to be matched with product types in the target CTP project. Also, the product types in the target project are expected to have the key fields set, otherwise they won't be matched. Every productType may have product type references if it contains attributeDrafts of type NestedType . These referenced are matched by their key s. Therefore, in order for the sync to resolve the actual ids of those references, those key s have to be supplied in the following way: Provide the key value on the id field of the reference. This means that calling getId() on the reference would return its key . Note : When syncing from a source commercetools project, you can use mapToProductTypeDrafts that replaces the references id fields with keys, in order to make them ready for reference resolution by the sync: // Puts the keys in the reference id fields to prepare for reference resolution final List < ProductTypeDraft > productTypeDrafts = ProductTypeReferenceResolutionUtils . mapToProductTypeDrafts ( productTypes ); Create a sphereClient as described here . After the sphereClient is setup, a ProductTypeSyncOptions should be built as follows: // instantiating a ProductTypeSyncOptions final ProductTypeSyncOptions productTypeSyncOptions = ProductTypeSyncOptionsBuilder . of ( sphereClient ). build ();","title":"Prerequisites"},{"location":"usage/PRODUCT_TYPE_SYNC/#about-syncoptions","text":"SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:","title":"About SyncOptions"},{"location":"usage/PRODUCT_TYPE_SYNC/#1-errorcallback","text":"A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception product type draft from the source product type of the target project (only provided if an existing product type could be found) the update-actions, which failed (only provided if an existing product type could be found)","title":"1. errorCallback"},{"location":"usage/PRODUCT_TYPE_SYNC/#example","text":"final Logger logger = LoggerFactory . getLogger ( ProductTypeSync . class ); final ProductTypeSyncOptions productTypeSyncOptions = ProductTypeSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , productType , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/PRODUCT_TYPE_SYNC/#2-warningcallback","text":"A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception product type draft from the source product type of the target project (only provided if an existing product type could be found)","title":"2. warningCallback"},{"location":"usage/PRODUCT_TYPE_SYNC/#example_1","text":"final Logger logger = LoggerFactory . getLogger ( ProductTypeSync . class ); final ProductTypeSyncOptions productTypeSyncOptions = ProductTypeSyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , productType , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/PRODUCT_TYPE_SYNC/#3-beforeupdatecallback","text":"During the sync process if a target product type and a product type draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : product type draft from the source product type from the target project update actions that were calculated after comparing both","title":"3. beforeUpdateCallback"},{"location":"usage/PRODUCT_TYPE_SYNC/#example_2","text":"final TriFunction < List < UpdateAction < ProductType >> , ProductTypeDraft , ProductType , List < UpdateAction < ProductType >>> beforeUpdateProductTypeCallback = ( updateActions , newProductTypeDraft , oldProductType ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof RemoveAttributeDefinition )) . collect ( Collectors . toList ()); final ProductTypeSyncOptions productTypeSyncOptions = ProductTypeSyncOptionsBuilder . of ( sphereClient ). beforeUpdateCallback ( beforeUpdateProductTypeCallback ). build ();","title":"Example"},{"location":"usage/PRODUCT_TYPE_SYNC/#4-beforecreatecallback","text":"During the sync process if a product type draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : product type draft that should be created Please refer to example in product sync document .","title":"4. beforeCreateCallback"},{"location":"usage/PRODUCT_TYPE_SYNC/#5-batchsize","text":"A number that could be used to set the batch size with which product types are fetched and processed, as product types are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding product types from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for product type sync.","title":"5. batchSize"},{"location":"usage/PRODUCT_TYPE_SYNC/#example_3","text":"final ProductTypeSyncOptions productTypeSyncOptions = ProductTypeSyncOptionsBuilder . of ( sphereClient ). batchSize ( 30 ). build ();","title":"Example"},{"location":"usage/PRODUCT_TYPE_SYNC/#running-the-sync","text":"After all the aforementioned points in the previous section have been fulfilled, to run the sync: // instantiating a product type sync final ProductTypeSync productTypeSync = new ProductTypeSync ( productTypeSyncOptions ); // execute the sync on your list of product types CompletionStage < ProductTypeSyncStatistics > syncStatisticsStage = productTypeSync . sync ( productTypeDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a ProductTypeSyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed product types and the processing time of the last sync batch in different time units and in a human-readable format. final ProductTypeSyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*\"Summary: 2000 products types were processed in total (1000 created, 995 updated, 5 failed to sync).\"*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied.","title":"Running the sync"},{"location":"usage/PRODUCT_TYPE_SYNC/#important-to-note","text":"If two matching attributeDefinition s (old and new) on the matching productType s (old and new) have a different AttributeType , the sync will remove the existing attributeDefinition and then add a new attributeDefinition with the new AttributeType . The attributeDefinition for which the AttributeType is not defined ( null ) will not be synced.","title":"Important to Note"},{"location":"usage/PRODUCT_TYPE_SYNC/#more-examples-of-how-to-use-the-sync","text":"Sync from another CTP project as a source . Sync from an external source . Make sure to read the Important Usage Tips for optimal performance.","title":"More examples of how to use the sync"},{"location":"usage/PRODUCT_TYPE_SYNC/#build-all-update-actions","text":"A utility method provided by the library to compare a ProductType with a new ProductTypeDraft and results in a list of product type update actions. List < UpdateAction < ProductType >> updateActions = ProductTypeSyncUtils . buildActions ( productType , productTypeDraft , productTypeSyncOptions );","title":"Build all update actions"},{"location":"usage/PRODUCT_TYPE_SYNC/#build-particular-update-actions","text":"Utility methods provided by the library to compare the specific fields of a ProductType and a new ProductTypeDraft, and in turn, build the update action. One example is the buildChangeNameUpdateAction which compares names: Optional < UpdateAction < ProductType >> updateAction = ProductTypeUpdateActionUtils . buildChangeNameAction ( oldProductType , productTypeDraft ); More examples of those utils for different fields can be found here .","title":"Build particular update action(s)"},{"location":"usage/PRODUCT_TYPE_SYNC/#caveats","text":"The order of attribute definitions in the synced product types is not guaranteed. Syncing product types with an attribute of type Set of NestedType attribute is supported. However, Set of ( Set of Set of..) of NestedType is not yet supported.","title":"Caveats"},{"location":"usage/QUICK_START/","text":"\u26a1 Quick Start \u00b6 1. Installation 2. Setup Syncing Options 3. Start Syncing 4. And you're done \u2728 1. Installation \u00b6 Make sure you have JDK 8 installed. Add the following dependencies in your application: For Maven users: <!-- Add commercetools-jvm-sdk dependencies. --> <dependency> <groupId> com.commercetools.sdk.jvm.core </groupId> <artifactId> commercetools-models </artifactId> <version> 1.53.0 </version> </dependency> <dependency> <groupId> com.commercetools.sdk.jvm.core </groupId> <artifactId> commercetools-java-client </artifactId> <version> 1.53.0 </version> </dependency> <dependency> <groupId> com.commercetools.sdk.jvm.core </groupId> <artifactId> commercetools-convenience </artifactId> <version> 1.53.0 </version> </dependency> <!-- Add commercetools-sync-java dependency. --> <dependency> <groupId> com.commercetools </groupId> <artifactId> commercetools-sync-java </artifactId> <version> 2.3.0 </version> </dependency> For Gradle users: // Add commercetools-jvm-sdk dependencies. implementation 'com.commercetools.sdk.jvm.core:commercetools-models:1.53.0' implementation 'com.commercetools.sdk.jvm.core:commercetools-java-client:1.53.0' implementation 'com.commercetools.sdk.jvm.core:commercetools-convenience:1.53.0' // Add commercetools-sync-java dependency. implementation 'com.commercetools:commercetools-sync-java:2.3.0' 2. Setup Syncing Options \u00b6 final Logger logger = LoggerFactory . getLogger ( MySync . class ); final ProductSyncOptions productsyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , product , updateActions ) -> logger . error ( syncException . getMessage (), syncException )) . warningCallback (( exception , oldResource , newResources ) -> logger . warn ( exception . getMessage (), exception )) . build (); 3. Start Syncing \u00b6 // Transform your product feed batch into a list of ProductDrafts using your preferred way. final List < ProductDraft > productDraftsBatch = ... final ProductSync productSync = new ProductSync ( productSyncOptions ); // execute the sync on your list of products final CompletionStage < ProductSyncStatistics > syncStatisticsStage = productSync . sync ( productDraftsBatch ); 4. And you're done \u2728 \u00b6 final ProductSyncStatistics stats = syncStatisticsStage . toCompletebleFuture () . join (); stats . getReportMessage (); /*\"Summary: 2000 product(s) were processed in total (1000 created, 995 updated, 5 failed to sync and 0 product(s) with missing reference(s)).\"*/ More Details \u00b6 Product Sync , ProductType Sync , Category Sync , Inventory Sync , Type Sync , CartDiscount Sync , TaxCategory Sync , State Sync , CustomObject Sync","title":"Quick Start"},{"location":"usage/QUICK_START/#quick-start","text":"1. Installation 2. Setup Syncing Options 3. Start Syncing 4. And you're done \u2728","title":"\u26a1 Quick Start"},{"location":"usage/QUICK_START/#1-installation","text":"Make sure you have JDK 8 installed. Add the following dependencies in your application: For Maven users: <!-- Add commercetools-jvm-sdk dependencies. --> <dependency> <groupId> com.commercetools.sdk.jvm.core </groupId> <artifactId> commercetools-models </artifactId> <version> 1.53.0 </version> </dependency> <dependency> <groupId> com.commercetools.sdk.jvm.core </groupId> <artifactId> commercetools-java-client </artifactId> <version> 1.53.0 </version> </dependency> <dependency> <groupId> com.commercetools.sdk.jvm.core </groupId> <artifactId> commercetools-convenience </artifactId> <version> 1.53.0 </version> </dependency> <!-- Add commercetools-sync-java dependency. --> <dependency> <groupId> com.commercetools </groupId> <artifactId> commercetools-sync-java </artifactId> <version> 2.3.0 </version> </dependency> For Gradle users: // Add commercetools-jvm-sdk dependencies. implementation 'com.commercetools.sdk.jvm.core:commercetools-models:1.53.0' implementation 'com.commercetools.sdk.jvm.core:commercetools-java-client:1.53.0' implementation 'com.commercetools.sdk.jvm.core:commercetools-convenience:1.53.0' // Add commercetools-sync-java dependency. implementation 'com.commercetools:commercetools-sync-java:2.3.0'","title":"1. Installation"},{"location":"usage/QUICK_START/#2-setup-syncing-options","text":"final Logger logger = LoggerFactory . getLogger ( MySync . class ); final ProductSyncOptions productsyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , product , updateActions ) -> logger . error ( syncException . getMessage (), syncException )) . warningCallback (( exception , oldResource , newResources ) -> logger . warn ( exception . getMessage (), exception )) . build ();","title":"2. Setup Syncing Options"},{"location":"usage/QUICK_START/#3-start-syncing","text":"// Transform your product feed batch into a list of ProductDrafts using your preferred way. final List < ProductDraft > productDraftsBatch = ... final ProductSync productSync = new ProductSync ( productSyncOptions ); // execute the sync on your list of products final CompletionStage < ProductSyncStatistics > syncStatisticsStage = productSync . sync ( productDraftsBatch );","title":"3. Start Syncing"},{"location":"usage/QUICK_START/#4-and-youre-done","text":"final ProductSyncStatistics stats = syncStatisticsStage . toCompletebleFuture () . join (); stats . getReportMessage (); /*\"Summary: 2000 product(s) were processed in total (1000 created, 995 updated, 5 failed to sync and 0 product(s) with missing reference(s)).\"*/","title":"4. And you're done \u2728"},{"location":"usage/QUICK_START/#more-details","text":"Product Sync , ProductType Sync , Category Sync , Inventory Sync , Type Sync , CartDiscount Sync , TaxCategory Sync , State Sync , CustomObject Sync","title":"More Details"},{"location":"usage/STATE_SYNC/","text":"State Sync \u00b6 Module used for importing/syncing States into a commercetools project. It also provides utilities for generating update actions based on the comparison a State (which basically represents what commercetools already has) against a StateDraft (which represents a new version of the state supplied by the user). Usage Sync list of State drafts Prerequisites About SyncOptions Running the sync Persistence of StateDrafts with missing references More examples of how to use the sync Build all update actions Build particular update action(s) Usage \u00b6 Sync list of State drafts \u00b6 Prerequisites \u00b6 The sync expects a list of StateDraft s that have their key fields set to be matched with states in the target commercetools project. Also, the states in the target project are expected to have the key fields set, otherwise they won't be matched. Every state may have several transitions to other states. Therefore, in order for the sync to resolve the actual ids of those transitions, those key s have to be supplied in the following way: Provide the key value on the id field of the transition. This means that calling getId() on the transition would return its key . Note : When syncing from a source commercetools project, you can use this util which this library provides: mapToStateDrafts that replaces the references id fields with keys, in order to make them ready for reference resolution by the sync: // Puts the keys in the reference id fields to prepare for reference resolution final List < StateDraft > stateDrafts = StateReferenceResolutionUtils . mapToStateDrafts ( states ); Create a sphereClient as described here . After the sphereClient is set up, a StateSyncOptions should be built as follows: // instantiating a StateSyncOptions final StateSyncOptions stateSyncOptions = StateSyncOptionsBuilder . of ( sphereClient ). build (); About SyncOptions \u00b6 SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations: 1. errorCallback \u00b6 A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception state draft from the source state of the target project (only provided if an existing state could be found) the update-actions, which failed (only provided if an existing state could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( StateSync . class ); final StateSyncOptions stateSyncOptions = StateSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , state , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build (); 2. warningCallback \u00b6 A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception state draft from the source state of the target project (only provided if an existing state could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( StateSync . class ); final StateSyncOptions stateSyncOptions = StateSyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , state , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build (); 3. beforeUpdateCallback \u00b6 During the sync process if a target state and a state draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : state draft from the source state from the target project update actions that were calculated after comparing both Example \u00b6 final TriFunction < List < UpdateAction < State >> , StateDraft , State , List < UpdateAction < State >>> beforeUpdateStateCallback = ( updateActions , newStateDraft , oldState ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof RemoveRoles )) . collect ( Collectors . toList ()); final StateSyncOptions stateSyncOptions = StateSyncOptionsBuilder . of ( sphereClient ). beforeUpdateCallback ( beforeUpdateStateCallback ). build (); 4. beforeCreateCallback \u00b6 During the sync process if a state draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : state draft that should be created Please refer to example in product sync document . 5. batchSize \u00b6 A number that could be used to set the batch size with which states are fetched and processed, as states are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding states from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for state sync. Example \u00b6 final StateSyncOptions stateSyncOptions = StateSyncOptionsBuilder . of ( sphereClient ). batchSize ( 30 ). build (); Running the sync \u00b6 After all the aforementioned points in the previous section have been fulfilled, run the sync as follows: // instantiating a State sync final StateSync stateSync = new StateSync ( stateSyncOptions ); // execute the sync on your list of StateDraft final CompletionStage < StateSyncStatistics > stateSyncStatisticsStage = stateSync . sync ( stateDrafts ); The result of the completing the StateSyncStatistics in the previous code snippet contains a StateSyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed states, the missing parent of transitions and the processing time of the sync in different time units and in a human-readable format. final StateSyncStatistics stats = stateSyncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); // Summary: 3 state(s) were processed in total (3 created, 0 updated, 0 failed to sync and 0 state(s) with missing transition(s). Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied. Persistence of StateDrafts with missing references \u00b6 A StateDraft (state-A) could be supplied in with a transition referencing StateDraft (state-B). It could be that (state-B) is not supplied before (state-A), which means the sync could fail creating/updating (state-A). It could also be that (state-B) is not supplied at all in this batch but at a later batch. The library keep tracks of such \"referencing\" states like (state-A) and persists them in storage ( commercetools customObjects in the target project , in this case) to keep them and create/update them accordingly whenever the referenced state has been provided at some point. The customObject will have a container: \"commercetools-sync-java.UnresolvedTransitionsService.stateDrafts\" and a key representing a hash value of the StateDraft key that is waiting to be created/updated. Here is an example of a CustomObject in the target project that represents a StateDraft with key state-A . It being persisted as CustomObject means that the referenced StateDrafts with keys state-B do not exist yet. { \"container\" : \"commercetools-sync-java.UnresolvedTransitionsService.stateDrafts\" , \"key\" : \"518ea82bb78755c0cdd67909dd3206d56186f7e5\" , \"value\" : { \"missingTransitionStateKeys\" : [ \"state-B\" ], \"stateDraft\" : { \"type\" : \"ReviewState\" , \"transitions\" : [ { \"id\" : \"state-B\" , \"typeId\" : \"state\" } ], \"roles\" : [ \"ReviewIncludedInStatistics\" ], \"key\" : \"state-A\" , \"initial\" : true } } } As soon, as the referenced StateDrafts are supplied to the sync, the draft will be created/updated and the CustomObject will be removed from the target project. More examples of how to use the sync \u00b6 Sync usages . Make sure to read the Important Usage Tips for optimal performance. Build all update actions \u00b6 A utility method provided by the library to compare a State with a new StateDraft and results in a list of state update actions. update actions. List < UpdateAction < State >> updateActions = StateSyncUtils . buildActions ( state , stateDraft , stateSyncOptions ); Build particular update action(s) \u00b6 Utility methods provided by the library to compare the specific fields of a State and a new StateDraft , and in turn builds the update action. One example is the buildSetNameAction which compares names: Optional < UpdateAction < State >> updateAction = StateUpdateActionUtils . buildSetNameAction ( oldState , stateDraft ); More examples of those utils for different types can be found here .","title":"State Sync"},{"location":"usage/STATE_SYNC/#state-sync","text":"Module used for importing/syncing States into a commercetools project. It also provides utilities for generating update actions based on the comparison a State (which basically represents what commercetools already has) against a StateDraft (which represents a new version of the state supplied by the user). Usage Sync list of State drafts Prerequisites About SyncOptions Running the sync Persistence of StateDrafts with missing references More examples of how to use the sync Build all update actions Build particular update action(s)","title":"State Sync"},{"location":"usage/STATE_SYNC/#usage","text":"","title":"Usage"},{"location":"usage/STATE_SYNC/#sync-list-of-state-drafts","text":"","title":"Sync list of State drafts"},{"location":"usage/STATE_SYNC/#prerequisites","text":"The sync expects a list of StateDraft s that have their key fields set to be matched with states in the target commercetools project. Also, the states in the target project are expected to have the key fields set, otherwise they won't be matched. Every state may have several transitions to other states. Therefore, in order for the sync to resolve the actual ids of those transitions, those key s have to be supplied in the following way: Provide the key value on the id field of the transition. This means that calling getId() on the transition would return its key . Note : When syncing from a source commercetools project, you can use this util which this library provides: mapToStateDrafts that replaces the references id fields with keys, in order to make them ready for reference resolution by the sync: // Puts the keys in the reference id fields to prepare for reference resolution final List < StateDraft > stateDrafts = StateReferenceResolutionUtils . mapToStateDrafts ( states ); Create a sphereClient as described here . After the sphereClient is set up, a StateSyncOptions should be built as follows: // instantiating a StateSyncOptions final StateSyncOptions stateSyncOptions = StateSyncOptionsBuilder . of ( sphereClient ). build ();","title":"Prerequisites"},{"location":"usage/STATE_SYNC/#about-syncoptions","text":"SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:","title":"About SyncOptions"},{"location":"usage/STATE_SYNC/#1-errorcallback","text":"A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception state draft from the source state of the target project (only provided if an existing state could be found) the update-actions, which failed (only provided if an existing state could be found)","title":"1. errorCallback"},{"location":"usage/STATE_SYNC/#example","text":"final Logger logger = LoggerFactory . getLogger ( StateSync . class ); final StateSyncOptions stateSyncOptions = StateSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , state , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/STATE_SYNC/#2-warningcallback","text":"A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception state draft from the source state of the target project (only provided if an existing state could be found)","title":"2. warningCallback"},{"location":"usage/STATE_SYNC/#example_1","text":"final Logger logger = LoggerFactory . getLogger ( StateSync . class ); final StateSyncOptions stateSyncOptions = StateSyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , state , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/STATE_SYNC/#3-beforeupdatecallback","text":"During the sync process if a target state and a state draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : state draft from the source state from the target project update actions that were calculated after comparing both","title":"3. beforeUpdateCallback"},{"location":"usage/STATE_SYNC/#example_2","text":"final TriFunction < List < UpdateAction < State >> , StateDraft , State , List < UpdateAction < State >>> beforeUpdateStateCallback = ( updateActions , newStateDraft , oldState ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof RemoveRoles )) . collect ( Collectors . toList ()); final StateSyncOptions stateSyncOptions = StateSyncOptionsBuilder . of ( sphereClient ). beforeUpdateCallback ( beforeUpdateStateCallback ). build ();","title":"Example"},{"location":"usage/STATE_SYNC/#4-beforecreatecallback","text":"During the sync process if a state draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : state draft that should be created Please refer to example in product sync document .","title":"4. beforeCreateCallback"},{"location":"usage/STATE_SYNC/#5-batchsize","text":"A number that could be used to set the batch size with which states are fetched and processed, as states are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding states from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for state sync.","title":"5. batchSize"},{"location":"usage/STATE_SYNC/#example_3","text":"final StateSyncOptions stateSyncOptions = StateSyncOptionsBuilder . of ( sphereClient ). batchSize ( 30 ). build ();","title":"Example"},{"location":"usage/STATE_SYNC/#running-the-sync","text":"After all the aforementioned points in the previous section have been fulfilled, run the sync as follows: // instantiating a State sync final StateSync stateSync = new StateSync ( stateSyncOptions ); // execute the sync on your list of StateDraft final CompletionStage < StateSyncStatistics > stateSyncStatisticsStage = stateSync . sync ( stateDrafts ); The result of the completing the StateSyncStatistics in the previous code snippet contains a StateSyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed states, the missing parent of transitions and the processing time of the sync in different time units and in a human-readable format. final StateSyncStatistics stats = stateSyncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); // Summary: 3 state(s) were processed in total (3 created, 0 updated, 0 failed to sync and 0 state(s) with missing transition(s). Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied.","title":"Running the sync"},{"location":"usage/STATE_SYNC/#persistence-of-statedrafts-with-missing-references","text":"A StateDraft (state-A) could be supplied in with a transition referencing StateDraft (state-B). It could be that (state-B) is not supplied before (state-A), which means the sync could fail creating/updating (state-A). It could also be that (state-B) is not supplied at all in this batch but at a later batch. The library keep tracks of such \"referencing\" states like (state-A) and persists them in storage ( commercetools customObjects in the target project , in this case) to keep them and create/update them accordingly whenever the referenced state has been provided at some point. The customObject will have a container: \"commercetools-sync-java.UnresolvedTransitionsService.stateDrafts\" and a key representing a hash value of the StateDraft key that is waiting to be created/updated. Here is an example of a CustomObject in the target project that represents a StateDraft with key state-A . It being persisted as CustomObject means that the referenced StateDrafts with keys state-B do not exist yet. { \"container\" : \"commercetools-sync-java.UnresolvedTransitionsService.stateDrafts\" , \"key\" : \"518ea82bb78755c0cdd67909dd3206d56186f7e5\" , \"value\" : { \"missingTransitionStateKeys\" : [ \"state-B\" ], \"stateDraft\" : { \"type\" : \"ReviewState\" , \"transitions\" : [ { \"id\" : \"state-B\" , \"typeId\" : \"state\" } ], \"roles\" : [ \"ReviewIncludedInStatistics\" ], \"key\" : \"state-A\" , \"initial\" : true } } } As soon, as the referenced StateDrafts are supplied to the sync, the draft will be created/updated and the CustomObject will be removed from the target project.","title":"Persistence of StateDrafts with missing references"},{"location":"usage/STATE_SYNC/#more-examples-of-how-to-use-the-sync","text":"Sync usages . Make sure to read the Important Usage Tips for optimal performance.","title":"More examples of how to use the sync"},{"location":"usage/STATE_SYNC/#build-all-update-actions","text":"A utility method provided by the library to compare a State with a new StateDraft and results in a list of state update actions. update actions. List < UpdateAction < State >> updateActions = StateSyncUtils . buildActions ( state , stateDraft , stateSyncOptions );","title":"Build all update actions"},{"location":"usage/STATE_SYNC/#build-particular-update-actions","text":"Utility methods provided by the library to compare the specific fields of a State and a new StateDraft , and in turn builds the update action. One example is the buildSetNameAction which compares names: Optional < UpdateAction < State >> updateAction = StateUpdateActionUtils . buildSetNameAction ( oldState , stateDraft ); More examples of those utils for different types can be found here .","title":"Build particular update action(s)"},{"location":"usage/SYNC_OPTIONS/","text":"Sync Options \u00b6 errorCallback \u00b6 a callback that is called whenever an error event occurs during the sync process. It contains the follow information about the error-event: sync exception the resource draft of the source project the resource of the target project the update-actions, which failed warningCallback \u00b6 a callback that is called whenever a warning event occurs during the sync process. It contains the follow information about the warning message: sync exception the resource draft of the source project the resource of the target project beforeUpdateCallback \u00b6 during the sync process if a target resource and a resource draft are matched, this callback can be used to intercept the update request just before it is sent to CTP. It contains information about the resource draft, the target resource and the update actions that were calculated after comparing both. beforeCreateCallback \u00b6 during the sync process if a resource draft should be created, this callback can be used to intercept the create request just before it sent to CTP. It contains information about the resource draft that should be created. batchSize \u00b6 a number that could be used to set the batch size with which resources are fetched and processed, as resources are obtained from the target CTP project in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding resources from the target CTP project in a single request. Playing with this option can slightly improve or reduce processing speed. syncFilter (Only for Product Sync Options) \u00b6 represents either a blacklist or a whitelist for filtering certain update action groups. Blacklisting an update action group means that everything in products will be synced except for any group in the blacklist. A typical use case is to blacklist prices when syncing products. In other words, syncing everything in products except prices. Whitelisting an update action group means that the groups in this whitelist will be the only group synced in products. One use case could be to whitelist prices when syncing products. In other words, syncing prices only in products and nothing else. The list of action groups allowed to be blacklisted or whitelisted on products can be found here . ensureChannels (Only for Product and Inventory Sync Options) \u00b6 a flag which represents a strategy to handle syncing inventory entries with missing channels. Having an inventory entry or a product, with a missing channel reference, could be processed in either of the following ways: - If ensureChannels is set to false this inventory entry/product won't be synced and the errorCallback will be triggered. - If ensureChannels is set to true the sync will attempt to create the missing channel with the given key. If it fails to create the supply channel, the inventory entry/product won't sync and errorCallback will be triggered. - If not provided, it is set to false by default. Examples \u00b6 1. Using errorCallback and warningCallback for logging \u00b6 final Logger logger = LoggerFactory . getLogger ( MySync . class ); final ProductSyncOptions productsyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , product , updateActions ) -> logger . error ( syncException . getMessage (), syncException )) . warningCallback (( exception , oldResource , newResources ) -> logger . warn ( exception . getMessage (), exception )) . build (); 2. Using beforeUpdateCallback for syncing a single locale . \u00b6 3. Using beforeUpdateCallback for keeping other variants . \u00b6 4. Using syncFilter for blacklisting product categories while syncing products . \u00b6 5. Using syncFilter for whitelisting product names while syncing products . \u00b6","title":"Sync Options"},{"location":"usage/SYNC_OPTIONS/#sync-options","text":"","title":"Sync Options"},{"location":"usage/SYNC_OPTIONS/#errorcallback","text":"a callback that is called whenever an error event occurs during the sync process. It contains the follow information about the error-event: sync exception the resource draft of the source project the resource of the target project the update-actions, which failed","title":"errorCallback"},{"location":"usage/SYNC_OPTIONS/#warningcallback","text":"a callback that is called whenever a warning event occurs during the sync process. It contains the follow information about the warning message: sync exception the resource draft of the source project the resource of the target project","title":"warningCallback"},{"location":"usage/SYNC_OPTIONS/#beforeupdatecallback","text":"during the sync process if a target resource and a resource draft are matched, this callback can be used to intercept the update request just before it is sent to CTP. It contains information about the resource draft, the target resource and the update actions that were calculated after comparing both.","title":"beforeUpdateCallback"},{"location":"usage/SYNC_OPTIONS/#beforecreatecallback","text":"during the sync process if a resource draft should be created, this callback can be used to intercept the create request just before it sent to CTP. It contains information about the resource draft that should be created.","title":"beforeCreateCallback"},{"location":"usage/SYNC_OPTIONS/#batchsize","text":"a number that could be used to set the batch size with which resources are fetched and processed, as resources are obtained from the target CTP project in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding resources from the target CTP project in a single request. Playing with this option can slightly improve or reduce processing speed.","title":"batchSize"},{"location":"usage/SYNC_OPTIONS/#syncfilter-only-for-product-sync-options","text":"represents either a blacklist or a whitelist for filtering certain update action groups. Blacklisting an update action group means that everything in products will be synced except for any group in the blacklist. A typical use case is to blacklist prices when syncing products. In other words, syncing everything in products except prices. Whitelisting an update action group means that the groups in this whitelist will be the only group synced in products. One use case could be to whitelist prices when syncing products. In other words, syncing prices only in products and nothing else. The list of action groups allowed to be blacklisted or whitelisted on products can be found here .","title":"syncFilter (Only for Product Sync Options)"},{"location":"usage/SYNC_OPTIONS/#ensurechannels-only-for-product-and-inventory-sync-options","text":"a flag which represents a strategy to handle syncing inventory entries with missing channels. Having an inventory entry or a product, with a missing channel reference, could be processed in either of the following ways: - If ensureChannels is set to false this inventory entry/product won't be synced and the errorCallback will be triggered. - If ensureChannels is set to true the sync will attempt to create the missing channel with the given key. If it fails to create the supply channel, the inventory entry/product won't sync and errorCallback will be triggered. - If not provided, it is set to false by default.","title":"ensureChannels (Only for Product and Inventory Sync Options)"},{"location":"usage/SYNC_OPTIONS/#examples","text":"","title":"Examples"},{"location":"usage/SYNC_OPTIONS/#1-using-errorcallback-and-warningcallback-for-logging","text":"final Logger logger = LoggerFactory . getLogger ( MySync . class ); final ProductSyncOptions productsyncOptions = ProductSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , product , updateActions ) -> logger . error ( syncException . getMessage (), syncException )) . warningCallback (( exception , oldResource , newResources ) -> logger . warn ( exception . getMessage (), exception )) . build ();","title":"1. Using errorCallback and warningCallback for logging"},{"location":"usage/SYNC_OPTIONS/#2-using-beforeupdatecallback-for-syncing-a-single-locale","text":"","title":"2. Using beforeUpdateCallback for syncing a single locale."},{"location":"usage/SYNC_OPTIONS/#3-using-beforeupdatecallback-for-keeping-other-variants","text":"","title":"3. Using beforeUpdateCallback for keeping other variants."},{"location":"usage/SYNC_OPTIONS/#4-using-syncfilter-for-blacklisting-product-categories-while-syncing-products","text":"","title":"4. Using syncFilter for blacklisting product categories while syncing products."},{"location":"usage/SYNC_OPTIONS/#5-using-syncfilter-for-whitelisting-product-names-while-syncing-products","text":"","title":"5. Using syncFilter for whitelisting product names while syncing products."},{"location":"usage/TAX_CATEGORY_SYNC/","text":"Tax Category Sync \u00b6 Allows importing/syncing TaxCategory into a commercetools project. It also provides utilities for generating update actions based on the comparison of a TaxCategory against a TaxCategoryDraft . Usage Sync list of TaxCategoryDrafts Prerequisites About SyncOptions Running the sync More examples of how to use the sync Build all update actions Build particular update action(s) Usage \u00b6 Sync list of TaxCategoryDrafts \u00b6 Prerequisites \u00b6 The sync expects a list of TaxCategoryDraft s that have their key fields set to be matched with tax categories in the target CTP project. Also, the tax categories in the target project are expected to have the key fields set, otherwise they won't be matched. Create a sphereClient as described here . After the sphereClient is set up, a TaxCategorySyncOptions should be be built as follows: // instantiating a TaxCategorySyncOptions final TaxCategorySyncOptions taxCategorySyncOptions = TaxCategorySyncOptionsBuilder . of ( sphereClient ). build (); About SyncOptions \u00b6 SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations: 1. errorCallback \u00b6 A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception tax category draft from the source tax category of the target project (only provided if an existing tax category could be found) the update-actions, which failed (only provided if an existing tax category could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( TaxCategorySync . class ); final TaxCategorySyncOptions taxCategorySyncOptions = TaxCategorySyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , taxCategory , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build (); 2. warningCallback \u00b6 A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception tax category draft from the source tax category of the target project (only provided if an existing tax category could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( TaxCategorySync . class ); final TaxCategorySyncOptions taxCategorySyncOptions = TaxCategorySyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , taxCategory , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build (); 3. beforeUpdateCallback \u00b6 During the sync process if a target tax category and a tax category draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : tax category draft from the source tax category from the target project update actions that were calculated after comparing both Example \u00b6 final TriFunction < List < UpdateAction < TaxCategory >> , TaxCategoryDraft , TaxCategory , List < UpdateAction < TaxCategory >>> beforeUpdateTaxCategoryCallback = ( updateActions , newTaxCategoryDraft , oldTaxCategory ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof RemoveTaxRate )) . collect ( Collectors . toList ()); final TaxCategorySyncOptions taxCategorySyncOptions = TaxCategorySyncOptionsBuilder . of ( sphereClient ). beforeUpdateCallback ( beforeUpdateTaxCategoryCallback ). build (); 4. beforeCreateCallback \u00b6 During the sync process if a type draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : tax category draft that should be created Please refer to example in product sync document . 5. batchSize \u00b6 A number that could be used to set the batch size with which tax categories are fetched and processed, as tax categories are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding tax categories from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for tax category sync. Example \u00b6 final TypeSyncOptions typeSyncOptions = TypeSyncOptionsBuilder . of ( sphereClient ). batchSize ( 30 ). build (); Running the sync \u00b6 After all the aforementioned points in the previous section have been fulfilled, to run the sync: // instantiating a TaxCategorySync final TaxCategorySync taxCategorySync = new TaxCategorySync ( taxCategorySyncOptions ); // execute the sync on your list of tax categories CompletionStage < TaxCategorySyncStatistics > syncStatisticsStage = taxCategorySync . sync ( taxCategoryDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a TaxCategorySyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed tax categories and the processing time of the last sync batch in different time units and in a human-readable format. final TaxCategorySyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*\"Summary: 2000 tax categories were processed in total (1000 created, 995 updated, 5 failed to sync).\"*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied. More examples of how to use the sync \u00b6 Sync from an external source . Make sure to read the Important Usage Tips for optimal performance. Build all update actions \u00b6 A utility method provided by the library to compare a TaxCategory with a new TaxCategoryDraft and results in a list of tax category update actions. List < UpdateAction < TaxCategory >> updateActions = TaxCategorySyncUtils . buildActions ( taxCategory , taxCategoryDraft , taxCategorySyncOptions ); Build particular update action(s) \u00b6 Utility methods provided by the library to compare the specific fields of a TaxCategory and a new TaxCategoryDraft , and in turn builds the update action. One example is the buildChangeNameUpdateAction which compares names: Optional < UpdateAction < TaxCategory >> updateAction = TaxCategoryUpdateActionUtils . buildChangeNameAction ( oldTaxCategory , taxCategoryDraft ); More examples of those utils for different tax categories can be found here .","title":"TaxCategory Sync"},{"location":"usage/TAX_CATEGORY_SYNC/#tax-category-sync","text":"Allows importing/syncing TaxCategory into a commercetools project. It also provides utilities for generating update actions based on the comparison of a TaxCategory against a TaxCategoryDraft . Usage Sync list of TaxCategoryDrafts Prerequisites About SyncOptions Running the sync More examples of how to use the sync Build all update actions Build particular update action(s)","title":"Tax Category Sync"},{"location":"usage/TAX_CATEGORY_SYNC/#usage","text":"","title":"Usage"},{"location":"usage/TAX_CATEGORY_SYNC/#sync-list-of-taxcategorydrafts","text":"","title":"Sync list of TaxCategoryDrafts"},{"location":"usage/TAX_CATEGORY_SYNC/#prerequisites","text":"The sync expects a list of TaxCategoryDraft s that have their key fields set to be matched with tax categories in the target CTP project. Also, the tax categories in the target project are expected to have the key fields set, otherwise they won't be matched. Create a sphereClient as described here . After the sphereClient is set up, a TaxCategorySyncOptions should be be built as follows: // instantiating a TaxCategorySyncOptions final TaxCategorySyncOptions taxCategorySyncOptions = TaxCategorySyncOptionsBuilder . of ( sphereClient ). build ();","title":"Prerequisites"},{"location":"usage/TAX_CATEGORY_SYNC/#about-syncoptions","text":"SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:","title":"About SyncOptions"},{"location":"usage/TAX_CATEGORY_SYNC/#1-errorcallback","text":"A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception tax category draft from the source tax category of the target project (only provided if an existing tax category could be found) the update-actions, which failed (only provided if an existing tax category could be found)","title":"1. errorCallback"},{"location":"usage/TAX_CATEGORY_SYNC/#example","text":"final Logger logger = LoggerFactory . getLogger ( TaxCategorySync . class ); final TaxCategorySyncOptions taxCategorySyncOptions = TaxCategorySyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , taxCategory , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/TAX_CATEGORY_SYNC/#2-warningcallback","text":"A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception tax category draft from the source tax category of the target project (only provided if an existing tax category could be found)","title":"2. warningCallback"},{"location":"usage/TAX_CATEGORY_SYNC/#example_1","text":"final Logger logger = LoggerFactory . getLogger ( TaxCategorySync . class ); final TaxCategorySyncOptions taxCategorySyncOptions = TaxCategorySyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , taxCategory , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/TAX_CATEGORY_SYNC/#3-beforeupdatecallback","text":"During the sync process if a target tax category and a tax category draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : tax category draft from the source tax category from the target project update actions that were calculated after comparing both","title":"3. beforeUpdateCallback"},{"location":"usage/TAX_CATEGORY_SYNC/#example_2","text":"final TriFunction < List < UpdateAction < TaxCategory >> , TaxCategoryDraft , TaxCategory , List < UpdateAction < TaxCategory >>> beforeUpdateTaxCategoryCallback = ( updateActions , newTaxCategoryDraft , oldTaxCategory ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof RemoveTaxRate )) . collect ( Collectors . toList ()); final TaxCategorySyncOptions taxCategorySyncOptions = TaxCategorySyncOptionsBuilder . of ( sphereClient ). beforeUpdateCallback ( beforeUpdateTaxCategoryCallback ). build ();","title":"Example"},{"location":"usage/TAX_CATEGORY_SYNC/#4-beforecreatecallback","text":"During the sync process if a type draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : tax category draft that should be created Please refer to example in product sync document .","title":"4. beforeCreateCallback"},{"location":"usage/TAX_CATEGORY_SYNC/#5-batchsize","text":"A number that could be used to set the batch size with which tax categories are fetched and processed, as tax categories are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding tax categories from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for tax category sync.","title":"5. batchSize"},{"location":"usage/TAX_CATEGORY_SYNC/#example_3","text":"final TypeSyncOptions typeSyncOptions = TypeSyncOptionsBuilder . of ( sphereClient ). batchSize ( 30 ). build ();","title":"Example"},{"location":"usage/TAX_CATEGORY_SYNC/#running-the-sync","text":"After all the aforementioned points in the previous section have been fulfilled, to run the sync: // instantiating a TaxCategorySync final TaxCategorySync taxCategorySync = new TaxCategorySync ( taxCategorySyncOptions ); // execute the sync on your list of tax categories CompletionStage < TaxCategorySyncStatistics > syncStatisticsStage = taxCategorySync . sync ( taxCategoryDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a TaxCategorySyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed tax categories and the processing time of the last sync batch in different time units and in a human-readable format. final TaxCategorySyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*\"Summary: 2000 tax categories were processed in total (1000 created, 995 updated, 5 failed to sync).\"*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied.","title":"Running the sync"},{"location":"usage/TAX_CATEGORY_SYNC/#more-examples-of-how-to-use-the-sync","text":"Sync from an external source . Make sure to read the Important Usage Tips for optimal performance.","title":"More examples of how to use the sync"},{"location":"usage/TAX_CATEGORY_SYNC/#build-all-update-actions","text":"A utility method provided by the library to compare a TaxCategory with a new TaxCategoryDraft and results in a list of tax category update actions. List < UpdateAction < TaxCategory >> updateActions = TaxCategorySyncUtils . buildActions ( taxCategory , taxCategoryDraft , taxCategorySyncOptions );","title":"Build all update actions"},{"location":"usage/TAX_CATEGORY_SYNC/#build-particular-update-actions","text":"Utility methods provided by the library to compare the specific fields of a TaxCategory and a new TaxCategoryDraft , and in turn builds the update action. One example is the buildChangeNameUpdateAction which compares names: Optional < UpdateAction < TaxCategory >> updateAction = TaxCategoryUpdateActionUtils . buildChangeNameAction ( oldTaxCategory , taxCategoryDraft ); More examples of those utils for different tax categories can be found here .","title":"Build particular update action(s)"},{"location":"usage/TYPE_SYNC/","text":"Type Sync \u00b6 Module used for importing/syncing Types into a commercetools project. It also provides utilities for generating update actions based on the comparison of a Type against a TypeDraft . Usage Sync list of type drafts Prerequisites About SyncOptions Running the sync Important to Note More examples of how to use the sync Build all update actions Build particular update action(s) Caveats Usage \u00b6 Sync list of type drafts \u00b6 Prerequisites \u00b6 The sync expects a list of TypeDraft s that have their key fields set to be matched with types in the target CTP project. Also, the types in the target project are expected to have the key fields set, otherwise they won't be matched. Create a sphereClient as described here . After the sphereClient is set up, a TypeSyncOptions should be be built as follows: // instantiating a TypeSyncOptions final TypeSyncOptions typeSyncOptions = TypeSyncOptionsBuilder . of ( sphereClient ). build (); About SyncOptions \u00b6 SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations: 1. errorCallback \u00b6 A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception type draft from the source type of the target project (only provided if an existing type could be found) the update-actions, which failed (only provided if an existing type could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( TypeSync . class ); final TypeSyncOptions typeSyncOptions = TypeSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , type , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build (); 2. warningCallback \u00b6 A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception type draft from the source type of the target project (only provided if an existing type could be found) Example \u00b6 final Logger logger = LoggerFactory . getLogger ( TypeSync . class ); final TypeSyncOptions typeSyncOptions = TypeSyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , type , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build (); 3. beforeUpdateCallback \u00b6 During the sync process if a target type and a type draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : type draft from the source type from the target project update actions that were calculated after comparing both Example \u00b6 final TriFunction < List < UpdateAction < Type >> , TypeDraft , Type , List < UpdateAction < Type >>> beforeUpdateTypeCallback = ( updateActions , newTypeDraft , oldType ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof RemoveFieldDefinition )) . collect ( Collectors . toList ()); final TypeSyncOptions typeSyncOptions = TypeSyncOptionsBuilder . of ( sphereClient ). beforeUpdateCallback ( beforeUpdateTypeCallback ). build (); 4. beforeCreateCallback \u00b6 During the sync process if a type draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : type draft that should be created Please refer to example in product sync document . 5. batchSize \u00b6 A number that could be used to set the batch size with which types are fetched and processed, as types are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding types from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for type sync. Example \u00b6 final TypeSyncOptions typeSyncOptions = TypeSyncOptionsBuilder . of ( sphereClient ). batchSize ( 30 ). build (); Running the sync \u00b6 After all the aforementioned points in the previous section have been fulfilled, to run the sync: // instantiating a type sync final TypeSync typeSync = new TypeSync ( typeSyncOptions ); // execute the sync on your list of types CompletionStage < TypeSyncStatistics > syncStatisticsStage = typeSync . sync ( typeDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a TypeSyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed types and the processing time of the last sync batch in different time units and in a human-readable format. final TypeSyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*\"Summary: 2000 types were processed in total (1000 created, 995 updated, 5 failed to sync).\"*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied. Important to Note \u00b6 If two matching fieldDefinition s (old and new) on the matching type s (old and new) have a different FieldType , the sync will remove the existing fieldDefinition and then add a new fieldDefinition with the new FieldType . The fieldDefinition for which the fieldType is not defined ( null ) will not be synced. More examples of how to use the sync \u00b6 Sync from another CTP project as a source . Sync from an external source . Make sure to read the Important Usage Tips for optimal performance. Build all update actions \u00b6 A utility method provided by the library to compare a Type with a new TypeDraft and results in a list of type update actions. List < UpdateAction < Type >> updateActions = TypeSyncUtils . buildActions ( type , typeDraft , typeSyncOptions ); Build particular update action(s) \u00b6 Utility methods provided by the library to compare the specific fields of a Type and a new TypeDraft , and in turn builds the update action. One example is the buildChangeNameUpdateAction which compares names: Optional < UpdateAction < Type >> updateAction = TypeUpdateActionUtils . buildChangeNameAction ( oldType , typeDraft ); More examples of those utils for different types can be found here . Caveats \u00b6 Updating the label of enum values and localized enum values of field definition is not supported yet. #339 Removing the enum values and localized enum values from the field definition is not supported yet. #339 Updating the input hint of a field definition is not supported yet. #339","title":"Type Sync"},{"location":"usage/TYPE_SYNC/#type-sync","text":"Module used for importing/syncing Types into a commercetools project. It also provides utilities for generating update actions based on the comparison of a Type against a TypeDraft . Usage Sync list of type drafts Prerequisites About SyncOptions Running the sync Important to Note More examples of how to use the sync Build all update actions Build particular update action(s) Caveats","title":"Type Sync"},{"location":"usage/TYPE_SYNC/#usage","text":"","title":"Usage"},{"location":"usage/TYPE_SYNC/#sync-list-of-type-drafts","text":"","title":"Sync list of type drafts"},{"location":"usage/TYPE_SYNC/#prerequisites","text":"The sync expects a list of TypeDraft s that have their key fields set to be matched with types in the target CTP project. Also, the types in the target project are expected to have the key fields set, otherwise they won't be matched. Create a sphereClient as described here . After the sphereClient is set up, a TypeSyncOptions should be be built as follows: // instantiating a TypeSyncOptions final TypeSyncOptions typeSyncOptions = TypeSyncOptionsBuilder . of ( sphereClient ). build ();","title":"Prerequisites"},{"location":"usage/TYPE_SYNC/#about-syncoptions","text":"SyncOptions is an object which provides a place for users to add certain configurations to customize the sync process. Available configurations:","title":"About SyncOptions"},{"location":"usage/TYPE_SYNC/#1-errorcallback","text":"A callback that is called whenever an error event occurs during the sync process. Each resource executes its own error-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the error-event: sync exception type draft from the source type of the target project (only provided if an existing type could be found) the update-actions, which failed (only provided if an existing type could be found)","title":"1. errorCallback"},{"location":"usage/TYPE_SYNC/#example","text":"final Logger logger = LoggerFactory . getLogger ( TypeSync . class ); final TypeSyncOptions typeSyncOptions = TypeSyncOptionsBuilder . of ( sphereClient ) . errorCallback (( syncException , draft , type , updateActions ) -> logger . error ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/TYPE_SYNC/#2-warningcallback","text":"A callback that is called whenever a warning event occurs during the sync process. Each resource executes its own warning-callback. When sync process of particular resource runs successfully, it is not triggered. It contains the following context about the warning message: sync exception type draft from the source type of the target project (only provided if an existing type could be found)","title":"2. warningCallback"},{"location":"usage/TYPE_SYNC/#example_1","text":"final Logger logger = LoggerFactory . getLogger ( TypeSync . class ); final TypeSyncOptions typeSyncOptions = TypeSyncOptionsBuilder . of ( sphereClient ) . warningCallback (( syncException , draft , type , updateActions ) -> logger . warn ( new SyncException ( \"My customized message\" ), syncException )). build ();","title":"Example"},{"location":"usage/TYPE_SYNC/#3-beforeupdatecallback","text":"During the sync process if a target type and a type draft are matched, this callback can be used to intercept the update request just before it is sent to commercetools platform. This allows the user to modify update actions array with custom actions or discard unwanted actions. The callback provides the following information : type draft from the source type from the target project update actions that were calculated after comparing both","title":"3. beforeUpdateCallback"},{"location":"usage/TYPE_SYNC/#example_2","text":"final TriFunction < List < UpdateAction < Type >> , TypeDraft , Type , List < UpdateAction < Type >>> beforeUpdateTypeCallback = ( updateActions , newTypeDraft , oldType ) -> updateActions . stream () . filter ( updateAction -> ! ( updateAction instanceof RemoveFieldDefinition )) . collect ( Collectors . toList ()); final TypeSyncOptions typeSyncOptions = TypeSyncOptionsBuilder . of ( sphereClient ). beforeUpdateCallback ( beforeUpdateTypeCallback ). build ();","title":"Example"},{"location":"usage/TYPE_SYNC/#4-beforecreatecallback","text":"During the sync process if a type draft should be created, this callback can be used to intercept the create request just before it is sent to commercetools platform. It contains following information : type draft that should be created Please refer to example in product sync document .","title":"4. beforeCreateCallback"},{"location":"usage/TYPE_SYNC/#5-batchsize","text":"A number that could be used to set the batch size with which types are fetched and processed, as types are obtained from the target project on commercetools platform in batches for better performance. The algorithm accumulates up to batchSize resources from the input list, then fetches the corresponding types from the target project on commecetools platform in a single request. Playing with this option can slightly improve or reduce processing speed. If it is not set, the default batch size is 50 for type sync.","title":"5. batchSize"},{"location":"usage/TYPE_SYNC/#example_3","text":"final TypeSyncOptions typeSyncOptions = TypeSyncOptionsBuilder . of ( sphereClient ). batchSize ( 30 ). build ();","title":"Example"},{"location":"usage/TYPE_SYNC/#running-the-sync","text":"After all the aforementioned points in the previous section have been fulfilled, to run the sync: // instantiating a type sync final TypeSync typeSync = new TypeSync ( typeSyncOptions ); // execute the sync on your list of types CompletionStage < TypeSyncStatistics > syncStatisticsStage = typeSync . sync ( typeDrafts ); The result of the completing the syncStatisticsStage in the previous code snippet contains a TypeSyncStatistics which contains all the stats of the sync process; which includes a report message, the total number of updated, created, failed, processed types and the processing time of the last sync batch in different time units and in a human-readable format. final TypeSyncStatistics stats = syncStatisticsStage . toCompletebleFuture (). join (); stats . getReportMessage (); /*\"Summary: 2000 types were processed in total (1000 created, 995 updated, 5 failed to sync).\"*/ Note The statistics object contains the processing time of the last batch only. This is due to two reasons: The sync processing time should not take into account the time between supplying batches to the sync. It is not known by the sync which batch is going to be the last one supplied.","title":"Running the sync"},{"location":"usage/TYPE_SYNC/#important-to-note","text":"If two matching fieldDefinition s (old and new) on the matching type s (old and new) have a different FieldType , the sync will remove the existing fieldDefinition and then add a new fieldDefinition with the new FieldType . The fieldDefinition for which the fieldType is not defined ( null ) will not be synced.","title":"Important to Note"},{"location":"usage/TYPE_SYNC/#more-examples-of-how-to-use-the-sync","text":"Sync from another CTP project as a source . Sync from an external source . Make sure to read the Important Usage Tips for optimal performance.","title":"More examples of how to use the sync"},{"location":"usage/TYPE_SYNC/#build-all-update-actions","text":"A utility method provided by the library to compare a Type with a new TypeDraft and results in a list of type update actions. List < UpdateAction < Type >> updateActions = TypeSyncUtils . buildActions ( type , typeDraft , typeSyncOptions );","title":"Build all update actions"},{"location":"usage/TYPE_SYNC/#build-particular-update-actions","text":"Utility methods provided by the library to compare the specific fields of a Type and a new TypeDraft , and in turn builds the update action. One example is the buildChangeNameUpdateAction which compares names: Optional < UpdateAction < Type >> updateAction = TypeUpdateActionUtils . buildChangeNameAction ( oldType , typeDraft ); More examples of those utils for different types can be found here .","title":"Build particular update action(s)"},{"location":"usage/TYPE_SYNC/#caveats","text":"Updating the label of enum values and localized enum values of field definition is not supported yet. #339 Removing the enum values and localized enum values from the field definition is not supported yet. #339 Updating the input hint of a field definition is not supported yet. #339","title":"Caveats"}]}